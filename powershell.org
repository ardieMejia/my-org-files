* Introduction:
** Short but amazing introduction to PowerShell
*** https://www.makeuseof.com/tag/use-powershell-instead-batch/
*** Every Powershell command (cmdlet) is actually a .NET class
** Advanced tasks Powershell can handle (most already known, except the Get-Service which I should try pick up)
*** https://www.makeuseof.com/tag/15-advanced-tasks-powershell-can-handle-windows-10/
** Some cool, basic, but "never tried" stuff
*** https://virtuallysober.com/2018/10/18/my-top-10-powershell-tips-tricks/
*** Leverage PowerShell modules where available
*** If no module exists use Invoke-RestMethod to talk direct with REST APIs
*** (Bonus tip) Create tables (an array) to store multiple variables
* Official:
** 
* Misc but cool (arrange later):
** https://powershell.one/tricks/input-devices/detect-key-press
*** cool potential for Emacs-style fuzzy search
$arrayInput =@()

do
{
    # wait for a key to be available:
    if ([Console]::KeyAvailable)
    {
        # read the key, and consume it so it won't
        # be echoed to the console:
        $keyInfo = [Console]::ReadKey($true)


        $arrayInput += $keyInfo.KeyChar # to get full object, just type $keyInfo outside of loop

        Write-Host $arrayInput -NoNewline
        Write-Output ""
        # foreach ($i in $arrayInput){
        #     Write-Host $i
        # }
        if($keyInfo.Key -eq 'Enter'){
            # exit loop
            break
        }



    }

    # write a dot and wait a second
    # Write-Host '.' -NoNewline
    Start-Sleep -Seconds 1

} while ($true)

# emit a new line
Write-Host

# show the received key info object:
$keyInfo
*** On second thought, it is not worth it, due to the amazing power of fzf
*** Even with the novel idea of displaying matching images, displaying it inside webforms, it is not worth it due to the non-interactive nature of webforms
*** (winforms probably doesnt react very well with keyboard shortcuts)
* Packages (Modules)
** https://www.powershellgallery.com/packages
*** A goldmine of packages including:
**** https://www.powershellgallery.com/packages/Carbon/2.10.2
     - for automating the configuration Windows 7, 8, 2008, and 2012 and automating the installation and configuration of Windows applications, websites, and services
**** https://www.powershellgallery.com/packages/Carbon/2.10.2
*  Databases;
** https://virtuallysober.com/2018/06/14/using-powershell-to-report-on-thousands-of-microsoft-sql-instances-databases/
** https://www.sqlshack.com/working-with-powershells-invoke-sqlcmd/ 
*** Very basic, very useful
*** Apparently, Powershell is mostly used for testing SQL queries and operations, NOT the main tool for SQL operations
** https://www.red-gate.com/simple-talk/sysadmin/powershell/introduction-to-powershell-with-sql-server-using-invoke-sqlcmd/
*** Havent read anything 
* Basics:
** Where and $_
*** https://linuxhint.com/dollar-underscore-mean-in-powershell/
** Control Flow (boring name, wish there was a cooler name for it):
*** Powershell allows arrays as --input/source text-- , each matching statement (in proper order) is executed
switch (4, 2)
{
    1 {"It is one."; Break}
    2 {"It is two." ; Break }
........
}
----- OR -----
[int]$w, [int]$h = switch ($PSCmdlet.ParameterSetName) { 
    someString1 { Write-Output "hello"}
    someString2 { Write-Output "hello"}
}
*** the 2nd one from my Convert-ImageToAscii, never knew this was possible
*** this finally made me understand the concept of [[https://en.wikipedia.org/wiki/Switch_statement][fallthrough]] (mentioned by Brodie Robertson)
**** In many languages, only the matching block is executed, and then execution continues at the end of the switch statement
**** Languages derived from C language instead feature fallthrough, where control moves to the matching case, and then execution continues ("falls through") to the statements associated with the next case in the source text
** Something new learnt, so a While loop is called a pretest loop. Coz if the condition fails, the loop will not run, not even once. 
*** https://4sysops.com/archives/powershell-loops-for-foreach-while-do-until-continue-break/
while(($inp = Read-Host -Prompt "Select a command") -ne "Q"){
    switch($inp){ A {...} B {...} }
}
**** BTW, this is a cool trick. Putting the prompt statement inside a while()
*** this is unlike, the posttest loop, do-while and do-until
** Where {$_.SomeColumn} tricks # ---------- outside my comfort zone
Get-ChildItem -Path *xml -Recurse . | Where {$_.FullName -notlike '*app\build*'} | Select-String "TextView"
** Cool string tricks:
*** check if string contains pattern:
**** https://morgantechspace.com/2016/08/powershell-check-if-string-contains-word.html
* Some cool    tips and tricks on invoking a web request. Very useful if you want to download an image or get a JSON response (what for though??)
** https://stackoverflow.com/questions/22447326/powershell-download-image-from-an-image-url
