* Proposal
*** Lets read our PyCon notes
*** Im sure this dooesnt apply here. But there are still lots of people out there wwho think programming is a ticket to creating an intellectual bubble. We want an open community. After all, technology is supposed to solve problems. And open source by extension, is supposed to solve even more problems.
*** We dont want to scare people with in-group code or jargon
*** A community can lose track of its plot, and create digital enclaves, with social pressure that is anti-thetical to learning  and exploration
*** All programming languages, and all technology domains (for lack of better word, and to cover tech fields that goes beyond just software and framework, and to include even standards)
*** The reaal world is often complex, and solving it in software, many times requires people outside of the tech field, requires deep uderstanding of the tech, yet fresh new eyes are important. These 2 points are often overlap each other
*** those who own the hardware they work on, often develop their skills faster. Layers of abstraction as a way of thinking only works once you get the hang of it in those foundational important early years. Ownership of hardware accelerates this learning process. Open Source operating systems like Linux, and technologies like Python help level the plaaying field by giving the power of ownership back to the common man.
*** Keywords from different fields often dont mean the same thing. Compound this with the fact that the tech  inner circle, is often smaller, and terms vary much more (Eg: compared to the scientific field)
*** Critical systems meant for the medical profession or transportation, are critical in nature, and often have workflows and requirements very different to the open model of validation in systems like Linux. Linux's nature of general purpose, means it must be verified by as many people as possible, regardless of background --> the purpose is to avoid the progress becoming stagnated and avoid ownership of the code being monopoly. Critical systems in their nature, needs less "democracy" in validation, and the people who run the verification tests must be experts.
*** Becoz most successful coders are self taught, the issue of poor documentation remains an issue only to those that actually or need it. Sometimes this is left to Herlucean effort by bloggers (who often dont  get paid enough). Compound this with the fact, that most people are willing to paay for software, but are not willing to pay to improve documentation
*** Depending on the domain of your work, developers often have a common site/blog they go to. Different sites/blogs have different baggages, written by someone with specific background or written for a target  audience (for experts or beginner coders). Someone who is forced to stumble into an IT domain but coming from a very different background (Eg: a meteorologist/a climatologist), might not see this distinction
*** The  struggle is not 1 dimensional. Its not a simple storyof  the battle between big proprietary guy vs. small open source guy
*** Its also not just about owning your code. Its also about owning your data/knowledge
*** Why is this important some programmers to care? (If they are in a position to care). Its a complete myth, that people with a different background who join a company brings no value. Eg: people with physical science background coming into IT. As long as there are channels and opportunities for expression and communication, it ALWAYS brings value
*** Platform independence. Separating application model from platform requirement, thereby acheiving separation of concerns
*** 
* Some Emacs eLisp examples
** I have experimented with, added and deleted eLisp code to my Emacs config throughout the years. Throughout several posts, I want to dump several of my configs that have stuck around and have served me well. They can be considered (relatively) minimal edits. As with my previous, Im stating the assumptions and goal of this post. Assumptions: (1) the person interested knows how to safely use his own Emacs config within his/her workflow (and fully within the c:/Users folder and files space). Goals: (1) giving an idea of what Emacs is capable of. (2) Suggesting minimal improvements that still makes Emacs behave like Emacs (3) Detailing, instead of conceptually describing the code as it will only serve to confuse both beginners and experts of Emacs alike. 
** The following are just dumps of eLisp code that have helped me so far. They help highlighting any word throughout the buffer/file (without introducing something like PyCharms auto-suggest)
#+begin_src lisp

  ;; Some of the references used:
  ;;     https://emacs.stackexchange.com/questions/45895/changing-faces-one-at-a-time-outside-customize
  ;;     https://emacs.stackexchange.com/questions/74181/how-do-i-get-foreground-and-background-colors-of-a-face
  ;;     https://www.gnu.org/software/emacs/manual/html_node/emacs/Faces.html
  ;;     https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Contents.html#index-filter_002dbuffer_002dsubstring-2827
  ;;     https://dev.to/rajasegar/5-ways-to-get-text-from-an-emacs-buffer-4c3l

  NOTE: There are many ways to do this. But here's one hacked together. The my-symbol-numvar is a list of colors to cycle through. 
  (setq my-symbol-numvar '("fringe" "hi-green" "mouse-drag-and-drop-region" "hi-aquamarine" "show-paren-match" "diff-indicator-removed" "hi-salmon" ))
  (defun my-symbol ()
    (interactive)
    (setq my-symbol-numvar (append (cdr my-symbol-numvar)  (list (pop my-symbol-numvar))))
    (setq var1 (buffer-substring-no-properties  (region-beginning) (region-end)))
    (setq var2 (string-replace ":" "" var1))
    (highlight-phrase var2 (car my-symbol-numvar)))

  (global-set-key (kbd "C-c y") 'my-symbol)


  ;; NOTE: to remove the previous highlight. 
  (defun my-unsymbol ()
    (interactive)
    (setq var1 (buffer-substring-no-properties  (region-beginning) (region-end)))
    (setq var2 (string-replace ":" "" var1))
    (unhighlight-regexp var2)
    )

  (global-set-key (kbd "C-c u") 'my-unsymbol)

#+end_src
** Having written this now, I realize I could improve my code. 
