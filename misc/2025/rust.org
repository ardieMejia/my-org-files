* Arrange all this:
#+begin_quote




scalar types
- pointer-size? size of architecture, thats all
- char is single-quoted,
- stack is sequential, and heap is dynamic ()
- let s: &str = "Rust"
- character, reference string, and string
- tupple = uniqueness, stack
- arrays = fixed size, heap
- struct
- enum = Result, Option
- Reference Types: shared,mutable
- Collections: vectors
- Copy or borrowing
- non-copy = string, vectors,




mutability and copy-type, dont be confused




in Rust we d our best to avoid copy, becoz its expensive


#+end_quote
* Emacs: rust-mode
** rust mode commands, these will fail in rust-ts-mode, so we need some remapping done
#+begin_src shell

  C-c C-c C-u rust-compile
  C-c C-c C-k rust-check
  C-c C-c C-r rust-run
  C-c C-c C-t rust-test
  C-c C-c C-l rust-run-clippy

#+end_src
* Emacs: rust-ts-mode 
* rust commands, toolchain(?)
** help explain an option
#+begin_src shell

  rustc --explain

  
#+end_src
** Simplest: M-x compile
#+begin_src shell

  cargo run

#+end_src
** Simplest: M-x compile
#+begin_src shell

  cargo build

#+end_src
** 
* Detailed links:
** [[https://doc.rust-lang.org/std/macro.dbg.html][Standard lib]], explaining datatypes, and macros, such as dbg! important for your basic printing debugging. Also modules and keywords (no clue)
* Conceptual links, forewarning, Rust is obsessed with memory:
** [[https://mortenvistisen.com/posts/how-to-build-a-simple-blog-using-rust][mortenvistisen]]: a simple blog
*** actix-web = Rust web framework
*** serde = serializing & deserializing data structure. If you cant find a method for your data structure, use this
*** tera = templating engine
*** site talks a lot about "move".
*** Rust basically talks a lot about ownership, abstracting "ownership" is an important part of the logic (such as "move")
*** HttpServer::new() or App::new() are called closures
*** prepending closure with move || says "closure, take ownership of any var passed in"
** [[https://crates.io/crates/text_io][text_io]] package/crate
*** NOTE TO SELF: scanning will not work for your amazing Emacs project setup
*** sample quickly shows "mut"and "&mut"
*** [[https://doc.rust-lang.org/std/keyword.mut.html][mut]] can be added before variable type annotation. Example:
#+begin_src rust

  fn foo(mut x: u8, y: u8) -> u8 {
      x += y;
      x
  }

#+end_src
*** the usual:
#+begin_src rust

  let mut a = 5;
  a = 6;


#+end_src
*** its all about memory when it comes to Rust. mut is 1 of those to enforce programmers to think all the time about memory
#+begin_src rust


  let mut v = vec![0, 1];
  let mut_ref_v = &mut v;
  let ref_v = &v;
  mut_ref_v.push(2);

#+end_src
* Event:
** For those that missed the session, simply go to [[https://github.com/rust-malaysia/bevy_workshop][github repo of bevy malaysia]], copy src, clear out obstacles.rs, and start from there. It should be the same thing.
** Some recommended (please go through them, defo begging you...) resources:
*** Install Rust - Rust Programming Language (A must!)
***     Official Introduction to Bevy (Highly recommended!)
***     What is an ECS? feat. Bevy and Rust (Entity-Component-System, a core concept in Bevy, explained in a video by Chris Biscardi)
***     Game Engine Of The Future - YouTube (A very fun and nice introduction to the Bevy engine by TanTan! Definitely not trying to convince you to switch over to Bevy for your future projects hahaha)
***     Bevy Playground (Try Bevy on your browser now!!!! Highly recommended!)
*** Contact us organizers at
***  +60164410216 (Ivan Tham)
***     +60129851338 (Jeffrey Lean)
***     +60173389100 (Nixon)
*** [[https://t.me/+dF46Fly4A_BjOTJl][subscribe for more events]]
***  https://rust-malaysia.github.io/meetup/
*** [[https://www.youtube.com/playlist?list=PL85XCvVPmGQh3V0Pz-_xFm6VAUTR4aLUw][YouTube]]
*** [[https://nixon-voxell.itch.io/lumina][game1]]
*** [[https://github.com/nixon-voxell/lumina][game2]]
*** [[https://bevyengine.org/learn/quick-start/getting-started/setup/][install bevy]]
*** [[https://www.rust-lang.org/tools/install][install rust]]
*** [[https://bevyengine.org/learn/quick-start/introduction/][introduction to bevy]]
*** [[https://www.youtube.com/watch?v=AirfWcVOEHw][Entity Component System]]
*** [[https://www.youtube.com/watch?v=sfFQrhajs6o][YouTube introduction]]
*** [[https://learnbevy.com/playground][bevy playground]]
* Yet to read:
** [[https://robert.kra.hn/posts/rust-emacs-setup/][Robert Krahn blog]] on setting up Emacs for Rust development
** 
