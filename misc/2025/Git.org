* add something
* version of files
** getting versions of file from previous branch, in a much simpler way. git show <somehash>:path/to/file > new_filename.ext
*** [[https://stackoverflow.com/questions/44400736/how-do-i-get-a-particular-older-version-of-a-file-from-git-repository-without][Link]]: simpler and more physical
** jasonrudolph blog for [[https://jasonrudolph.com/blog/2009/02/25/git-tip-how-to-merge-specific-files-from-another-branch/][simpler solution]]
* restoring local changes, after "checking out" other branches
** git stash pop 
*** most basic
** git stash apply stash@{MyBranch}
** git stash list
*** to see what you stashed, helps previous commands
* Managing branches
** [[https://stackoverflow.com/questions/13000563/how-to-push-multiple-branches-from-multiple-commits][pushing multiple branches into origin]]
* Removing files from staging area, [[https://stackoverflow.com/questions/19730565/how-to-remove-files-from-git-staging-area][OOPS]], we dont want those files. But also the working copy
** git reset HEAD -- path/to/file
*** we dont want specific ones in staging
** git reset HEAD -- .
*** we dont want all from stagin
* Reset all local changes [[https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/remove-revert-discard-local-uncommitted-changes-Git-how-to][here]]
** git reset --hard
* [[https://www.freecodecamp.org/news/git-squash-commits/][How to squash commits]]:
** git rebase -i HEAD~6
*** the stupid way to remember. "I want to squeeze my head from ermmm 6"
** "replace pick with squash except the one u want"
** "Git will open text editor twice, put ur fave message"
* Contextual:
** Git push 
*** git push origin main
*** git push --force-with-lease origin <some-branch> # after squash
*** git push -d origin <some-branch>
* Radical or new, coz we keep forgetting:
** [[https://sentry.io/answers/rename-a-local-git-branch/][rename/delete branches and push changes]]
** [[https://refine.dev/blog/git-stash/#how-to-use-git-stash-list][git stash apply]] is great, but you gotta change your workflow a bit
** [[https://stackoverflow.com/questions/1911109/how-do-i-clone-a-specific-git-branch][clone specific branch]] , great if you like to see how far you can manage a mess of a script
** Removing files from history, local, or local and remote, such as sensitive files. Its got the git rm <file> --cached. Link: [[https://www.freecodecamp.org/news/how-to-uncommit-sensitive-files-from-git/][freecodecamp]]s
* Photos
** The different "hardness" of git reset. From [[https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/remove-revert-discard-local-uncommitted-changes-Git-how-to][theserverside]]
[[./Git/git-reset.png]]
* Arrange:
** managing removing directory from remote, afer editing .gitignore (already staged before) [[https://stackoverflow.com/questions/7927230/remove-directory-from-remote-repository-after-adding-them-to-gitignore][link]]

