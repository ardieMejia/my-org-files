* Day 1
** At first started out using Excel as a Database and CLI only app (inspired by [[https://github.com/AnthonyDjogan/Excel-Based-Employee-Management-System_Python-CRUD-Application][AnthonyDjogan EMS]]), and slowly shifted into a proper CRUD (or FUCK) app. 
** successfully installed elpy (projectfile first as requirement)
** we can try anaconda next time
** the key to using our virtualenv
#+begin_src lisp

  (setq elpy-rpc-virtualenv-path <our-virtual-env-path>)
  ;; ========== M-x pythonic-activate
  ;; ========== turns out we have to use pyvenv-activate

#+end_src
* Also, satisfying way to see if it works, install the following so Python Turtle can finally work
#+begin_quote

sudo apt install python3-tk

#+end_quote
* Day 2
** How to tell the Python import search path:
#+begin_src python

  import sys
  print(sys.path)

#+end_src
** instead of pythonic-activate, pyvenv-activate will correctly connect our virtual env with elpy-config (so no warning)
** But this will still not solve running models.py in isolation (C-c C-y b)
* Runing C-c C-y b doesnt look at file directory, but rather some config we dont know.
#+begin_src python

  from pathlib import Path# adds
  cwd = Path.cwd()# adds

  img = Image.open(cwd / '../pomodoro.png')

#+end_src
* only adding our new app will make makemigrations and migrate work.
#+begin_src python

  # Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "polls" # ========== add this
]

#+end_src
* in order to use elpy. We can either install lsp-mode globally or locally (virtual env). We did virtual and Emacs lsp-mode will work. As easy as the following:
#+begin_quote

pip install python-lsp-server

#+end_quote
** we should pyvenv-activate instead of pythonic-activate
** And as usual, we dont need to restart any virtual env. Enabling lsp-mode will ask project root.
* Day 3
** Projectile, it doesnt interfere with LSP or elpy
*** For projectile to work, we need this at the minimum:
#+begin_src lisp

  (setq projectile-globally-ignored-file-suffixes '(".png" ".jpg" ".gif" ".woff" ".woff2" ".ttf" ".cache")) ;; ===== anything you desire to hide

#+end_src
** LSP
*** we were exploring some LSP features when we discovered [[https://emacs-lsp.github.io/lsp-ui/][this]]. lsp-ui is just one of them. Apparently uses xref-find-references, cool existing feature.
*** In order to use lsp-ui, its recommeneded to use use-package ([[https://github.com/jwiegley/use-package][use-package]] lsp-ui). But im thinking use-package is good enough.
** Lets read this cool [[https://github.com/YeasirArafatRatul/DjangoBooks/blob/master/The%20Django%20Book%20(%20PDFDrive.com%20).pdf][pdf]] on Django
** Django Settings: 
*** So it turns out we can use elpy with lsp. We started lsp before elpy, i think it doesnt matter Access settings like this will still not work:
#+begin_src python

  from django.db import connection
  print(connection.vendor) 

  # should show: sqlite
#+end_src
*** you can access settings in the shell, for that inferior shell to work
#+begin_src python

  os.environ["DJANGO_SETTINGS_MODULE"] = "mysite.settings"

#+end_src
* TODO 
** In settings.py, when adding an app. Both of these have the same effect. My guess is config is more "mature"
#+begin_src python

  INSTALLED_APPS = [
    "polls.apps.PollsConfig", # ===== #1
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles"
    # "polls" # ===== #1
]

#+end_src
* Day 4:
** We managed our code
* Day 5:
** We finally separated crud operations into crud.py. This feels mature a bit
* Day 6:
** Our super random notes
#+begin_src python


  # ========== class based view
  # django controller (what they refer to as view) accepts a list of names as method names:
  # "get" "post" "put"

  # the above are essentially base view. But for template views, we can have any name (with argument being the templateview itself). Just import the following:
  from django.views.generic.base import TemplateView

  # and notice the template_name is inherited
  # 
  class HomePageView(TemplateView):
    template_name = "home.html"

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["latest_articles"] = Article.objects.all()[:5]
        return context


#+end_src
* Day 7:
** We finally managed to understand passing state between the pages. First attempt:
[[./PythonDiary/framework_001.png]]
** Our second attempt felt really professional
[[./PythonDiary/framework_002.png]]
* Day 8:
** Why is documentation on Flask configs so bad?
** 
* Day 9:
** Replaced the conditionals and prompts in the "input"ing functions to simple assignment and pandas to excel writes
** finally discovered logger
* Day 10:
** Created dropdown with event names finally. Passing from controller (or views) to the html file works with Panda, but requires to_dict in some manner. Things we can try:
#+begin_src python

  a_df.to_dict()
  a_df.to_dict('records')
  a_df.tolist()

#+end_src
* Day 11:
** NOTE: What is XMLHttpRequest?
*** Its a misnomer, XHR can also be used to send jSON, HTML, Plain Text & XML
*** a request sent, client -> server, to retreive data
*** to update the page without a ful page refresh
*** It is part of AJAX = a model to make web apps faster (update bits of webpage, without a full refresh)
** ajax basics like this
#+begin_src javascript

      <!-- first we have a button -->
    
      <button type="button" onclick="loadDoc()">test</button>

      <!-- then, we have something like this, notice the {{{}}} for function, xhttp, this.status & -->
      <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
      <script>
      function loadDoc(){
          var xhttp = new XMLHttpRequest();
          xhttp.onreadystatechange = function() {
              if (this.readyState == 4 && this.status == 200) {
                  document.getElementById("demo").innerHTML = this.responseText;
              }
          };
          xhttp.open("GET", "/process_form", true);
          xhttp.send();
      }  

#+end_src

** another one with a project I did, dynamic dropdown
#+begin_src javascript

  	   $( "#mylist" ).on( "change", function() {
	       var val = this.value;
	       $.ajax({
		   type:"GET",
		   url:"/ajax",
		   data:{ 'event_id': val },
		   success: function(resp){
		       $( '#event_details' ).show();		       		       
		       document.getElementById("event_date").innerHTML = resp['event_date'];
		       document.getElementById("event_format").innerHTML = resp['event_format'];
		       document.getElementById("no_of_rounds").innerHTML = resp['no_of_rounds'];
		       document.getElementById("gender").innerHTML = resp['gender'];
		       document.getElementById("cat").innerHTML = resp['cat'];
		       document.getElementById("subcat").innerHTML = resp['subcat'];
		       document.getElementById("cost").innerHTML = resp['cost'];
		   }
	       });
	   });

#+end_src

** NOTE, basics:
*** We create XMLHttpRequest class and capture in variable
*** open a basic request, to a basic API (commonly used for testing)
#+begin_src javascript


  // <script>
  const xhttp = new XMLHttpRequest();
  xhttp.open('GET', 'https://jsonplaceholder.typicode.com/users');
  xhttp.send();

  // handing an XHR response, the anonymous function onreadystatechange() responds to any change xhttp.readyState
  xhttp.onreadystatechange = () =>{
      if(xhttp.readyState == 4  && xhttp.status == 200){
          document.write(xhttp.response);          
      }
  }
  // </script>


#+end_src
*** xhttp.readyState
[[./PythonDiary/xhr_basics.png]]
*** Exercise:
**** Try including these 2 to get content by clicking a button
#+begin_src javascript

  const p = document.getElementById('myp);

  // ========== snip
  // ========== inside ifs
  p.innerText = xhttp.response;



#+end_src
* Day 12:
** installed pip install flask-sqlalchemy
** installed pip install flask-migrate
** sqlalchemy object and migrate object
** created an object that inherits db.Model, sqlalchemy as sa, sqlalchemy.orm as so
** we created a migration repository, basically folder that stores scripts. These scripts are created everytime we do some database schema changes
** we created the migration script
** we do the migration
** Relationship:
** apart from so.mapped_field, we also have so.relationship which is just a CODE-only field (not database field)
* Day 13:
** finally made a html form for the user, but still havent done for blog Posts
** improved Emacs select Hydra
** Made the first relationship, with everything in 1 file though
[[./PythonDiary/framework_003.png]]
* Day 14:
** created both Users and Posts through messy forms
** went back a Git branch
** properly learnt the entire process for initiializing a migration repo, creating migration script, and executing the script
* Day 15:
** learnt how to properly migrate (creating a script) and upgrade (applying the script)
** discovered that a primary key can be any field. However, it doesnt stop entry of duplicates. Turns out we dont have unique set to True.
* Day 16:
** We successfully created a delete (no Javascript, fully Flask, by id)
* Day 17 
** We successfully learnt to bulk insert
** But we have yet to bulk insert parent and child models
** We managed to use declarative_base (which seems to imply some auto-mapping logic)
** declarative_base works even you already have a database. Which means no create_engine
** The non-declarative-base way:
#+begin_src python

  with open(r'./input/input.csv', newline='') as csvfile:

    dictreader = csv.DictReader(csvfile, delimiter=',')
    for row in dictreader:
      app.logger.info(row)
      e = Event(tournamentName=row['tournamentName'], startDate=row['startDate'], endDate=row['endDate'], discipline=row['discipline'])
      db.session.add(e)
      # ===== commit..

#+end_src
** The kinda cool declarative-base, first create a class that inherits a [[https://www.andrewvillazon.com/move-data-to-db-with-sqlalchemy/][declarative_base]], and then:
#+begin_src python

  with open(r'./input/input.csv', newline='') as csvfile:
    dictreader = csv.DictReader(csvfile, delimiter=',')
    listings = [EventListing(**row) for row in dictreader]
    db.session.add_all(listings)

#+end_src
* Day 18
** we struggled for the longest time. Struggled with InstrumentedList, which is the the default query result in Flask_Sqlalchemy. Turns out, something like "parent.child.name", becoz its a many-to-many, instead, we do loop in Jinja
** We either use db.Model or Base as args in our model classes. BUT! db can should be passed from our original app context, NOT a raw import like db = SQLAlchemy(). This is why our raw SQLAlchemy attempt was not read by commands like "flask db migrate". The command itself depends on the app context.
*** Note how SQLAlchemy(app) is the same object as raw SQLAlchemy object. In the Flask-Sqlalchemy version:
#+begin_src python

  # ========== Eg: fed from app.py
  db = SQLAlchemy(app)

  # ========== Eg: model files
  event_member = db.Table(
    "event_members",
    db.Column("event_id", db.ForeignKey("event.id")),
    db.Column("member_id", db.ForeignKey("member.mcfId"))
)
#+end_src
*** In raw SQLAlchemy:
#+begin_src python

  from sqlalchemy import Column, Table, ForeignKey, Integer, String
  
  event_member = Table(
    "event_members",
    Base.metadata,
    Column("event_id", ForeignKey("event.id")),
    Column("member_id", ForeignKey("member.mcfId")),
    extend_existing=True,

#+end_src
* Day 19:
** we learned from the cool table from [[https://www.geeksforgeeks.org/tailwind-css-tables-complete-reference/?ref=shm][GeeksForGeeks]] but its still a very slow process.
** it seems we should very soon do a Bootstrap version
* Day 20:
** We spent time reading from both Bootstrap and Tailwind CSS. We managed to create proper behaving columns and tables inside every page.
** We also learnt about templating inheritance in Jinja. Properly
* Day 21:
** Small snippets learnt (CSS). As we learnt, CSS is contextual, and often "projects its context onto child/parent". In this example, button behaves correctly.
#+begin_src html

  <td>
    <div class="m-3">
      <button type="submit" class="w-full ...">Submit</button>
    </div>
  </td>

#+end_src
** [[./PythonDiary/css_div_1.png]]
** In this example, button disrespects the parent, overflows out.
#+begin_src html

  <td>
    <div>
      <button type="submit" class="w-full m-3 rounded-md bg-slate-800 py-2 px-4 border border-transparent text-center text-sm text-white transition-all shadow-md hover:shadow-lg focus:bg-slate-700 focus:shadow-none active:bg-slate-700 hover:bg-slate-700 active:shadow-none disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none">Submit</button>
    </div>
  </td>

#+end_src
** [[./PythonDiary/css_div_2.png]]
* Day 22:
** We read on deploying Django Flask apps on Render. Basic minimum things we have to change
** Django:
*** DATABASES (but requires the Python package dj_database_url to parse but Flask doesnt require this, also requires pyscopg2-binary for Python postgresql drivers)
*** our migration worked, can be seen from PostgreSQL viewer apps, such as, dbeaver. 
*** DEBUG (conditional value on environment setting)
*** ALLOWED_HOST (conditional on environment, split(), and spaced it in render)
*** SECRET_KEY (conditional on environment)
*** the pip freeze workflow
** Flask, settings.py:
* Day 23
** DONE Terry started asking reminding the money is running out. But why? He doesnt seem to realize that this thing takes effort and money. Also, he cant see the reward in his face.
** Object debugging
#+begin_src python

  pd.read_sql(query,db.session.connection())
  # ========== in the middle debugging through type().
  # I disovered that connection shows up as <class 'method'> and connection() shows up as  <class 'sqlalchemy.engine.base.Connection'>
  # Sometimes what is function and what is an object is not always obvious. In this case, connection that we wanted for pandas, was easily accessible from Flask-Sqlalchemy but with a function

#+end_src
** Gunicorn:
*** Our entry point is wsgi.py (instead of app.wsgi in some online examples)
#+begin_src python

  gunicorn --bind 127.0.0.1:5000 'wsgi:app'

#+end_src
*** [[https://kevalnagda.github.io/flask-app-with-wsgi-and-nginx][best link so far]]
*** 
* Day 24:
** Tried so many links showing @jwt_required, but none of them work so far. Always with the "Missing Authorization Header". 
** Flask sessions works much better. But always needs conditional.
** We spent 3 days doing nothing but reading on this, we dont need to deliver. We need more communication.
** 
** 
* Day 25:
** We installed PostgreSQL for the first time, becoz SQLite doesnt support foreign key
** we tried Flask session, it works, but soon we should Flask-sessions
** Spent 2 hours solving the PostgreSQL installationg problem:
*** We just needed to execute commands with semicolon (IMPORTANT), before we got to see database, after \l command
*** [[https://realpython.com/flask-by-example-part-2-postgres-sqlalchemy-and-alembic/][RealPython]] examples, but it assumes no setup and login problems for DB
*** General flow
#+begin_quote

CREATE USER <your_username> WITH PASSWORD '<your_password>';
CREATE DATABASE <your_database> OWNER <your_username>;
GRANT ALL PRIVILEGES ON DATABASE <your_database> TO <your_username>;
# ===== disable login required
# Edit pg_hba.conf (location: /etc/postgresql/<version>/main/pg_hba.conf
# ===== where all lines mention local setup, replace MD5, with trust

#+end_quote
*** 
* Day 26:
** We finally made a "proper" c_templater. It accepts list and uses a global dict. But classing that dict is not necessary
** We successfully did a "cascade delete" for members and FIDE
** discovered a super-impressive Excel stackoverflow that we migt try someday
* Day 27:
** We spent a lot of time with this error:
#+begin_quote

ERROR [flask_migrate] Error: Can't locate revision identified by '00de22c8141a'

#+end_quote
** A common solution is to remove the [[https://stackoverflow.com/questions/56596756/how-to-remove-a-row-from-the-alembic-version-table-in-flask-app][alembic_version]] TABLE from our database. But then we ancountered an error.
#+begin_quote

sqlalchemy.exc.ProgrammingError: (psycopg2.errors.DuplicateTable) relation "event" already exists

#+end_quote
** Simply deleting all our model tables (member, event, event_members) solved the problem. No deleting migrations/ folder needed. We simply migrate as usual
* Day 28:
** Learnt a new trick, of solving squeezed tables in Tailwind. (Becoz we use divs for resizing, but we dont expect tables to move about). Using w-<somenum>, the header becomes the column size.
#+begin_src html

  <table class="some-class">
    <thead>
      <tr class="some-class">
        <th class="w-30">Header 1</th>
        <th class="w-200">Header 2</th>
        <!-- ..... snip ..... -->
      </tr>
    </thead>
  </table>
  
#+end_src
** We cant do migrations our usual migrations using a free Render account, we should either do a full drop_all() create_all() with an app context. We maybe need to read more on this.
#+begin_src python

  # ===== this solves migration issues using Renders free account
  with app.app_context():
      db.drop_all()
      db.create_all()

#+end_src
* Day 29: 
** Due to database migration issue, and many other problems. Spent most of the time recreating what I did before, + some new templates (logo) for errors.
* Day 30
** Heres a common error for you below. 
#+begin_quote

No 'id' attribute - override 'get_id'

#+end_quote
** It simply means to override default function get_id() as in below.
#+begin_src python

  class User(#...):
          # ...
          def get_id(self):
          return (self.user_id)
          # ...


#+end_src
* Day 31:
** Its only when I asked the question "How do I center an SVG inside a table" do I solve my "uncentreable" SVG in a table.
*** it shows in this [[https://stackoverflow.com/questions/8639383/how-do-i-center-a-svg-in-a-div][stackoverflow]] to use:
#+begin_src css

  .container {
    display: flex;
    justify-content: center;
  }

#+end_src
*** It seems simply adding a "flex" to a "dead" item inside a table, gives it life again (with div of course)
* Day 32:
** I struggled with flask db migration scripts:
*** When running both upgrade and downgrade both produces errors
*** running flask db migrate shows database as not up to date. But it should be producing a script
*** Running flask db stamp head works
** What does flask db stamp head do?
* Stop, were doing UPLOADS:
** https://python-adv-web-apps.readthedocs.io/en/latest/flask_db2.html
** https://saturncloud.io/blog/efficiently-appending-to-a-dataframe-within-a-for-loop-in-python/
** [[https://stackoverflow.com/questions/68568527/create-excel-file-from-dataframe-and-allow-download-in-flask-error-file-format][and finally writing]]
* Day 33:
** Installed pyenv under '/home/ardie/.pyenv' to allow multiple Python versions
** Installed Py version 3.10
** 
* Day 34:
** Finished setting up a jQuery site on laptop for learning jQuery
** jQuery is actually VERY readable with help of all those curly brackets & parenthesis
** https://github.com/avazquezcendron/memory-card-game
* Day 35:
** Finished creating simple Event registration, fixed class member of "discipline" list, new errorsList for invalid data
* Day 36:
** Successfully made update/delete of events (avoiding ORM declared relationships)
** Attempting to remove working circular imports using __init__.py
* Day 37:
** Commands I tried before:
#+begin_quote

gunicorn -b 0.0.0.0:9000 'wsgi:app' -t 300 --keep-alive 300

#+end_quote
** Errors, endless errors:
***     df.fillna(0) # otherwise: ValueError: cannot convert float NaN to integer
#+begin_src python

    from sqlalchemy.orm import sessionmaker
    from contextlib import contextmanager


    db = SQLAlchemy(app)
    app.app_context().push()

    # without app.app_context().push(), both below will fail
    Session = sessionmaker(bind=db.engine)

  @contextmanager
  def session_scope():
      """Provides a transactional scope around a series of operations."""
      session = Session()
      try:
          yield session
          session.commit()
      except Exception:
          session.rollback()
          raise
      finally:
          session.close()


  # we should finih this stupid example below
  def something():
      with session_scope() as session:
          m = session.query(Member).filter_by(mcfId=row[mapFrom['mcfId']]).first()

#+end_src
** 
* Day 38:
** We included, apart from drop_all create_all: close_all_sessions(), engine.dispose(), session.commit(). To make sure no idle connections, or idle drop_table
** Not sure if its just that, but restarting the DB and doing this, solved everything.
* Day 39:
** We fixed the saving and deleting of tounrnament names. 
** success: redirected the members saving events 
** most of the ERRORS came from [].remove and [].append. In which it operates on the object calling it, No need to assign =
* Day 40:
** 
