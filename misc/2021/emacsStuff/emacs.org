
* This repo is currently under construction. Read at your own risk. But they're good links.
** Never be afraid to try something with Emacs init.el. When something goes wrong, just delete all .emacs.d & .emacs.d/ and start over.
* Part 1
** If you ever tried learning Emacs by yourself, you'll quicky discover that Emacs is hard. Flexible but hard. But hard is often a matter of journey, not skill. A beginners framework can help you on that journey. 
*** https://www.spacemacs.org/
*** https://prelude.emacsredux.com/en/latest/
*** https://docs.doomemacs.org/latest/
** A list of common but technical & conceptual but opinionated websites. For beginners and advanced uses alike. 
*** https://www.emacswiki.org
*** http://xahlee.info/
*** https://www.gnu.org/software/emacs/manual/
*** https://zzamboni.org/
** Navigation, behaviours
*** I always use C-x C-f for everything. Thats already enough for me. 
**** There are other tips on [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Visiting.html][basic visiting/opening file]], but most of these I myself dont even use 
*** Same thing with saving files
**** I only use one of these commands on [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Save-Commands.html][saving files]]
*** vertical vs horizontal split of windows in Emacs
**** Context:
***** org-agenda, using a variable =====> (setq split-width-threshold 100) or any value
****** [[https://emacs.stackexchange.com/questions/2513/how-to-get-org-agenda-to-prefer-split-window-right][The variable split-width-threshold to control vertical or horizontal split]]
**** No context:
***** C-x 3
****** https://stackoverflow.com/questions/20167246/emacs-open-buffer-in-vertical-split-by-default
*** *disabled* Quickly open a buffer of the same file, to narrow (narrow using C-x n n widen using C-x n w), while not affecting original window 
*** https://stackoverflow.com/questions/9709121/is-there-a-way-to-narrow-to-region-in-one-window-while-not-narrowing-in-another
*** C-x 4 c to open temporarily a buffer, maybe to indent or something
*** this behaviour probably not encouraged, probably becoz there are other better alternatives, and confusing for beginners
* Loading subtlety, hooks, eval, yadayada
** How to "hook" a minor mode to a major mode. The # (hash) is NOT necessary
*** (add-hook 'sh-mode-hook 'electric-pair-local-mode)
**** https://stackoverflow.com/questions/12763566/how-to-permanently-enable-the-hs-minor-mode-in-emacs
** Alternative, using lambda, nothing special
*** https://stackoverflow.com/questions/8892813/emacs-shell-script-mode-hook
** https://stackoverflow.com/questions/2736087/eval-after-load-vs-mode-hook
*** eval-after-load is NOT buffer-aware, runs only once.
*** mode-hook is buffer-aware, runs for every buffer
*** mode--hook run after eval-after-load
** require, autoload, and all sorts of stuff
*** Code practice: autoload
#+begin_src emacs-lisp
  ;; Where  second.el has the function say-hello
  ;; and file will only be loaded when function is called
  ;; this makes things faster, must learn more about this
  (autoload 'say-hello "~/my-trash/elispPractice_autoload/second.el")


  (say-hello 6)
#+end_src

** https://www.reddit.com/r/emacs/comments/643dkt/use_package_vs_require_and_maybe_some_sorrowful/
*** Lots of useful comments on use-package vs require. Most importantly, you learn that require is standard GNU Emacs since 1985. WOW! Library authors dont assume everyone has use-package, hence, many dont include it in installation instructions
* Emacs Daemon. Might not be important for beginners, but VERY useful, and you'll love it once you get it to work. But I cant make it work under Windows for some reason
** https://stuff-things.net/2014/12/16/working-with-emacsclient/
** https://wikemacs.org/wiki/Emacs_server
* Keybinding (under construction)
** Our init.el org-mode-map seems best
*** with-eval-after-load & -mode-map
**** https://www.reddit.com/r/emacs/comments/6sgwfc/how_do_i_set_a_key_binding_only_for_a_particular/
(with-eval-after-load "org"
  (define-key org-mode-map (kbd "S-<left>") 'backward-char)
  (define-key org-mode-map (kbd "S-<right>") 'forward-char)
  (define-key org-mode-map (kbd "S-<up>") 'previous-line)
  (define-key org-mode-map (kbd "S-<down>") 'next-line)
  (define-key org-mode-map (kbd "C-S-c C-, o k") 'ardie-open-kodland)
*** with-eval-after-load & local-set-key
**** https://emacs.stackexchange.com/questions/12293/mode-hooks-and-eval-after-load
(add-hook 'org-mode-hook
          '(lambda ()
             (local-set-key (kbd "S-<left>") 'backward-char)
             (local-set-key (kbd "S-<right>") 'forward-char)
             (local-set-key (kbd "S-<up>") 'previous-line)
             (local-set-key (kbd "S-<down>") 'next-line)
             (local-set-key (kbd "C-S-c C-, o k") 'ardie-open-kodland)))
** In the long term, once we understand, we should avoid -eval- & hooks (??)
*** https://www.wisdomandwonder.com/emacs/12783/are-load-hooks-always-a-bad-idea
** Lots of information
*** https://www.masteringemacs.org/article/mastering-key-bindings-emacs
**** Interestingly, C-c ? (where ? is any single character), is reserved for user & USERS alone. But most 3rd packages dont give a shit
***** I actually personally use C-S-c coz I learnt my Emacs by deep diving dangerously, by blindly copying a config from some Indian Emacs developer named Kaushal Modi. Theres a Github link of the most famous configs collected under one repo. [[https://github.com/caisah/emacs.dz][right here]]
**** Also, 2 keys that are reserved (remnants from ancient 80's keys), are Hyper & Super. Today, Super is "Windows key" & Hyper is "Application-Context"
***** These keys are also reserved, might be very useful
**** Also, in "key lookup order", confusingly, Minor Mode comes before Local which also comes befor Global. (I tot Local overrides Global?)
* dired file manager
** https://www.youtube.com/watch?v=PMWwM8QJAtU
*** System crafters
*** shortcuts
**** j - goto file
**** k - kill marked files, NOT real deletion, only the listing
**** g - revert buffer, aka refresh
**** v - dired-view-file, allows view without opening the file, quick q exits to previous dired buffer
**** C-M-o - dired-display-file
** https://lucidmanager.org/productivity/using-emacs-image-dired/
*** TODO!!!!!
*** Very cool, imagine opening GIMP automaticallly from inside Emacs
* folding, hide & other cool tricks
** Should start collecting it here!!
* Looks, looks, looks:
** If you want some really great looking suggestion on fonts, from usable examples. Look at this
*** https://www.reddit.com/r/emacs/comments/14q399t/hi_out_of_curiosity_what_are_your_favourite_fonts/
*** Especially the code snippet below

(dolist (buffer (list " *Minibuf-0*" " *Echo Area 0*"
                        " *Minibuf-1*" " *Echo Area 1*"))
    (when (get-buffer buffer)
      (with-current-buffer buffer
        (face-remap-add-relative 'bold :weight 'normal)
        (face-remap-add-relative 'default :weight 'light))))

(add-hook 'minibuffer-setup-hook
          '(lambda()
             (face-remap-add-relative 'bold :weight 'normal)
             (face-remap-add-relative 'default :weight 'light)))
** System Crafters has a very cool Lisp code using the macro/function (?) called dolist
*** https://systemcrafters.net/emacs-tips/presentations-with-org-present/
** How do you find out font (what Emacs calls faces) information?
*** https://www.emacswiki.org/emacs/FaceList
**** by M-x list-faces-display
*** https://www.emacswiki.org/emacs/Face
**** You can use  C-u C-x =  to find out which faces are applied to the text at point (under the cursor).
** You might have to read this one day
*** https://zzamboni.org/post/beautifying-org-mode-in-emacs/
*** https://www.gnu.org/software/emacs/manual/html_node/emacs/Face-Customization.html
*** https://www.gnu.org/software/emacs/manual/html_node/emacs/Faces.html
*** https://github.com/abo-abo/swiper/issues/568
* YASsnippets:
** Great beginner example, Im finally learning from this example:
*** https://joaotavora.github.io/yasnippet/snippet-development.html
** Great example too:
*** https://joaotavora.github.io/yasnippet/snippet-reference.html
** I finally know how setup config (dirs etc) properly
*** https://joaotavora.github.io/yasnippet/snippet-organization.html
* org templates:
** Finally once you start inserting your first code block (template, whatever). We can read this
*** https://www.nicholasvanhorn.com/posts/org-structure-completion.html
* Something I have never used in Emacs, but usually in terminal, replace text/patterns in multiple files:
** https://stackoverflow.com/questions/270930/using-emacs-to-recursively-find-and-replace-in-text-files-not-already-open
*** Need as input: --> filename pattern & regex text
* Very IMPORTANT, saved all my loading problems!!:
** https://github.com/jwiegley/use-package/issues/494
*** Personally, I just removed "package-refresh-contents" from setup-packages.el
** Additional read too
*** https://ianyepan.github.io/posts/setting-up-use-package/
* An apparently, very cool init.el, according to one good emacs user. Must read it 1 day
** https://github.com/eastwood/config/blob/master/emacs.d/init.el
* Very Cool. But important to not over-rely. Auto-saving for Emacs, by exploiting "out-of-focus"
** https://www.emacswiki.org/emacs/AutoSave
*** 'focus-out-hook'
* Cool for development, you might want to include this in an init file. Maybe as a separate development-init.el
** https://emacs.stackexchange.com/questions/169/how-do-i-reload-a-file-in-a-buffer/171#171
* [[https://guix.gnu.org/manual/en/html_node/Application-Setup.html][GUIX magically works along with my spacemacs, how?]]
** Something about locales GUIX_LOCPATH, will never allow foreign-distro programs to load GUIX stuff,
*** -> while ensuring GUIX only loads everything foreign  and local.
*** this "foreign-distro" programs cant see GUIX_LOCPATH
** If thats the case, we can install Tramp by:
*** unset the GUIX_LOCPATH variable
*** reload original spacemacs safely
*** and try to install Tramp and load Google drive from there
** If that doesnt work then, its safe to
*** reset everything back to GUIX spacemacs, and
*** install TRAMP from there
* Basics, education:
** Interesting, lead from other examples:
*** https://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html
**** advising Lisp functions
***** advice-add , advice-remove , but no defadvice , like we saw from another Tut
**** PRACTICE: using filter-return


#+begin_src lisp
;; cool discovery, a way to hide non-used argument, now we pass willy-nilly
(defun x-double (x &rest _what)
  (print
   (* x 2))
  (print _what)
  )

(defun say-hello (x)
  ;; (print x)
  (message "hello there")
  (+ x 1)
  ;;
  )

(advice-add 'say-hello :filter-return #'x-double)

(x-double 5)
(say-hello 5)
#+end_src



**** PRACTICE: using filter-args

#+begin_src emacs-lisp
;; for some odd reason, adding more>1 argument produces errors, becoz filter-args focuses on arguments between A & B, we should forget what we feed to B (B is called first)

(defun x-list (first)
  (mapcar '1+ '(2 4 6))
  )

(defun say-hello (first second third)
  (print first)
  )

(advice-add  'say-hello :filter-args #'x-list)

;; Also, dont understand exactly. Why does the number of arguments have no effect here?
(say-hello 5 6 7)
#+end_src









**** Dont forget to unset between practices to remove pairings function.


(advice-remove 'say-hello  'x-list)


** Lisp
*** One of the best basic intro into eLisp:
**** https://cs.gmu.edu/~sean/lisp/LispTutorial.html
** elisp - my enlightenment
*** https://emacs.stackexchange.com/questions/80/how-can-i-quickly-toggle-between-a-file-and-a-scratch-buffer-having-the-same-m
** Errors:
*** https://discourse.doomemacs.org/t/common-errors-how-to-deal-with-them/58
**** A bit useful, should read one day.
** Datatypes, converting strings, etc..
*** https://www.gnu.org/software/emacs/manual/html_node/elisp/String-Conversion.html
*** https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Comparison.html
*** maybe a good website
**** https://www.math.utah.edu/docs/info/emacs-lisp-intro_8.html#SEC92
*** So many cool things to try, like nyanmode, cute cat that browses with you.
**** https://www.emacswiki.org/emacs/ModeLineConfiguration
* Wishlist
** https://github.com/oantolin/embark
*** Embark makes it easy to run commands depending on where your point (cursor?) is
*** Embark is like a keyboard based version of right-click contextual menu (pop-up)
*** Examples:
**** For files you can delete, copy, rename
**** For buffers, you can kill or switch
* How do we export to PDFs:
#+begin_src sh

  sudo apt update
  sudo apt install texlive-latex-extra
  # ===== (all following errors indicated by the buffer *Org PDF Latex Output*)
  # ===== apparently org export uses xelatex, which is a replacement for pdflatex
  sudo apt install texlive-xetex
  # ===== another error, this minted needs to use python-pygments
  sudo apt install python-pygments

  # ==================== HOLY SHIT!! It works
#+end_src
** The links we below tried reading below, but in the end the previous instructions simply worked
*** https://www.geneatcg.com/emacs-org-mode-export-to-pdf/
**** No installation instructions
**** Has a starter code, to put inside init.el. (LOTS of add-to-list to org-latex-classes & org-latex-pdf-process)
**** From this site, you DONT NEED to learn latex syntax, the starter code does that
**** Simple use code, and export
*** https://medium.com/@sachinsamurai/setting-up-latex-on-doom-emacs-for-beginners-824358463a42
**** This one assumes you want to learn Latex, oops
**** Though it points to another site where you install proper Latex
*** https://www.tug.org/texlive/
**** exporting pDf through latex, can produce LOTS of errors. If all fails, always better to install the FULL latex, and from the original TUG source. (7GB!!)


* Possible projects
** I want to have a buffer on the right side that automatically updates, whenever I change some source file (.org file maybe) on the left side
** Might be useful to familiarize with these functions, has lots of em, and very simple explanation
*** http://xahlee.info/emacs/emacs/elisp_buffer_file_functions.html
* modifications that are fancy/fun, but not important
** Configuring the modeline
*** Important variables, actually some are confusing. And it was easier for me to just edit Emacs modeline with simple functions, like combining (cond ..) & (major-mode)
**** https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode-Line-Variables.html
*** I used emojis from here
**** https://unicode.org/emoji/charts/full-emoji-list.html
*** I dont know what this is for
**** https://www.emacswiki.org/emacs/modeline-region.el
*** If you were testing modeline in a buffer, the command force-mode-line-update might be useful
**** https://www.reddit.com/r/emacs/comments/euox3d/is_there_a_way_to_refreshupdate_the_modeline/
*** Config examples:
**** https://github.com/rougier/emacs-octicons
**** https://www.gnu.org/software/emacs/manual/html_node/eintr/Mode-Line.html
***** I based my entire config on this one
*** https://emacsdocs.org/docs/elisp/Emulating-Mode-Line
**** Should probably check this site
* More cool stuff to re-arrange!!
** https://masteringemacs.com/article/diacritics-in-emacs
** Email
*** https://shom.dev/posts/20220108_setting-up-protonmail-in-emacs/
**** Unlike systemcrafters (ubuntu I guess), guix version of mu includes mu4e
** Hydra, MUST read this and write properly later
*** https://elpa.gnu.org/packages/hydra.html
*** https://github.com/abo-abo/hydra
*** https://www.reddit.com/r/emacs/comments/8of6tx/tip_how_to_be_a_beast_with_hydra/
** http://xahlee.info/emacs/emacs/emacs_auto_save.html
*** an argument against making save an automatic feature. And an argument for saving whenever you switch out of Emacs (that is switching to other apps, like a browser, or switching workspace). Ive had this on, for a long time. But now reading argument for it, what a relief. For some time, I was thinking whether Emacs not having an auto-save every second (like other IDE's) a benefit or annoyance. Now I guess, my practice has always made sense (Besides, when we are developing/writing, we mostly need saving when we do something else, browswing a word/article, so attaching it to 'focus-out-hook makes complete sense)
* From Redplanet (rearrange later):
** https://lists.gnu.org/archive/html/help-gnu-emacs/2003-04/msg00767.html
*** This code adds directories and its sub-directories to load-path. The reason why we dont do this is probably becoz load-path can get excessively long, and Emacs users might want to selectively disable some features.
#+begin_src lisp

  (let* ((dir (expand-file-name "~/emacs"))
	 (default-directory dir))
    (when (file-directory-p dir)
      (add-to-list 'load-path dir)
      (if (fboundp 'normal-top-level-add-subdirs-to-load-path)
	  (normal-top-level-add-subdirs-to-load-path))))
  
#+end_src

* Rearrange:
** Learning common lisp and eLisp, eLisp doesnt have the stream function, they have insert-file-contents

#+begin_src emacs-lisp

(defun ardie-temp ()
  (interactive)
  (insert-file-contents "~/my-trash/delete/input.txt" "what")
  )

(global-set-key (kbd "C-S-z") 'ardie-temp)

#+end_src
** The reason why Emacs uses an alist
*** https://emacs.stackexchange.com/questions/3397/how-to-replace-an-element-of-an-alist
** This one is DEFINITELY relevant to our GIS system
*** https://groups.io/g/sw-gis/topic/install_emacs_for_smallworld/75042662?p=
* We may need to read and rearrange in a separate file called EmacsWindows.org:
** https://www.emacswiki.org/emacs/CategoryWThirtyTwo
** There are many ports of GNU tools available
*** https://www.gnu.org/software/emacs/manual/html_node/efaq-w32/Other-useful-ports.html
** But we're interested only in one. Cygwin. Apparently, its also the most popular

