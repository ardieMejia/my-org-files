* Emacs frameworks, a good introduction of Emacs, with lots of built-in defaults.
** https://www.spacemacs.org/
** https://prelude.emacsredux.com/en/latest/
** https://docs.doomemacs.org/latest/
** A list of other help
*** https://www.emacswiki.org
*** http://xahlee.info/
*** https://www.gnu.org/software/emacs/manual/
*** https://zzamboni.org/
**** An awesome collection of Emacs config (includes Kaushal Modi)
***** https://github.com/caisah/emacs.dz
* Building your own, what I did:
** also tree-sitter before (compile) not package manager
** read ./configure --help
** Successfully compiled Emacs 29 in ~/my-emacs-29, the few installed stuff below
#+begin_quote

./configure --with-tree-sitter --with-json  --with-native-compilation=aot --with-mailutils --with-pop --prefix=/home/ardie/my-emacs-29
sudo apt install gcc-10
sudo apt install libgccjit0 libgccjit-10-dev
sudo apt-get install libjansson4 libjansson-dev

#+end_quote
* basic navigation, behaviours, buffers
** Navigation, behaviours
*** There are other tips on [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Visiting.html][basic visiting/opening file]], but most of these I myself dont even use 
*** vertical vs horizontal split of windows in Emacs
**** Context:
***** org-agenda, using a variable =====> (setq split-width-threshold 100) or any value
****** [[https://emacs.stackexchange.com/questions/2513/how-to-get-org-agenda-to-prefer-split-window-right][The variable split-width-threshold to control vertical or horizontal split]]
**** No context:
***** C-x 3
****** https://stackoverflow.com/questions/20167246/emacs-open-buffer-in-vertical-split-by-default
*** *disabled* Quickly open a buffer of the same file, to narrow (narrow using C-x n n widen using C-x n w), while not affecting original window 
*** https://stackoverflow.com/questions/9709121/is-there-a-way-to-narrow-to-region-in-one-window-while-not-narrowing-in-another
*** C-x 4 c to open temporarily a buffer, maybe to indent or something
*** this behaviour probably not encouraged, probably becoz there are other better alternatives, and confusing for beginners
* Inits
** The following are taken from this link: [[https://www.sandeepnambiar.com/my-minimal-emacs-setup/][Sandeep minimal defaults]]
#+begin_src lisp


  ;; cut short, becoz I dont use use-package, coz I dont understand use-package, hahaha, thats all
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
  (package-initialize)

#+end_src

#+begin_src lisp

  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  (tool-bar-mode -1)
  (blink-cursor-mode -1)

#+end_src

#+begin_src lisp

  ;; this is one is a MUST, coz I cant see my cursor with Emacs vanilla
  (global-hl-line-mode +1)

#+end_src

#+begin_src lisp

  ;; ========== so, you only see scratch at startup
  (setq inhibit-startup-screen t)

#+end_src

#+begin_src lisp

  ; ; ========== make scrolling a bit more consistent
  (setq scroll-margin 0
	scroll-conservatively 100000
	scroll-preserve-screen-position 1)

#+end_src

** saving sessions between Emacs restart
*** [[https://superuser.com/questions/650588/how-do-i-save-and-reload-a-session-in-emacs][saving session]]

#+begin_src lisp

  ;; ========== on some platform, it asks for the location you want for the "desktop file"
  ;; ========== you can just set it to ~/ (home)
  ; ; ========== 
  (desktop-save-mode 1)
  
#+end_src
** Instead of relying on init.el  branching, if using SmallWorld as the pivot, we can just load Emacs through the shortcut (or batch file like our Git Demo). But by copying the shortcut, and pointing to a our own gis_aliases in own folders.  And the gis_aliases will have
#+begin_quote

ARGS = -q --load C:\path\to\our_custom_init.el

#+end_quote
** [[https://www.youtube.com/watch?v=XZjyJG-sFZI][Teach your Emacs to keep folders clean]]
*** Already used variables --> user-emacs-directory, package-user-dir, default-directory
* Loading subtlety, hooks, eval, yadayada
** Auto-save when out-of-focus, a better alternative to "saving every minute" that most IDE's use
*** https://www.emacswiki.org/emacs/AutoSave
#+begin_src lisp

  (defun my-save-all ()
    (interactive)
    (save-some-buffers t))

  (add-hook 'focus-out-hook 'my-save-all)

#+end_src
** [[https://emacs.stackexchange.com/questions/14438/remove-hooks-for-specific-modes][how to remove hook for a mode]]
** In the long term, once we understand, we should avoid -eval- & hooks (??)
*** https://www.wisdomandwonder.com/emacs/12783/are-load-hooks-always-a-bad-idea
** How to "hook" a minor mode to a major mode. The # (hash) is NOT necessary
*** (add-hook 'sh-mode-hook 'electric-pair-local-mode)
**** https://stackoverflow.com/questions/12763566/how-to-permanently-enable-the-hs-minor-mode-in-emacs
** Alternative, using lambda, nothing special
*** https://stackoverflow.com/questions/8892813/emacs-shell-script-mode-hook
** https://stackoverflow.com/questions/2736087/eval-after-load-vs-mode-hook
*** eval-after-load is NOT buffer-aware, runs only once.
*** mode-hook is buffer-aware, runs for every buffer
*** mode--hook run after eval-after-load
** require, autoload, and all sorts of stuff
*** Code practice: autoload
#+begin_src emacs-lisp
  ;; Where  second.el has the function say-hello
  ;; and file will only be loaded when function is called
  ;; this makes things faster, must learn more about this
  (autoload 'say-hello "~/my-trash/elispPractice_autoload/second.el")


  (say-hello 6)
#+end_src

** https://www.reddit.com/r/emacs/comments/643dkt/use_package_vs_require_and_maybe_some_sorrowful/
*** Lots of useful comments on use-package vs require. Most importantly, you learn that require is standard GNU Emacs since 1985. WOW! Library authors dont assume everyone has use-package, hence, many dont include it in installation instructions
* Emacs Daemon. No success for when under Windows
** https://stuff-things.net/2014/12/16/working-with-emacsclient/
** https://wikemacs.org/wiki/Emacs_server
* Navigation improved
** [[https://stackoverflow.com/questions/2423834/move-line-region-up-and-down-in-emacs][move region/line up/down]]
*** Can try drag-stuff  coz its super cool but should start with Ji Han examples, coz its super simple
* Keybinding
** Lots of information
*** https://www.masteringemacs.org/article/mastering-key-bindings-emacs
**** Interestingly, C-c ? (where ? is any single character), is reserved for user & USERS alone. But most 3rd packages dont give a shit
***** I actually personally use C-S-c coz I learnt my Emacs by deep diving dangerously, by blindly copying a config from some Indian Emacs developer named Kaushal Modi. Theres a Github link of the most famous configs collected under one repo. [[https://github.com/caisah/emacs.dz][right here]]
**** Also, 2 keys that are reserved (remnants from ancient 80's keys), are Hyper & Super. Today, Super is "Windows key" & Hyper is "Application-Context"
***** These keys are also reserved, might be very useful
**** Also, in "key lookup order", confusingly, Minor Mode comes before Local which also comes befor Global. (I tot Local overrides Global?)
* dired file manager
** https://www.youtube.com/watch?v=PMWwM8QJAtU
*** System crafters
*** shortcuts
**** j - goto file
**** k - kill marked files, NOT real deletion, only the listing
**** g - revert buffer, aka refresh
**** v - dired-view-file, allows view without opening the file, quick q exits to previous dired buffer
**** C-M-o - dired-display-file
** https://lucidmanager.org/productivity/using-emacs-image-dired/
*** TODO!!!!!
*** Very cool, imagine opening GIMP automaticallly from inside Emacs
* Looks, looks, looks:
** If you want some really great looking suggestion on fonts, from usable examples. Look at this
*** https://www.reddit.com/r/emacs/comments/14q399t/hi_out_of_curiosity_what_are_your_favourite_fonts/
*** Especially the code snippet below

(dolist (buffer (list " *Minibuf-0*" " *Echo Area 0*"
                        " *Minibuf-1*" " *Echo Area 1*"))
    (when (get-buffer buffer)
      (with-current-buffer buffer
        (face-remap-add-relative 'bold :weight 'normal)
        (face-remap-add-relative 'default :weight 'light))))

(add-hook 'minibuffer-setup-hook
          '(lambda()
             (face-remap-add-relative 'bold :weight 'normal)
             (face-remap-add-relative 'default :weight 'light)))
** System Crafters has a very cool Lisp code using the macro/function (?) called dolist
*** https://systemcrafters.net/emacs-tips/presentations-with-org-present/
** How do you find out font (what Emacs calls faces) information?
*** https://www.emacswiki.org/emacs/FaceList
**** by M-x list-faces-display
*** https://www.emacswiki.org/emacs/Face
**** You can use  C-u C-x =  to find out which faces are applied to the text at point (under the cursor).
** You might have to read this one day
*** https://zzamboni.org/post/beautifying-org-mode-in-emacs/
*** https://www.gnu.org/software/emacs/manual/html_node/emacs/Face-Customization.html
*** https://www.gnu.org/software/emacs/manual/html_node/emacs/Faces.html
*** https://github.com/abo-abo/swiper/issues/568
* YASsnippets:
** Great beginner example, Im finally learning from this example:
*** https://joaotavora.github.io/yasnippet/snippet-development.html
** Great example too:
*** https://joaotavora.github.io/yasnippet/snippet-reference.html
** I finally know how setup config (dirs etc) properly
*** https://joaotavora.github.io/yasnippet/snippet-organization.html
* Org Mode
** org templates:
*** Finally once you start inserting your first code block (template, whatever). We can read this
**** https://www.nicholasvanhorn.com/posts/org-structure-completion.html
** We did this to untabify for org publishing of our Obsidian notes
#+begin_src lisp

  (progn
  (let ((org-export-with-special-strings nil)
        (org-export-with-sub-superscripts nil)
        )
    (untabify (point-min)
              (point-max))
    (org-md-export-to-markdown)))

#+end_src
** We finally came up with this, we solved all the issues, by deleting everything beforehand, everytime we update our Obsidian. Overkill, but its fine, since this is a personal project, and unlikely it will ever read 100 MB or more
#+begin_src lisp

  (setq org-publish-project-alist
	'(("my-org"
	   :base-directory "C:/Users/ahmadardie.r/Documents/my-trash/_delete_/2021"
	   :recursive t
	   :exclude ".*obsidian"
	   :publishing-function org-md-publish-to-md
	   :publishing-directory "C:/Users/ahmadardie.r/Documents/my-trash/_delete_/2021_md"
	   :base_extension "org"
	   :with-sub-superscript nil
	   :section-numbers nil
	   :base-extension "org"
	   :with-toc nil)))

  (setq rd-a-project (assoc "my-org" org-publish-project-alist))
  (setq ardie/list-of-post-publish 'nil)
  (setq ardie/list-of-previous-publish 'nil)

  ;; initilialize first, otherwise, org-publish-cache produces error
  (org-publish-initialize-cache "my-org")

  (dolist (rd-long-filename (directory-files-recursively "C:/Users/ahmadardie.r/Documents/my-trash/_delete_/2021_md" "\\.md$"))
    (delete-file rd-long-filename))

  (org-publish-project "my-org" t)

#+end_src
** Presentations in org mode
*** https://github.com/yjwen/Org-Reveal
* Only applicable to my old Kaushal Modi copy (cut loading short):
** https://github.com/jwiegley/use-package/issues/494
*** Personally, I just removed "package-refresh-contents" from setup-packages.el
** Additional read too
*** https://ianyepan.github.io/posts/setting-up-use-package/
* An apparently, very cool init.el, according to one good emacs user. Must read it 1 day
** https://github.com/eastwood/config/blob/master/emacs.d/init.el
* Cool for development, you might want to include this in an init file. Maybe as a separate development-init.el
** https://emacs.stackexchange.com/questions/169/how-do-i-reload-a-file-in-a-buffer/171#171
* [[https://guix.gnu.org/manual/en/html_node/Application-Setup.html][GUIX magically works along with my spacemacs, how?]]
** Something about locales GUIX_LOCPATH, will never allow foreign-distro programs to load GUIX stuff,
*** -> while ensuring GUIX only loads everything foreign  and local.
*** this "foreign-distro" programs cant see GUIX_LOCPATH
** If thats the case, we can install Tramp by:
*** unset the GUIX_LOCPATH variable
*** reload original spacemacs safely
*** and try to install Tramp and load Google drive from there
** If that doesnt work then, its safe to
*** reset everything back to GUIX spacemacs, and
*** install TRAMP from there
* Basics, education:
** Lisp
*** One of the best basic intro into eLisp:
**** https://cs.gmu.edu/~sean/lisp/LispTutorial.html
** elisp - my enlightenment
*** https://emacs.stackexchange.com/questions/80/how-can-i-quickly-toggle-between-a-file-and-a-scratch-buffer-having-the-same-m
** Might be useful to familiarize with these functions, has lots of em, and very simple explanation
*** http://xahlee.info/emacs/emacs/elisp_buffer_file_functions.html
** Errors:
*** https://discourse.doomemacs.org/t/common-errors-how-to-deal-with-them/58
**** A bit useful, should read one day.
** car? cdr? Yes it is confusing
*** https://www.math.utah.edu/docs/info/emacs-lisp-intro_8.html#SEC92
*** So many cool things to try, like nyanmode, cute cat that browses with you.
**** https://www.emacswiki.org/emacs/ModeLineConfiguration
** [[https://www.math.utah.edu/docs/info/elisp_2.html][UTAH Emacs Lisp Intro]]
** File to buffer:
*** Learning common lisp and eLisp, eLisp doesnt have the stream function, they have insert-file-contents

#+begin_src emacs-lisp

(defun ardie-temp ()
  (interactive)
  (insert-file-contents "~/my-trash/delete/input.txt" "what")
  )

(global-set-key (kbd "C-S-z") 'ardie-temp)

#+end_src
** Weird ones:
*** https://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html
**** advising Lisp functions
***** advice-add , advice-remove , but no defadvice , like we saw from another Tut
**** PRACTICE: using filter-return
#+begin_src lisp
;; cool discovery, a way to hide non-used argument, now we pass willy-nilly
(defun x-double (x &rest _what)
  (print
   (* x 2))
  (print _what)
  )

(defun say-hello (x)
  ;; (print x)
  (message "hello there")
  (+ x 1)
  ;;
  )

(advice-add 'say-hello :filter-return #'x-double)

(x-double 5)
(say-hello 5)
#+end_src
**** PRACTICE: using filter-args
#+begin_src emacs-lisp
;; for some odd reason, adding more>1 argument produces errors, becoz filter-args focuses on arguments between A & B, we should forget what we feed to B (B is called first)

(defun x-list (first)
  (mapcar '1+ '(2 4 6))
  )

(defun say-hello (first second third)
  (print first)
  )

(advice-add  'say-hello :filter-args #'x-list)

;; Also, dont understand exactly. Why does the number of arguments have no effect here?
(say-hello 5 6 7)
#+end_src
**** Dont forget to unset between practices to remove pairings function.
#+begin_src lisp
(advice-remove 'say-hello  'x-list)
#+end_src
** official eLisp reference index
** We should really leaarn setq-local. Here is an example. And since we learnt cape-capf we should rey this sometime
*** https://emacs.stackexchange.com/questions/81232/can-cape-be-disabled-on-a-mode-basis
** alist is very important 
*** assoc
* Macro, Function, Lambda, Mapcar, Error-handling, etc:
** Macro
*** Our first example: (NOTE: defmacro tries to be smart, (list) normally passes unaffected, but it expands anyway)
*** (NOTE: difficult for us, without list, all kinds of errors. (list) is necessary here for us to see difference)
#+begin_src lisp

(defun mine (var1)
  (list '1+ var1))

(mine 2)



(defmacro mine-2 (var1)
  (list '1+ var1))

(mine-2 2)

#+end_src
*** The human mind can only learn 2/3 things at once. If we want to be more complex, a-list-inside-a-list is good enough:
#+begin_src lisp

  (defun inc (var)
    (list 'setq var (list '1+ var)))

  (defmacro inc (var)
    (list 'setq var (list '1+ var)))

#+end_src
** Arrange, cool code, I could lambda on instinct, and I have evolved
*** simple example of mapcar, and it works: (NOTE: the effect is that lambda behaves, or is treated like a loop type)
#+begin_src lisp

  (mapcar (lambda (item) (replace-string "as" "asd")) '("asd" "asd" "asd"))

#+end_src
** [[https://curiousprogrammer.wordpress.com/2009/06/08/error-handling-in-emacs-lisp/][Error handling]] in Emacs, we now can handle a lack of Iosevka font (set-face-attribute)
*** Typical of functional eLisp, ('error) forces functional behaviour, we expect only changes of state  from (message), and some side effects. The side effects here are the correct (set-face-attribute). So, we put any  normal function inside 'error
#+begin_src lisp

  (condition-case xe
      (set-face-attribute 'default nil :font "Iosevkaasd" :weight 'regular)
    ('error (progn (set-face-attribute 'default nil :font "Georgia" :weight 'regular)  "Iosevka failed, loading Georgia")))
#+end_src
* string, regexp, patterns, and others related
** We made our own select-whole-defun-ish using our code and magik-regexp (also save-excursion)
#+begin_src lisp
  (let (p1 p2)
    (save-excursion
      (re-search-backward (cdr (assoc "method" magik-regexp)))
      (setq p1 (point))
      (re-search-forward (cdr (assoc "endmethod" magik-regexp)))
      (setq p2 (point))
      (print (kill-new  (buffer-substring-no-properties p1 p2)))))
#+end_src
** The only way we found, replacing a substring with another string. Like most Emacs string-based functions, positions in buffer is needed (string-match)
#+begin_src lisp

  (concat 
   (substring "python.org" 0 (string-match ".org" "python.org"))
   ".md")
  
#+end_src
** String comparisons
*** https://www.gnu.org/software/emacs/manual/html_node/elisp/String-Conversion.html
*** https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Comparison.html
** Never tried, Ive used terminal for such operations. But this is dired-based
*** https://stackoverflow.com/questions/270930/using-emacs-to-recursively-find-and-replace-in-text-files-not-already-open
**** Need as input: --> filename pattern & regex text
* grep, find-file, and others like it
** My new grep now has highlight!!
#+begin_src lisp

  (defun mmy-grep-collective ()
   "this function took forever to solve, wow, a source of personal pride"
   (interactive)
   (let (
	 (pattern (read-from-minibuffer "enter the pattern, no regexp, simple"))
	 (fileExtension (read-from-minibuffer "enter file extension, no * or ."))
	 )
     (compilation-start  (concat  "findstr /C:\"" pattern "\" *"  fileExtension ) 'grep-mode)))

  ;; ====================

  (defun my-add-nonascii-highlighting ()
  (font-lock-add-keywords nil
			  '(("^import.*" (0 'diff-added)))))


  (add-hook 'java-mode-hook #'my-add-nonascii-highlighting)

#+end_src
* Wishlist
** https://github.com/oantolin/embark
*** Embark makes it easy to run commands depending on where your point (cursor?) is
*** Embark is like a keyboard based version of right-click contextual menu (pop-up)
*** Examples:
**** For files you can delete, copy, rename
**** For buffers, you can kill or switch
* Taxy:
** alphpapa himself created this [[https://github.com/alphapapa/taxy.el][taxy]]. Great for organizing values/objects/stuffs
#+begin_src lisp


  ;; things ive tried so far

  (require 'taxy)



  (defvar numbery
    (make-taxy
     :name "Numbery"
     :description "A silly taxonomy of numbers."
     :taxys (list (make-taxy
                   :name "< 10"
                   :description "Numbers below 10 (consuming)"
                   :predicate (lambda (n) (< n 10)))
                  (make-taxy
                   :name "the others"
                   :description "remainder (non-consuming)"
                   :predicate (lambda (n) t)
                   :then #'identity)
                  )))


  (setq my-numbers (cl-loop for i from 5 to 15 collect i))


  (setq a-numbery (taxy-emptied numbery))



  (taxy-fill '(23 1 4 1 5 9829) a-numbery)
  (taxy-fill '(10000 9000 5432) a-numbery)



  (setq important (nth 3 (taxy-plain a-numbery)))
  (defun print-elements-of-list (list)
    "Print each element of LIST on a line of its own."
    (while list
      (print (car list))
      (setq list (cdr list))))

  (print-elements-of-list important)
  (nth 2 (car (cdr important
                   )))


  (taxy-items (car (taxy-taxys a-numbery)))




  (dolist (
           num
           (taxy-plain (car (taxy-taxys a-numbery)))
           )
    (print num) )


  (taxy-flatten a-numbery)




#+end_src
* Cool packages to try, or already tried:
** [[https://github.com/emacsorphanage/key-chord][Key Chords]] for Emacs allows simultaneous keys
*** Its a good idea to use rare [[https://www.johndcook.com/blog/2015/02/01/rare-bigrams/][bigrams]], which are rare key combinations for these settings
* How do we export to PDFs:
** This one MAGICALLY worked in our home Linux

#+begin_src shell

  sudo apt update
  sudo apt install texlive-latex-extra
  # ===== (all following errors indicated by the buffer *Org PDF Latex Output*)
  # ===== apparently org export uses xelatex, which is a replacement for pdflatex
  sudo apt install texlive-xetex
  # ===== another error, this minted needs to use python-pygments
  sudo apt install python-pygments

  # ==================== HOLY SHIT!! It works

#+end_src
** Some useful sensible defaults
#+begin_comment

#+title: The glories of Org
#+author: A. Org Writer
#+OPTIONS: num:0 H:0

#+end_comment
** Installation
*** Install MiKTiX on Windows 11
*** Exporting will still produce errors. So we need to install Perl (either Cygwin or MSYS, but always stick to one). And make sure that Path (variable) of Windows has the Cygwin binaries. 
*** It works! When we want to try a new header like #+LaTeX_HEADER: \usepackage{fancyhdr} , MiKTeX auto-installs for us
*** Useless, coz its mostly for preview:
**** https://cseweb.ucsd.edu/~s1pan/install_auctex.html
***** Installs MiKTeX, Ghostscript, GSView, and Auctex. But we only MikTeX turns out. Others are for previews
** Installation errors:
*** https://tex.stackexchange.com/questions/137428/tlmgr-cannot-setup-tlpdb
** Templates and options:
*** https://ivanhanigan.github.io/2013/11/a-sharp-looking-orgmode-latex-export-header/
**** No difference
*** https://www.linuxjournal.com/content/org-mode-latex-exporter-latex-non-texers
**** Better than the rest, but I have no idea whatd going on
** Extra template:
*** Arrange this somewhere else
#+begin_quote
=======
*** [[https://orgmode.org/manual/LaTeX-header-and-sectioning.html][latex header, latex class, and other options]]
*** [[https://www.linuxjournal.com/content/org-mode-latex-exporter-latex-non-texers][layman terms, but still lots of useless example]]
*** [[https://texdoc.org/serve/geometry.pdf/0][geometry package pdf, with links]] 
*** In order to add to the variable org-latex-classes, I also experimented with adding from org-format-latex-header variable
#+begin_src emacs-lisp

(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
	       '("stupid"
		 "\\documentclass[20pt]{article}
		 \\setlength{\\textwidth}{\\paperwidth}
                 \\setlength{\\topmargin}{1.5cm}
                 \\addtolength{\\textwidth}{-3cm}
                 \\setlength{\\oddsidemargin}{1.5cm}
                 \\addtolength{\\oddsidemargin}{-2.54cm}"

		 ("\\section{%s}" . "\\section*{%s}")
		 ("\\subsection{%s}" . "\\subsection*{%s}")
		 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		 ("\\paragraph{%s}" . "\\paragraph*{%s}")
		 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

#+end_src
*** And I put the previous code inside a :comments none block, which is a cooler way to block from exports, [[https://emacs.stackexchange.com/questions/17744/is-there-a-way-to-make-org-mode-ignore-src-blocks-when-exporting-to-html][here]]
*** [[https://emacs.stackexchange.com/questions/10549/org-mode-how-to-export-underscore-as-underscore-instead-of-highlight-in-html][escape some symbols in org mode export]]
#+begin_quote

#+OPTIONS: ^:nil

#+end_quote

*** Using the new geometry package, exporting will ignore the 2nd top margin setting, even though its different variable. Confusing for beginners, document typesetting/layering/whatever has its own logic
#+begin_quote
#+OPTIONS: toc:nil
#+OPTIONS: num:nil

#+LaTeX_HEADER: \usepackage[text={5in,5in},centering]{geometry}
#+LaTeX_HEADER: \usepackage[top=1in]{geometry}

#+end_quote
* From Redplanet (rearrange later):
** https://lists.gnu.org/archive/html/help-gnu-emacs/2003-04/msg00767.html
*** This code adds directories and its sub-directories to load-path. The reason why we dont do this is probably becoz load-path can get excessively long, and Emacs users might want to selectively disable some features.
#+begin_src lisp

  (let* ((dir (expand-file-name "~/emacs"))
	 (default-directory dir))
    (when (file-directory-p dir)
      (add-to-list 'load-path dir)
      (if (fboundp 'normal-top-level-add-subdirs-to-load-path)
	  (normal-top-level-add-subdirs-to-load-path))))
  
#+end_src

** The reason why Emacs uses an alist
*** https://emacs.stackexchange.com/questions/3397/how-to-replace-an-element-of-an-alist
** This one is DEFINITELY relevant to our GIS system
*** https://groups.io/g/sw-gis/topic/install_emacs_for_smallworld/75042662?p=
* Some  cool Emacs modifications for Windows (or issues):
** https://www.emacswiki.org/emacs/CategoryWThirtyTwo
*** Its got an R user Emacs too
*** Dired+ 
*** and many more
** There are many ports of GNU tools available
*** https://www.gnu.org/software/emacs/manual/html_node/efaq-w32/Other-useful-ports.html
** But we're interested only in one. Cygwin. Apparently, its also the most popular
* Extras!!
** https://masteringemacs.com/article/diacritics-in-emacs
** Email
*** https://shom.dev/posts/20220108_setting-up-protonmail-in-emacs/
**** Unlike systemcrafters (ubuntu I guess), guix version of mu includes mu4e
** Hydra, MUST read this and write properly later
*** https://elpa.gnu.org/packages/hydra.html
*** https://github.com/abo-abo/hydra
*** https://www.reddit.com/r/emacs/comments/8of6tx/tip_how_to_be_a_beast_with_hydra/
** http://xahlee.info/emacs/emacs/emacs_auto_save.html
*** an argument against making save an automatic feature. And an argument for saving whenever you switch out of Emacs (that is switching to other apps, like a browser, or switching workspace). Ive had this on, for a long time. But now reading argument for it, what a relief. For some time, I was thinking whether Emacs not having an auto-save every second (like other IDE's) a benefit or annoyance. Now I guess, my practice has always made sense (Besides, when we are developing/writing, we mostly need saving when we do something else, browswing a word/article, so attaching it to 'focus-out-hook makes complete sense)

* Hacks:
**  [[https://stackoverflow.com/questions/6238331/emacs-shell-scripts-how-to-put-initial-options-into-the-script][a bash script hack]]
* TODO Things to do:
** Modeline stuff
*** [[https://emacs.stackexchange.com/questions/35906/how-can-i-automatically-close-buffers-when-the-underlying-file-is-deleted][auto close buffer, when file is deleted]]
*** [[https://www.reddit.com/r/emacs/comments/rwok4s/how_to_change_the_color_of_modelinemodified/][add new face, custom mode-line-format variable, and use propertize]]
*** Actual working example!! We made it ourselves
#+begin_src lisp

  (force-mode-line-update)

  (setq mode-line-format
	'(
	  (:eval (propertize "%b " 'face 'shr-h1))
	  (:eval (propertize "%10b " 'face
		  (if (buffer-modified-p)
		      'org-mode-line-clock-overrun
		      'diff-refine-added)))))


#+end_src
*** [[https://www.masteringemacs.org/article/hiding-replacing-modeline-strings][super smooth and cool "feeding an alist into a function to safely modify existing modeline"]]
*** [[http://emacs-fu.blogspot.com/2011/08/customizing-mode-line.html][emacs-fu, great documentation]]
*** [[https://protesilaos.com/codelog/2023-07-29-emacs-custom-modeline-tutorial/][YouTuber Protesilaos has a blog!]]
*** [[https://www.reddit.com/r/emacs/comments/dfer00/how_to_set_different_modeline_elements_for/][Reddit what??]]
** Write this down somehow.
*** changing Emacs behaviour, doesnt have to be an all out ddisruptive process.
**** Eg: one thing we can do with mode-line, is to create a function that defines mode-line-format and (force-mode-line-update), binds that function to a mode-hook (magik-mode-hook)
** Some more cool navigation tricks:
*** [[https://superuser.com/questions/629090/emacs-displaying-list-of-subroutines-functions-classes-in-a-source-file][occur]]
* Common mistakes:
** try package:
*** when using try package, sometimes a common error is "elpa not found". Solution:
**** package-refresh-contents
** Debugging, mysterious errors?, try toggle-debug-on-error:
*** https://stackoverflow.com/questions/4180111/what-does-it-mean-when-emacs-tells-me-file-mode-specification-error
