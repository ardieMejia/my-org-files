* Emacs UI
** vertical vs horizontal split of windows in Emacs
*** Context:
**** org-agenda, using a variable =====> (setq split-width-threshold 100) or any value
***** [[https://emacs.stackexchange.com/questions/2513/how-to-get-org-agenda-to-prefer-split-window-right][The variable split-width-threshold to control vertical or horizontal split]]
*** No context:
**** C-x 3
***** https://stackoverflow.com/questions/20167246/emacs-open-buffer-in-vertical-split-by-default
** Configuring the modeline
*** Important variables, actually some are confusing. And it was easier for me to just edit Emacs modeline with simple functions, like combining (cond ..) & (major-mode)
**** https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode-Line-Variables.html
*** I used emojis from here
**** https://unicode.org/emoji/charts/full-emoji-list.html
*** I dont know what this is for
**** https://www.emacswiki.org/emacs/modeline-region.el
*** If you were testing modeline in a buffer, the command force-mode-line-update might be useful
**** https://www.reddit.com/r/emacs/comments/euox3d/is_there_a_way_to_refreshupdate_the_modeline/
*** Config examples:
**** https://github.com/rougier/emacs-octicons
**** https://www.gnu.org/software/emacs/manual/html_node/eintr/Mode-Line.html
***** I based my entire config on this one
*** https://emacsdocs.org/docs/elisp/Emulating-Mode-Line
**** Should probably check this site
* Buffers, windows, etc
** https://stackoverflow.com/questions/9709121/is-there-a-way-to-narrow-to-region-in-one-window-while-not-narrowing-in-another
*** C-x 4 c to open temporarily a buffer, maybe to indent or something
* Loading subtlety, hooks, eval, yadayada
** How to "hook" a minor mode to a major mode. The # (hash) is NOT necessary
*** (add-hook 'sh-mode-hook 'electric-pair-local-mode)
**** https://stackoverflow.com/questions/12763566/how-to-permanently-enable-the-hs-minor-mode-in-emacs
** Alternative, using lambda, nothing special
*** https://stackoverflow.com/questions/8892813/emacs-shell-script-mode-hook
** https://stackoverflow.com/questions/2736087/eval-after-load-vs-mode-hook
*** eval-after-load is NOT buffer-aware, runs only once.
*** mode-hook is buffer-aware, runs for every buffer
*** mode--hook run after eval-after-load
** require, autoload, and all sorts of stuff
*** Practicing autoload


;; Where  second.el has the function say-hello
;; and file will only be loaded when function is called
;; this makes things faster, must learn more about this
(autoload 'say-hello "~/my-trash/elispPractice_autoload/second.el")


(say-hello 6)


** https://www.reddit.com/r/emacs/comments/643dkt/use_package_vs_require_and_maybe_some_sorrowful/
*** Lots of useful comments on use-package vs require. Most importantly, you learn that require is standard GNU Emacs since 1985. WOW! Library authors dont assume everyone has use-package, hence, many dont include it in installation instructions


* Emacs Daemon
** https://stuff-things.net/2014/12/16/working-with-emacsclient/
** https://wikemacs.org/wiki/Emacs_server
** Might be useful within Ubuntu 18.04 experience
*** https://developer.gnome.org/documentation/tutorials/search-provider.html
** My "buffer by-the-side update to reflect changes, like pdf for example" project
*** http://xahlee.info/emacs/emacs/elisp_buffer_file_functions.html
**** Has lots of em, and very simple explanation
* Keybinding
** Our init.el org-mode-map seems best
*** with-eval-after-load & -mode-map
**** https://www.reddit.com/r/emacs/comments/6sgwfc/how_do_i_set_a_key_binding_only_for_a_particular/
(with-eval-after-load "org"
  (define-key org-mode-map (kbd "S-<left>") 'backward-char)
  (define-key org-mode-map (kbd "S-<right>") 'forward-char)
  (define-key org-mode-map (kbd "S-<up>") 'previous-line)
  (define-key org-mode-map (kbd "S-<down>") 'next-line)
  (define-key org-mode-map (kbd "C-S-c C-, o k") 'ardie-open-kodland)
*** with-eval-after-load & local-set-key
**** https://emacs.stackexchange.com/questions/12293/mode-hooks-and-eval-after-load
(add-hook 'org-mode-hook
          '(lambda ()
             (local-set-key (kbd "S-<left>") 'backward-char)
             (local-set-key (kbd "S-<right>") 'forward-char)
             (local-set-key (kbd "S-<up>") 'previous-line)
             (local-set-key (kbd "S-<down>") 'next-line)
             (local-set-key (kbd "C-S-c C-, o k") 'ardie-open-kodland)))
** In the long term, once we understand, we should avoid -eval- & hooks (??)
*** https://www.wisdomandwonder.com/emacs/12783/are-load-hooks-always-a-bad-idea
** Lots of information
*** https://www.masteringemacs.org/article/mastering-key-bindings-emacs
**** Interestingly, C-c ? (where ? is any single character), is reserved for user & USERS alone. But most 3rd packages dont give a shit
***** I actually personally use C-S-c coz Kaushal Modi is a weirdo. Nooo, just kidding, I sure hes an amazing person.
**** Also, 2 keys that are reserved (remnants from ancient 80's keys), are Hyper & Super. Today, Super is "Windows key" & Hyper is "Application-Context"
***** These keys are also reserved, might be very useful
**** Also, in "key lookup order", confusingly, Minor Mode comes before Local which also comes befor Global. (I tot Local overrides Global?)
* dired file manager
** https://www.youtube.com/watch?v=PMWwM8QJAtU
*** System crafters
*** shortcuts
**** j - goto file
**** k - kill marked files, NOT real deletion, only the listing
**** g - revert buffer, aka refresh
**** v - dired-view-file, allows view without opening the file, quick q exits to previous dired buffer
**** C-M-o - dired-display-file
** https://lucidmanager.org/productivity/using-emacs-image-dired/
*** TODO!!!!!
*** Very cool, imagine opening GIMP automaticallly from inside Emacs
* folding, hide & other cool tricks
** Should start collecting it here!!
* Looks, looks, looks:
** https://zzamboni.org/post/beautifying-org-mode-in-emacs/
** https://www.gnu.org/software/emacs/manual/html_node/emacs/Face-Customization.html
** https://www.gnu.org/software/emacs/manual/html_node/emacs/Faces.html
** https://github.com/abo-abo/swiper/issues/568
* YASsnippets:
** Great beginner example, Im finally learning from this example:
*** https://joaotavora.github.io/yasnippet/snippet-development.html
** Great example too:
*** https://joaotavora.github.io/yasnippet/snippet-reference.html
** I finally know how setup config (dirs etc) properly
*** https://joaotavora.github.io/yasnippet/snippet-organization.html
* Something I have never used in Emacs, but usually in terminal, replace text/patterns in multiple files:
** https://stackoverflow.com/questions/270930/using-emacs-to-recursively-find-and-replace-in-text-files-not-already-open
*** Need as input: --> filename pattern & regex text
* Very IMPORTANT, saved all my loading problems!!:
** https://github.com/jwiegley/use-package/issues/494
*** Personally, I just removed "package-refresh-contents" from setup-packages.el
** Additional read too
*** https://ianyepan.github.io/posts/setting-up-use-package/
* An apparently, very cool init.el, according to one good emacs user. Must read it 1 day
** https://github.com/eastwood/config/blob/master/emacs.d/init.el
* Very Cool. But important to not over-rely. Auto-saving for Emacs, by exploiting "out-of-focus"
** https://www.emacswiki.org/emacs/AutoSave
*** 'focus-out-hook'
* Cool for development, you might want to include this in an init file. Maybe as a separate development-init.el
** https://emacs.stackexchange.com/questions/169/how-do-i-reload-a-file-in-a-buffer/171#171
* [[https://guix.gnu.org/manual/en/html_node/Application-Setup.html][GUIX magically works along with my spacemacs, how?]]
** Something about locales GUIX_LOCPATH, will never allow foreign-distro programs to load GUIX stuff,
*** -> while ensuring GUIX only loads everything foreign  and local.
*** this "foreign-distro" programs cant see GUIX_LOCPATH
** If thats the case, we can install Tramp by:
*** unset the GUIX_LOCPATH variable
*** reload original spacemacs safely
*** and try to install Tramp and load Google drive from there
** If that doesnt work then, its safe to
*** reset everything back to GUIX spacemacs, and
*** install TRAMP from there
* Basics, education:
** Interesting, lead from other examples:
*** https://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html
**** advising Lisp functions
***** advice-add , advice-remove , but no defadvice , like we saw from another Tut
**** PRACTICE: using filter-return


#+begin_src lisp
;; cool discovery, a way to hide non-used argument, now we pass willy-nilly
(defun x-double (x &rest _what)
  (print
   (* x 2))
  (print _what)
  )

(defun say-hello (x)
  ;; (print x)
  (message "hello there")
  (+ x 1)
  ;;
  )

(advice-add 'say-hello :filter-return #'x-double)

(x-double 5)
(say-hello 5)
#+end_src



**** PRACTICE: using filter-args

#+begin_src emacs-lisp
;; for some odd reason, adding more>1 argument produces errors, becoz filter-args focuses on arguments between A & B, we should forget what we feed to B (B is called first)

(defun x-list (first)
  (mapcar '1+ '(2 4 6))
  )

(defun say-hello (first second third)
  (print first)
  )

(advice-add  'say-hello :filter-args #'x-list)

;; Also, dont understand exactly. Why does the number of arguments have no effect here?
(say-hello 5 6 7)
#+end_src









**** Dont forget to unset between practices to remove pairings function.


(advice-remove 'say-hello  'x-list)


** Lisp
*** One of the best basic intro into eLisp:
**** https://cs.gmu.edu/~sean/lisp/LispTutorial.html
** elisp - my enlightenment
*** https://emacs.stackexchange.com/questions/80/how-can-i-quickly-toggle-between-a-file-and-a-scratch-buffer-having-the-same-m
** Errors:
*** https://discourse.doomemacs.org/t/common-errors-how-to-deal-with-them/58
**** A bit useful, should read one day.
** Datatypes, converting strings, etc..
*** https://www.gnu.org/software/emacs/manual/html_node/elisp/String-Conversion.html
*** https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Comparison.html
*** maybe a good website
**** https://www.math.utah.edu/docs/info/emacs-lisp-intro_8.html#SEC92
*** So many cool things to try, like nyanmode, cute cat that browses with you.
**** https://www.emacswiki.org/emacs/ModeLineConfiguration
* Personal issues:
** Multi cursors trouble
*** Sometimes multiple-cursors dont work in certain modes. I switch to a different mode (Eg: Python) and it works
* More cool stuff to re-arrange!!
** https://masteringemacs.com/article/diacritics-in-emacs
** Email
*** https://shom.dev/posts/20220108_setting-up-protonmail-in-emacs/
**** Unlike systemcrafters (ubuntu I guess), guix version of mu includes mu4e
** Hydra, MUST read this and write properly later
*** https://elpa.gnu.org/packages/hydra.html
*** https://github.com/abo-abo/hydra
*** https://www.reddit.com/r/emacs/comments/8of6tx/tip_how_to_be_a_beast_with_hydra/
** http://xahlee.info/emacs/emacs/emacs_auto_save.html
*** an argument against making save an automatic feature. And an argument for saving whenever you switch out of Emacs (that is switching to other apps, like a browser, or switching workspace). Ive had this on, for a long time. But now reading argument for it, what a relief. For some time, I was thinking whether Emacs not having an auto-save every second (like other IDE's) a benefit or annoyance. Now I guess, my practice has always made sense (Besides, when we are developing/writing, we mostly need saving when we do something else, browswing a word/article, so attaching it to 'focus-out-hook makes complete sense)
* From Redplanet (rearrange later):
** https://lists.gnu.org/archive/html/help-gnu-emacs/2003-04/msg00767.html
*** This code adds directories and its sub-directories to load-path. The reason why we dont do this is probably becoz load-path can get excessively long, and Emacs users might want to selectively disable some features.

(let* ((dir (expand-file-name "~/emacs"))
       (default-directory dir))
  (when (file-directory-p dir)
    (add-to-list 'load-path dir)
    (if (fboundp 'normal-top-level-add-subdirs-to-load-path)
        (normal-top-level-add-subdirs-to-load-path))))



