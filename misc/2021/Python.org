* Syntax, variable basics, and using del :
** [[https://www.tutorialspoint.com/python/python_variable_types.htm][tutorialspoint]]
*** So its always a good idea to focus only on list, when learning Python
*** tuples are confusing, and not even useful in "advanced OOP" uses
** [[https://www.programiz.com/python-programming/dictionary][programmingiz]]
*** good basic source
*** Some dictionary methods
** [[https://docs.python.org/3/library/stdtypes.html][official]]
*** LOTS of examples, though have to try each and everyone
** [[https://www.analyticsvidhya.com/blog/2021/11/building-an-infinite-timer-using-python/][not sure if its cool]]
*** Also, mostly a library advert
** [[https://www.freecodecamp.org/news/python-string-methods-tutorial-how-to-use-find-and-replace-on-python-strings/][freecodecamp]]
*** freecodecamp -> a classic, but I never liked their "huge-ass font" & weird soydev presentation
* Pandas Dataframes, etc:
** [[https://docs.kanaries.net/topics/Pandas/dataframe-to-list][converting Pandas dataframe to list]]
#+begin_src python

  # NOTE: notice how a Pandas dataframe treats column names with respect
  df = pd.DataFrame({'numbers': [1, 2, 3], 'letters': ['a', 'b', 'c']})

  alist = df.values.tolist()

  # ===== alist
  [[1, 'a'], [2, 'b'], [3, 'c']]



  ac_list = df['numbers'].tolist()

  # ===== ac_list from column
  [1, 2, 3]

#+end_src
** [[https://stackoverflow.com/questions/29815129/pandas-dataframe-to-list-of-dictionaries][Pandas dataframe to list of dicts]]
#+begin_src python

  df.to_dict('records')

#+end_src
** [[https://devqa.io/converting-dataframe-list-dictionaries-python/][iterating over dataframe to create list-of-dict, to allow some reshaping/algo/manipulation]]
* Packages, virtual environment, frameworks, paths:
** Paths:
*** Your Python path is the list of directories on your system where Python looks when you use the Python import statement.
** Virtual environment:
*** links:
**** https://linuxize.com/post/how-to-install-pip-on-ubuntu-18.04/
**** https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/
**** https://uoa-eresearch.github.io/eresearch-cookbook/recipe/2014/11/26/python-virtual-env/
** [[https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/][Official python virtual environment management]]
*** Despite all the confusing commands, the only thing you have to understand is this
**** the only tool is required venv (or virtualenv in older Python)
**** pip is the Python installer, need some packages in "core" Python before all this magic can happen
*** How to tell if youre in a virtual environment (Eg: Emacs Elpy doesnt show the name of your virtualenv in the prompt/repl)
**** [[https://www.reddit.com/r/emacs/comments/flc7xq/elpy_virtual_environment_help/][check your sys.path variable]]
** GUI framework:
*** https://blog.resellerclub.com/the-6-best-python-gui-frameworks-for-developers/
** IMPORTANT: How to solve the opencv-python error of-- No module named 'skbuild'
*** https://bobbyhadz.com/blog/python-no-module-named-skbuild
* IDE, PyCharm (Python is okay, at least its not Java)
** [[https://www.jetbrains.com/pycharm/][I may have no choice but to install PyCharm, it probably works too well]]
*** Maybe #1 reason I hate Python
** [[https://confluence.jetbrains.com/pages/viewpage.action?pageId=51945983][Change look and feel of PyCharm]]
** disabling PyCharm auto-suggestion (great for those learning Python)
*** Settings -> Editor -> General -> Code Completion -> Tick -- Show suggestions as you type
* TODO 
** separate virtualenv in Emacs. so its easy to switch between Python project inside Emacs
** we need to try this setup from a Reddit [[https://www.reddit.com/r/emacs/comments/10nctt8/elpy_or_lsp_plus_x/][post]]. Its got eglot
#+begin_src lisp


  (use-package eglot
  :ensure t
  :bind (:map eglot-mode-map
              ("C-." . xref-find-references)))

(use-package python
  :defer t)

(use-package elpy
  :ensure t
  :defer t
  :init (advice-add 'python-mode :before 'elpy-enable))  

#+end_src
* Python writing to  file:
** Writing text to file, but also has a context manager example
*** https://stackoverflow.com/questions/5214578/print-string-to-text-file
* Life-easy Scripts
** [[https://github.com/dilshod/xlsx2csv][xlsx2csv]] helps with projects managing xlsx
** 
* OOP, PyGame:
** Avoiding circular imports:
*** import only when needed. Defer import until later. Cons: cant read package imports at the top.
#+begin_src python

  # module a.py
  def func():
    from package import b

  # module b.py
    def func():
      from package import a

#+end_src
*** central module. My favourite. Altough mine is simpler. Cons: names can get extra long.
#+begin_src python

  # __init__.py
  from . import a
  from . import b


  # a.py
  import package

  def func():
      package.b.some_object()


  # b.py
  import package

  def func():
      package.a.some_object()
#+end_src
*** Import the Whole Module. Similar to fully functional. Feels like a module inside a module inside a module.
#+begin_src python



  # module_a.py
  def function_a():
      return "This is function A in Module A"

  # module_b.py
  import module_a  # Import the whole module

  def function_b():
      return f"This is function B in Module B, calling: {module_a.function_a()}"

  # main.py
  from module_b import function_b

  print(function_b())
  
#+end_src
** [[https://stackoverflow.com/questions/59330578/how-to-avoid-using-global-variables][childish way to avoid Global keyword]]
*** Childish non-OOP way to avoid Global  keyword, sinnce its quite obviously bad and confusing
** [[https://www.geeksforgeeks.org/inheritance-and-composition-in-python/][finally understand composition thanks to my RPS company]]
*** used it in my PyGame
** [[https://stackoverflow.com/questions/9390126/pythonic-way-to-check-if-something-exists][Python, check if something exists]]
*** used it in my PyGame project for the main (and only) Sprite. Will not work in Sprite Group. My Alien doesnt need an extra, after all,   so its fine
** [[https://stackoverflow.com/questions/3078927/python-how-to-access-variable-declared-in-parent-module][Cool way to import globa variables, has also potetial to reduce importing your my_globals, my_aliens, my_bullets into one line]]
** [[https://stackoverflow.com/questions/2349991/how-do-i-import-other-python-files][other interesting alt  to  importing a file]]
** [[https://stackoverflow.com/questions/43474849/pygame-sprite-collision-with-sprite-group][collision basic]]
** [[https://stackoverflow.com/questions/21973044/how-to-blit-sprites-to-screen-on-timed-increments-in-pygame][Sprite Group basics]]
** [[https://stackoverflow.com/questions/37800894/what-is-the-surface-blit-function-in-pygame-what-does-it-do-how-does-it-work][surface blit basics]]
* Better file handling, text file handing, path handling!! using pathlib, great for Fiverr clients:
** https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f
* Kinda important:
** Installing Pillow module, the "usual pip way" will produce lots of errors. Instead use this link:
*** https://pillow.readthedocs.io/en/latest/installation.html
* SELF (make sure to write about this IMPORTANT topic later)
** https://www.knowledgehut.com/blog/programming/self-variabe-python-examples
** https://www.edureka.co/blog/self-in-python/amp/ (THIS IS A BAD EXPLANATION, dont delete, just point its bad-ness)
** https://medium.com/quick-code/understanding-self-in-python-a3704319e5f0
* Vector (PyGame related)
** zip() function which returns a list of tuples, where the 1st items of the list is paired/grouped together, the 2nd items of the list grouped, etc
* Python Decorators from the l([[https://realpython.com/primer-on-python-decorators/][Primer]]):
** Decorators are basically a bit like advice functions in Emacs (or they called macros?). At least in terms of practice, that is, "redefining" an existing function so that its behaviour changes.
** Like Lisp, function are kinda first-class citizens, or at least Python tries to, and the primary purpose is to change the "state" with minimal side effects (such as printing to console). Of course, side effects are unavoidable, but thinking "functionally" helps understand decorators. That is, having an input and output.
** Passing function name as arguments.
#+begin_src python

  def say_hello(name):
      return f"Hello {name}"
  
  def be_awesome(name):
      return f"Yo {name}, together we're the awesomest!"

  def greet_bob(greeter_func):
      return greeter_func("Bob")

  # ==========

  greet_bob(say_hello)
  # 'Hello Bob'

  greet_bob(be_awesome)
  # 'Yo Bob, together we're the awesomest!'

#+end_src
*** Reminds one of "deferring evaluation" in eLisp, but in Python, passing func name without () refers to the function definition
** Locally scoped:
#+begin_src python

  def parent():
    print("Printing from parent()")

    def first_child():
      print("Printing from first_child()")

    def second_child():
      print("Printing from second_child()")

    second_child()
    first_child()

#+end_src
*** rather than "defer eval", the "definition" itself deferred
** Returning the function 
#+begin_src python

  def parent(num):
    def first_child():
      return "Hi, I'm Elias"

    def second_child():
      return "Call me Ester"

    if num == 1:
      return first_child
    else:
      return second_child


  # ==================== >>>
  first = parent(1)
  second = parent(2)


  first
  # <function parent.<locals>.first_child at 0x7f599f1e2e18>

#+end_src
*** Note the function object itself is returned.
*** Function definition changes, depending on the arguments (1 or 2)
** Same trick â†‘ to redefine the function (keeping the name):
#+begin_src python

  def decorator(func):
    def wrapper():
        print("Something is happening before the function is called.")
        func()
        print("Something is happening after the function is called.")
    return wrapper

def say_whee():
    print("Whee!")

say_whee = decorator(say_whee)


#+end_src
** Same as â†‘, but:
#+begin_src python

  # using this:
  @decorator
  def say_whee():
      print("Whee!")


  # instead of:
  say_whee = decorator(say_whee)


#+end_src
** example that repeats a function twice
#+begin_src python

  def do_twice(func):
    def wrapper_do_twice():
      func()
      func()
    return wrapper_do_twice


  # now we can do:
  @do_twice
  def say_whee():
    print("Whee!")


#+end_src
** The wrapper needs to be a bit "unaware of number of arguments", otherwise passing arguments will produce an error, and setting fixed arguments will make it inflexible
#+begin_src python

  def do_twice(func):
    def wrapper_do_twice(*args, **kwargs):
        func(*args, **kwargs)
        func(*args, **kwargs)
    return wrapper_do_twice


#+end_src
*** Now any function with any no. of args can be used
** 
* Performance tricks:
** [[https://aashishkumar12376.medium.com/10-python-performance-tips-i-wish-i-knew-years-ago-7869b19585d1][This link]] includes list comprehension
* Event handling
** I finally made this code sample work. Detailed below are the mistake I made, which should  be a common mistake
#+begin_quote

class EventWrapper (object):
    def __init__(self):
        self.eventwraps = []
    def __iadd__(self, an_event):
        self.eventwraps.append(an_event)
        return self
    # lets try without the __call__ first
    def __call__(self, *a, **b):
        for an_eventhandler in self.eventwraps:
            an_eventhandler(*a, **b)


class MessageToDisplay(object):
    def __init__(self):
        self.name = "whateever"
    def PrintMe(self):
        print("this is an event from inside PrintMe <-- MessageToDisplay")

class a_user(object):
    def __init__(self):
        self.name = "a user"
        self.on_event_1 = EventWrapper()

    def the_main_event(self):
        self.on_event_1()

    def add_an_event(self, an_event):
        print("adding")
        self.on_event_1 += an_event # this is from iadd

def Start():
    sample_user = a_user()
    a_printer = MessageToDisplay()
    sample_user.add_an_event(a_printer.PrintMe)
    # sample_user.add_an_event(a_printer.PrintMe())
    # -----  The 2nd is previous line, which produces the error : -----
    #  ----- TypeError: 'NoneType' object is not callable -----
    # ----- Notice the extra bracket which means we redefining the function, turning it null
    sample_user.on_event_1()

if __name__ == "__main__":
    Start()


#+end_quote
** [[https://pypi.org/project/Events/][This]] uses C# style events. But Im guessing its a very common Python  pip download.
#+begin_quote


from events import Events

def something_changed(reason):
    print("soemthing changed because %s" % reason)

events = Events()

events.on_change += something_changed # remember this is kinda cool, becoz event can be ANY function, no need for class

events.on_change("i have diarrhea")

#+end_quote
* IMPORTANT add later:
** [[https://codingnomads.com/python-flask-wtf-forms][python flask wtf!!]]
** [[https://stackoverflow.com/questions/32550487/how-to-print-from-flask-app-route-to-python-console][debugging aka print in Flask, not default]]
* Educational/Business:
** [[https://www.cosmicpython.com/book/introduction.html][Architecture Patterns with Python]]
** [[https://www.naukri.com/code360][CodingNinjas exercises are more fun than GeeksforGeeks]]
