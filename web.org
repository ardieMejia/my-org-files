* Just childish ideas:
** https://dev.to/pixeline/the-easy-way-to-turn-a-website-into-a-progressive-web-app-77g
*** PWAs only work behind https
* Interesting websites (or preferably blogs) on the conceptual & tutorial stuff
** https://linuxhostsupport.com/blog/
** https://developers.google.com/
** 
* REDO the whole section
** [[https://starkie.dev/blog/how-a-browser-renders-a-web-page][starkie.dev: how a website renders page, very informative]]
* Html, CSS, Javascript (I guess) main/cool websites/blog
** https://www.tutorialrepublic.com
** https://www.htmldog.com
** More thorough [[https://imagekit.io/blog/how-to-upload-files-in-html/][upload file input]]
* CSS
** Tailwind:
*** For aligning: items-<> (items-start) goes with flex, content-<> (content-start) goes with grid
** Great practices:
*** https://elementor.com/blog/css-buttons/
** HTML [[https://www.w3schools.com/css/css_display_visibility.asp][display property]] commonly used in CSS
** What is [[https://medium.com/@MakeComputerScienceGreatAgain/understanding-flexbox-a-comprehensive-guide-992bcd5f04de][FLEXBOX]]
** [[https://pieces.app/blog/top-5-best-css-frameworks-for-responsive-web-design-in-2024][CSS for LLM driven apps]]
** 
* jQuery, basic JS:
** Learning everything about an object:
#+begin_src js

  console.log($(this))

#+end_src
** Easy to forget, disabling a button (we can put this in <a></a>)
#+begin_export html

onclick="return false;"

#+end_export
** Use classlist instead of classname then .split() [[https://stackoverflow.com/questions/1227286/get-class-list-for-element-with-jquery][here]].
** [[https://www.zipy.ai/blog/jquery-errors][common jquery mistakes]]
** onload vs ready
*** [[https://www.geeksforgeeks.org/difference-between-body-onload-and-document-ready-function/][onload only once, document.ready can have several]]
*** document.ready is once DOM is loaded, onload is once all resources are loaded (+images,etc)
*** [[https://stackoverflow.com/questions/3698200/window-onload-vs-document-ready][stackoverflows definition]]
*** onload is DOM standard, document.ready is jQuery-specific
*** 
** [[https://api.jquery.com/data/][The data-* attribute is a Global Attribute, and can be used on any HTML element]]
** We did this for our confirm dialog, we learnt it from this link [[https://stackoverflow.com/questions/56130393/jquery-custom-confirm-dialog][link]] as well. The native browser confirm dialog has no equivalent, anything you can write in the GUI. So you need a custom one
#+begin_src js

  $('#eventDeleteButton').click(function(e){
      e.preventDefault();
      function getClause(){
          // ajax request to get data, only 2 keys, url: and data:
      }
      function handleClause(data){
          if (data == null || data === ""){
              // unbind 'click' event and trigger click() for main delete button
          }else{
              // fill confirm dialog with data, and unhide dialog
              my_confirm(function(continueClick) {
                  if (continueClick){
                      // unbind 'click' event and trigger click() for main delete button
                  }else{			
                  }
              });		
          }
      }
      getClause().done(handleClause) // this is just to organize code better		
  });



  function my_confirm(confirmCallback, cancelCallback) {
      $(document).on( 'click', '#<some-confirm-button-ID>', function() {
          $('#confirmWithdrawal').hide();
          confirmCallback(true);
      });
      $(document).on( 'click', '#<some-cancel-button-ID>', function() {
          $('#confirmWithdrawal').hide();
          confirmCallback(false);
      });
  }


  
#+end_src
** Instead of of setTimeout(), a better example to learn JS callback is actually implementing a custom confirm dialog (replacing browser built-in confirm dialog)
** This [[https://stackoverflow.com/questions/3458553/javascript-passing-parameters-to-a-callback-function][link]] shows a better example with 2 or more parameters for a callback function

* React terminologies:
** Transpiling: converting ES6 or later to ES5, becoz not all browsers supported it
** Babel transpiler:
#+begin_export html

<script
src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.js">
</script>
<!-- ===== any script that includes text/babel this will automatically transpile ===== -->
<script src="script.js" type="text/babel">
</script>

#+end_export
* Resources:
** Useful SVG repos for downloads ([[https://www.svgrepo.com/vectors/please-check-your-input-invalid-input/][svgrepo]])
** [[https://adrianroselli.com/2019/06/target-size-and-2-5-5.html][Button science]]
