* https://www.educative.io/edpresso/what-is-database-sharding?https://www.educative.io/courses/grokking-the-object-oriented-design-interview?aid=5082902844932096&utm_source=google&utm_medium=cpc&utm_campaign=blog-dynamic&gclid=EAIaIQobChMI7qajmIX-5QIVVw4rCh3yWAQwEAAYASAAEgKSLPD_BwE
** Vertical sharding and horizontal sharding according this site is this. Horizontal sharding is like naturally splitting a database in half. Vertical sharding is like changing the structure (non-natural) as in across the fields. This means vertical sharding requires a key (sometimes like your average index key). Also called a sharding key.
** Sharding improves query performance, as your app can search through less data (This implies that database is always 'scanning' in nature)
* https://www.digitalocean.com/community/tutorials/understanding-database-sharding
** The reason why we choose a database, is because its difficult to predict the future of an app: its popularity, and lasting power
** So far similar in how the previous site describes sharding (horizontal and vertical)
** Sharding: breaks up data into logical shards, then distributed across physical shards (each shard can hold multiple). Regardless, all the shards represent the entire logical dataset
** Database shards have a shared-nothing architecture (autonomous, dont share data or computing resources). However! it may be useful to replicate certain tables, such a conversion rate table (for an application that uses a fixed conversion rate across all the app)
** Quite commonly (interesting...) sharding is done at application level (this means the programmer deals with it!!), so there is a code that chooses which shard to transmit read/write. However, a DBMS may have sharding capability, so that is implemented at the database level
** Do not confused previous notions with this: horizontal scaling and vertical scaling:
*** Horizontal scaling (scaling out): Adding more machines to existing stack to spread the load, allow more traffic, and faster processing
*** Vertical scaling (scaling up): Upgrading hardware of existing server
** Now ugrading the hardware is easy. But ultimately a distributed database is far more flexible (horizontal scaling). This is the advantage of sharding
** Also a power/hardware outage means only portions of the app fail
** Now for disadvantages of sharding:
*** Complexity: can lead to lost data and corrupted tables. Developer mantainence: multiple shard locations rather than a single entry point
*** 'database hotspot': shard can become unbalanced. An example if a users table is sharded across names of A-M & N-Z. And as the data increases, more G users apply, it will bcome slow for a large portion of users and eventually cancel out the benefits of sharding. This requires re-sharding to even the data distribution
*** Returning back to unsharded architecture is difficult. Backups of DB before shard wont include data after sharding. And rebuilding would require merging the old unsharded and the new sharded one
*** It is not natively supported by every database engine. Examples that dont support it: PostgreSQL doesnt support it by default (although possible).
** Different sharding archtectures:
*** 
