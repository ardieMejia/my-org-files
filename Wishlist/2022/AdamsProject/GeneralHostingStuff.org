* guy deploying static and PHP site on Digital Ocean
** https://www.youtube.com/watch?v=8ScLbnjbRnw
*** Static
**** Use App Platform (just one of many features in DO)
**** it can detect your app (PHP, Ruby, completely-static, completely-server side)
**** Enter your Git repo (already tested locally) into your dashboard, it auto creates site title, & such
**** You can turn on auto-update from repo (when you push into GitHub, it auto updates your site)
*** Laravel
**** Same process, and it auto-detects
**** Some environment variables (you yourself config in Laravel) (eg: APP_ENV, APP_URL)
***** In some cases, you dont put "string" values, you put shortcodes/template_things like ${APP_URL}
**** But... you can create a database, apparently for the dashboard to have "post entry form" (where you enter "name, age, etc" and it updates into website), it needs a DB. (Hmmmmmm, never thought about it that way)
**** Now, it auto-creates environment variables becoz of DB (eg: DATABASE_URL)
***** Also, shortcodes like ${db.DATABASE_URL} that contains credentials (so its not a single string)
**** Some people run DB migrations on every deploy (auto), but this guy will run it manually
***** ----- force becoz its in production
php artisan migrate --force
**** Now boy wants a feature to attach random photos to your posts:
***** So when the posts are created, a random photo is downloaded in the background
***** We need a queue runner for this. So we use Laravel Horizon for this. Laravel Horizon needs a Redis database for this. Then theyre called Redis queues
***** Create component - Boy already created a redis-db inside his dashboard
***** Create component - create Worker, which is continuously running. But instead of running web server, it has to start horizon. So run command is php artisan horizon
***** The worker needs environment variables like before. Also variable to tell Horison to access our Redis database (and catch the queues)
***** We also need storage space for the photos. Enter SPACES: https://docs.digitalocean.com/products/spaces/
***** We also need to inform these components to Laravel (Huh???)
**** And boy changed the domain name
* Runcloud
** a host control panel to install apps or server
*** servers - Amazon, Digital Ocean, etc
** Guy connects VULTR to Runcloud
*** copied a VULTR API key into Runcloud
** We then build a server
*** Any server - VULTR, AWS, etc.
*** any spec - RAM, storage, vCPUS
** We have a server, with all kinds of bells and whistles
*** Cron Job system not very good
*** Notification channels (in case temperature too high, for example)
*** Can change IP addess for remote access (??)
** We're gonna add new Web App to our server
*** we can use Wordpress or PHP
*** we can use Runclouds own free domain, or our own registered domain
*** select our stack -> PHP, NGINX, etc.
*** We can add SSL
** There is now a dedicated WordPress section inside RunCloud!!
*** staging -> set your staging environment
*** once you "deploy staging", done all testing, you can now sync between your "staging" and "production"
** Slack!!
*** You can setup Slack as a notification channel
