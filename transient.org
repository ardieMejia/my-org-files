#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="zoho_ticket.css" />
#+OPTIONS:  toc:nil num:nil ^:nil


* Reminder
** Remember what Chomsky said
*** societies ban certain discussions on purpose to  keep the illusion  of freedom of discussion going. 
*** Most reporters worth their salt, take their job as a mostly a joke. They know the illusion of freedom of speech
*** remember, you made the FUCKING d minor prelude??
* What to do today:
** https://www.interview.micro1.ai/intro/micro1/?candidate=698fa6e4-4849-4b2a-90cf-db3e7d8d3816&ping=ok
** Social media posting:
*** clickbait thumbnails that are more artistic
*** create a plea on threads
**** Any fellow Malaysian artist or social media manager (or familiar with the nuances) wants to connect with me? Help me sell my stuff for a cut/commission of 30%. Benefits includes freebies of some of my wooden products.
*** If someone actually wantedto buy this from me, how much would I charge?
** Job:
*** https://www.maukerja.my/
*** https://www.jorawork.com/
*** https://www.ricebowl.my
*** Read about orchestration and automation
*** about Google cloud platforms: Snowflake and Databricks (good to have)
*** maybe SQL and Azure diffs
** We need to test duplicates of everything, but for now only FIDE ID
** More links on file uploads:
*** [[https://imagekit.io/blog/how-to-upload-files-in-html/][basic element]]
*** [[https://www.pullrequest.com/blog/secure-file-uploads-in-flask-filtering-and-validation-techniques/][in flask]]
*** [[https://stackoverflow.com/questions/7076042/what-mime-type-should-i-use-for-csv][the mimetypethat should be used]]
** Errors and exceptions:
*** lets learn how to handle errors [[https://www.digitalocean.com/community/tutorials/how-to-handle-errors-in-a-flask-application][here]]
*** [[https://docs.python.org/3/library/exceptions.html][built-in]] python exceptions
*** [[https://docs.sqlalchemy.org/en/20/core/exceptions.html][SQLalchemy core]] exceptions
** [[https://hyperskill.org/learn/step/36181][IMPORTANT]]
** Software Engineering:
*** [[https://softwareengineering.stackexchange.com/questions/252448/representation-of-a-question-mark-in-variable-names][predicate variable naming]]
** Jokes:
*** For ages, scholars have debated which comes first. A project or a project template.
** Downloading the event_members table as an excel
** Write documentation for your event management system
** Social:
*** Post about how your wedges last a very long time. Post with old small table, it lasts forever. The medium sized table broke where IKEA glued it up, not me. Yes, Im proud of what I did to something that shouldnt last this long. 
*** If you share your video to people who are not interested in your content, it will only kill it. When people click off your video within the first few seconds, the algorithm picks up this behaviour as your content being not engaging enough and will deprioritize it. Thats why you need to be smart about sharing and only do it in the right places such as facebook groups dedicated to your niche.
** Read about GitGurdian and alternative tools that can help explore web vulnerabilities for idiots like me
** Mistakes we did, that we spnt a very long time to make the conditiaonl env loading work, is the "export" missing in bashrc. Why is an easy mistake to overlook?
*** So turns out bash doesnt automatically export environmnt variables to child processes
** Git:
*** the trick of git rm --cached -r env/ (also setting that in .gitignore)
*** Write it down somewhere
** Python:
*** 
*** Learn Polars
*** A good Flask read on getting data back from DB, from another good site called [[https://python-adv-web-apps.readthedocs.io/en/latest/flask_db2.html][python-adv-web-apps]]
*** not a good bulk update tutorial, but its got exampe of [[https://github.com/sqlalchemy/sqlalchemy/discussions/10537][python tricks]] with lists
*** Spend time reading a Github example [[https://github.com/adityaShar24/Social-Media-Backend?tab=readme-ov-file][Flask social media]] app, for MORE examples
*** Read on Blueprints
*** [[https://www.devdungeon.com/content/run-python-wsgi-web-app-waitress][READ WSGI]]
*** What is this [[https://austinpoor.com/blog/plots-with-jinja][SVG]] experiment
*** Good [[https://www.peterspython.com/en/blog/sqlalchemy-using-cascade-deletes-to-delete-related-objects][link]] on Python Flask SQLalchemy on cascade-deletes. Especially note the "Database object deletes using ForeignKey ON DELETE CASCADE"
** Its very important to be knowledgable on common practices of "deploying to production". So READ [[https://flask.palletsprojects.com/en/stable/tutorial/deploy/][THIS]]. Also, read on lots of [[https://flask.palletsprojects.com/en/stable/deploying/][CONCEPTS]]
** We are going to READ on FILE VALIDATION, COMMON skill:
*** https://imagekit.io/blog/how-to-upload-files-in-html/
*** https://www.pullrequest.com/blog/secure-file-uploads-in-flask-filtering-and-validation-techniques/
** The best way to read CSS frameworks, while learning an actual project in your real work, while also spending time doing your personal project, is to read all the documentation of several. Im currently reading both Bootstrap and Tailwind CSS. The frameworks come from different perspectives and opinions. And trying to get into the mind fo the guys who created the "language", means trying to think "what is the creator trying to convey", when reading all their documentations. 
** Think of a project to use with typst
*** Also write something about typst
** We are going to publish our site, either in render or fly.io
** Remember to move image files from Hanifas laptop during the meeting later.
** Store this link somewhere ([[https://www.svgrepo.com/vectors/please-check-your-input-invalid-input/][svgrepo]])
** Progress
*** write about how you successfully did flex properly (3 child divs). Also flex and grid-cols dont mix very well. Remember to note how you read repeatedly sources from Bootstrap and Tailwind docs to get a sense of  CSS logic. You also tried to memorize slightly tailwind CSS. 
*** Do you want to write about thinking in terms of context. 
** read about [[https://www.linkedin.com/pulse/power-css-organizing-data-rows-columns-shydra-murray-h8t9c/][Flexbox]] please and differences between [[https://pieces.app/blog/top-5-best-css-frameworks-for-responsive-web-design-in-2024][css frameworks]]
** from our phone link
** Watch:
*** https://www.youtube.com/watch?v=YRvBQdJlBeo
*** https://www.youtube.com/watch?v=421twOHytG0
*** https://www.youtube.com/watch?v=1MSy6epsU6Y
*** https://www.youtube.com/watch?v=9UIIMBqq1D4
*** https://www.youtube.com/watch?v=afA0b5ygTyA
** Emacs:
*** Convincing others:
**** A few things that scare newcomers and Vimers, or frustrations that turn them away after trying Emacs for a month or two
***** Ctrl Alt haevy, aka pinky finger. An overly cool solution: Hydra Mode and Key Chords, you'll be able to do stuff no-one else can do
***** typing the wrong way, yes there is such a thing at least, not ideal, but this has a lot more to do, physical wiring of motor skills in the brain
***** awkward defaults, overcome, with searching for "sensible defaults" for config ideas
***** Emacs having the image of dinosaurs IDE, or an old mans IDE: Not true at all, witaout going into complete detail, cool packages that are new-ish that make your Emacs feel completely different or even radical. Hydra-mode, Helm, Vertico, Hydra-mode, Emacs Application Framework (if youre willing to install Python modules globally) and so many more.
**** Reasons why I proseltize Emacs:
***** Sincerely believe it would benefit non-programmers more than programmers, especially who love both writing and coding, and cant live without writing. And programmers, even myself included, are often opinionated with biases towards what is correct and non-correct in technology.
***** Removing stereotypes, contrary to belief, Emacs communtiy are not wholly insular. Many partsa of the community, are increbly open and progressive, and pushing for changes such as Emacs default being less weird (I personally, dont understand why searching for "recent-files" is not enabled by default, I always forget the exact config, and have to copy it from some blog, when setting up Emacs on a new system).
***** A consistent and fun to learn language across the entire ecosystem. If you want to be really cool, you can learn Lisp in both Emas and Nyxt (web browser which also uses a Lisp, very hackable). Even cooler? use Nyxt and Emacs inside GUIX (a stateless Operating System using Guile Scheme Lisp entirely, personally Ive never tried this). GUIX is something Ive always wanted to try, but not enough resources to buy a new laptop at the moment. GUIX is quite cool if you can get the hang of it, coz if Im not mistake, it has the concept of "profiles", which means every "state", every installation, every change is reproducible. From a laymans term, its like Apple's Time Machine. Whatever happens to your system, you can roll back to a previous "state". As a programmer, I imagine everyone here understands the idea of "state", or at least understands it on a "feel" level.
***** We need more David beating up Big Tech Goliaths
**** How to be cool and educated at the same time in Emas
***** Im rather new to Emacs (relatively), but I progressed quite fast by reading a lot of blogs and opinions. So I can proudly claim, Im a very fast learner in the Emacs ecosystem. My usage of Org-Mode has helped me in this.
**** But enough about that, why would YOU want to learn Emacs?
***** Lets think of it this way. Everyone was once an idiot, yes, thats right, even Seniors, they were also once idiots. C programmers, Lispers, Web Developers, we were all once idiots
***** If you are like me, Emacs and its ecosystem, is perhaps the ONLY technology of its kind, that rewards you if you know more. The more you read and explore and experiment, the higher returns. You cant say that for most things in the programming world. Sometimes, knowing more punishes you. 
**** Other tips:
***** use the try package
*** emacs iconfy frame with emacs client should work with non-openbox managers. try that with a new laptop
*** Ive installed Nyxt browser, uses Common Lisp, havent fully explored, but the documentation is fun to read so far. 
**** The word hacking can have both negative and positive connotations. Even if one were to remove the negative MORAL connotations, hacking in your OWN code and software seems to imply a sort of un-naturalness, as if expecting something to break.
**** Reading eLisp, Emacs and now Nyxt browser documentation, I get the impression that hacking can be both pleasant when there is consistency in the ecosystem. Maybe should try that approach in convincing others. Yes, writing is hard work. But writing both beautifully yet meaningfully accurate is even harder. 
**** I remember my first few but very huge fears when I used Emacs the first time. Feels like treading on literal abstraction. More like walking on nothingness. Nowadays, I feel less of that fear. I think partly its becoz, one knows that all software Apple/Android/Windows/whatever is essentially an elaborate hack. Just gotta turn your hack into a work of art. Art as in beauty in words and language, I guess.
**** Wow, this post seems just another rant.
*** try perspective el
*** Also try Emacs Application Framework on a new laptop
*** You like trying cool custom personalized Emacs el. This one is useful simpler bookmark, might help a lot in you html editing: [[https://github.com/joodland/bm][here]]
*** Hydra we need to change our my-mode-line-generic-1 function by using (car my-list1) instead of  'hydra-face-blue. So we create a list like (setq my-list1 '(eww-form-text 2)) an use (car my-list1) or (nth <some-num> my-list1)
*** we are professional, so we need to make Python SUBMIT to us. [[https://emacs.stackexchange.com/questions/3372/coloring-indentation-levels][Color diff indentation levels]]
*** we need another Hydra to ehsily go to other-window using (other-window 1)
*** [[https://zck.org/define-keymap][keymap]] very cool stuff
*** web-mode-element-wrap must be hydra-ed. We also need to auto-select a whole delimiter. But first try the stackoverflow templating engine trick.
*** we need to add web-mode content select to our hydra.
*** We need to learn this Emacs [[https://emacs.stackexchange.com/questions/23810/getting-proper-indentation-for-python-flask-templates][templating indent]] mode thingy
*** we are going to try to use enriched mode to color Emacs
** Store this cool [[https://www.andrewvillazon.com/move-data-to-db-with-sqlalchemy/][declarative_base]] link, coz we managed to make it work for bulk upload. Note how you dont need to remove your usual model in your class. The declarative_model simply maps your class with the existing table.
** override modus theme, a masterpiece theme according to 1 guy, into a [[https://github.com/idlip/haki/tree/haki][high contrast tasheme]]
** Store this [[https://yannesposito.com/posts/0020-cool-looking-org-mode/index.html][cool Emacs link]] somewhere
** Copy Hanifas key
** FB:
*** post your spokeshaves both photos and in action. In FB "handmade tools" group first. Then elsewhere
*** Write about the death of personal computing. Make it relatable. Think of relating the topic with Haiku. Complain slightly about these being a time sink. Also relate to GUIX, Nix, and Emacs.
*** I know some of you are not particular attached to the idea of writing for your own personal sake. In our world, the code itself is documentation. But I can never help feel childish and selfish when it comes to having something personal to write on. I have a personal diary which I write on my favourite piece of software. I find that it helps even when it comes to small stuff (like installing a piece of software, or creating a new repo). I find that it personally helps me with my personal hobbies too (as I have trouble separating between professional work and passionate side project). What setup do you guys have that helps with dealing with the complexity that comes with this job (and the complexity that comes from dealing with separating professional like and side projects). A diary? A knowledge manage system like Obsidian?
*** I guess one of the reason I struggled with frameworks for the longest time, is becoz the template "language" confused how i thnk of code "state" in general
** Post on LinkIn, you dontactually need a big project to practice using frameworks. Just start with a very simple selfish, even stupid idea. Many of the modern frameworks we have out there are quite progressive, meaning as long as you have some idea of good code organization, your stupid ( and big and creative) idea can be made gradually better. Dont be intimidated by all the naysayers out there. Or maybe that only happened to me. But frameworks can be applied gradually to your creative idea. So I tried it with the stupid idea of using Excel as a data base using this REPO as a base. It works, I carefully replace with little bits of Flask here and there.
#+begin_quote

You dont actually need to treat web frameworks with fear. I just only learnt this. Modern frameworks are quite progressive in their nature. This means as long as you have some idea of good code organization and abstraction. Your random, stupid, selfish, creative idea can progressively become better with time and patience. 

Thats what progressive means, when you read a few random articles that mentions the specific progressive of these frameworks.  

I experimented with the stupid and suspicious idea of using Excel as a database, and adding frameworks bit by bit, and borrowing code from this repo: 

https://github.com/AnthonyDjogan/Excel-Based-Employee-Management-System_Python-CRUD-Application/blob/main/Employee_Management_CRUD.py

And then progressively organizing and splitting code and CRUD in my own way. It works. Hahaha...

#+end_quote
** readng technical software/programming documentation for beginners requires a balance of conceptual and technical description.
** Read about Python docstring
** contact African guy again
** Social
*** Use ur existing fiverr clients to improve your stats in other platforms
*** Respond to the Daniel in Developer Kaki
*** Ask the chess guy for possible early fund, coz I kinda need it.
*** ISO for free theaded rod more than 2 feet at least and a few matching nuts
** Python project notes, jot down the folowing:
*** [[https://jinja.palletsprojects.com/en/stable/templates/][we should read more Jinja, just read documentation, spend 1 hour]]
*** [[https://stackoverflow.com/questions/5458048/how-can-i-make-a-python-script-standalone-executable-to-run-without-any-dependen][pythinstaller -f will create a proper .exe]]
*** [[https://stackoverflow.com/questions/16981805/how-does-templating-engine-work][templating engine pedagogy]]
*** [[https://stackoverflow.com/questions/7460938/how-to-run-a-python-script-in-a-web-page][ways to embed python script in website. But maybe we dont need this.]]
*** [[https://skulpt.org/using.html][skulpt is cheat for running python like its javascript]]
*** [[https://flask.palletsprojects.com/en/stable/][Im not sure why i was reading about Flask]]
** Writing about:
*** Write about how you read tech documentation different from stories. 
** First we need to create another class for event, then we need to create a cleanup script
** TODO 
*** we should read about pandas reading null from excel, and validating null from excel
** TODO 
*** your terminal should open with default last directory
** TODO 
*** Look for your reddit history agian, about ELPY + LSP
** TODO 
*** we need to store this as another [[https://www.youtube.com/watch?v=G59BG3VCfio][practical quick release vise]]
** TODO 
*** [[https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Server-side/Django/Models][we REALLY need to read about MODELS before proceeding with Django]]
** TODO 
*** post about why you write in Emacs. a constant in the software world, is bad documentation.
** I read about ketamine, psilocybin and alcohol, and also neurotransmitter GABA
*** https://adf.org.au/drug-facts/ketamine/
*** https://www.psychologytoday.com/intl/blog/culturally-speaking/202312/the-magic-behind-the-molecules-psilocybin-vs-alcohol
*** https://my.clevelandclinic.org/health/articles/22857-gamma-aminobutyric-acid-gaba
**** Researchers are still studying the effects of increased level of GABA, for High blood pressure, Insomnia, Diabetes.
*** GABA presence in food:
****  kimchi, miso and tempeh
**** green, black and oolong tea
**** brown rice, soy and adzuki beans, chestnuts, mushrooms, tomatoes, spinach, broccoli, cabbage, cauliflower, Brussels sprouts, sprouted grains and sweet potatoes
** TODO 
*** Study example uses of defmacro in Emacs
** TODO 
*** add details to linked for [[https://outlier.ai/][Outlier]]
** Write this one somewhere!!
#+begin_src

   RIP Dashboards: 5 Psychology Hacks to Stop Your Work from Dying

You spent weeks building it.
Stakeholders said, “Looks great!”

And then… silence.

❌ No one opens it.
❌ No decisions.
❌ No impact.

Your work deserves to be used.

Here’s how to make sure your insights don't die 👇

1. The Think-Aloud Protocol
🔹 Stop asking, “Is this useful?”—people don’t know. Instead:
🔹 Hand them the dashboard. Let them talk out loud as they explore. 
🔹 Watch where they click, pause, and get stuck — this reveals problems.

💡 Usability expert Jakob Nielsen: 
“Users will never tell you what’s wrong. But they’ll show you.”

2. The IKEA Effect
🔹 Ask early: “What do you think?”
🔹 Show them drafts, not just the final version.
🔹 Let them tweak a few things—it makes them feel ownership.

💡 The more they’re involved, the more they’ll use it.

3. Design Thinking: Build for How They Work (Not What They Ask For)
🔹 Watch how they work today—where’s the friction?
🔹 Prototype early. Refine fast. 
🔹 Don’t spend weeks working on the wrong thing.

💡 If they struggle to use it, it’s not them—it’s the design.

4. Hick’s Law: Simplify or Die
🔹 Cut 20% of elements right now.
🔹 Highlight one key insight they should act on.
🔹 Pre-set defaults instead of making them tweak everything.

💡 Less friction = faster decisions.

5. The “Last Mile” Problem: Put Insights Where They’ll Be Seen
🔹 Push critical insights where people already work (Slack, email, CRM).
🔹 Example: Sales gets an alert when revenue drops below target.
🔹 Meet them where they already work, so data doesn’t get ignored.

💡 Make insights part of their workflow, not an extra step.

In short:
- Make it simple.
- Make them part of the process.
- Make sure it drives action.

Ever built something that no one used? 

Make your insights unforgettable with Data Storytelling. 
Join 4,100+ Data professionals:

  
#+end_src
** [[https://ringgitplus.com/en/blog/income-tax/how-to-file-your-taxes-for-the-first-time.html][read on how to do e-filing for d first time]]
** SO COOL:
*** https://github.com/WingTillDie/adjust-volume/
** wrote a little n Scriabin nocturne
** Read about your Hugo
*** Understand layouts and everything inside (partials, shortcodes, _default)
*** When you replaced your /layouts folder, it fails, simple rename back /_layouts
** contact the fabric guys for your Myanmar project
* Piano (no social media progress)
** You need to buy a stand
* More org notes
** For your recipes
*** Balti
*** some YSAC u did before
*** your chocolate donut (combination of Jamie Olivers friend & Gordon Ramsay)
** For suit, call these numbers for material. (Mention that Sparkle, Lot L-D 1&2, Pudu Plaza, KL recommended these guys)
*** 011 70018033
*** 013 343 2049
*** 018 398 5048
* Tonight:
#+begin_quote



Subject: Response to Domestic Inquiry Intiation
To Whom It May Concern,

I hope this message finds you well. I am writing in response to your email regarding the initiation of domestic inquiry, scheduled for 9:30am 5th March.

I would like to confirm my attendance at the domestic inquiry and assure you that I will be present as requested. I understand the importance of this matter and am fully prepared to provide any necessary information or clarification.

I would like to know if it is possible for Lukman Hakim and Farahin to attend the inquiry as witnesses. I would also like to know the procedure in bringing in a witness, and if am I allowed to call/contact the witness before the inquiry in any way, as well as how early will HR inform the witness. 

Thank you for the opportunity to address this matter, and I look forward to meeting with you.

Sincerely,
Wan Ahmad Ardie





 




#+end_quote
