#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="zoho_ticket.css" />
#+OPTIONS:  toc:nil num:nil ^:nil


* Reminder
** Remember what Chomsky said
*** societies ban certain discussions on purpose to  keep the illusion  of freedom of discussion going. 
*** Most reporters worth their salt, take their job as a mostly a joke. They know the illusion of freedom of speech
*** remember, you made the FUCKING d minor prelude??
* What to do today:
** Boid, save somewhere:
*** https://people.ece.cornell.edu/land/courses/ece4760/labs/s2021/Boids/Boids.html
**** separation = avoid factor (position aware)
**** alignment = matching factor (not position aware)
**** cohesion = centering factor (position award)
*** https://cs.stanford.edu/people/eroberts/courses/soco/projects/2008-09/modeling-natural-systems/boids.html
*** https://github.com/meznak/boids_py
*** https://github.com/SverreNystad/boids-in-python
*** https://github.com/Nikorasu/PyNBoids
*** https://alan-turing-institute.github.io/rse-course/html/module03_research_data_in_python/03_06_boids.html
*** https://rits.github-pages.ucl.ac.uk/intro-research-prog/morea/lesson17/reading2.html
** Randomizer
#+begin_src lisp

  (make-list 10 2)

  (setq var1 (-cons*
              "social media posting, esp. prog lang nerd, BEtter s conf .org file, ask the 3 guys who respected u on lang group on part time job, and also mal in sin group"
              "combobulate, especially dealing with nodes, search engine history, Lady Bird, https://github.com/vedang/pdf-tools?tab=readme-ov-file#about-pdf-tools"
              "Emacs backend, BACKUP our data, Git worktree, magit, iPython or alt setup, trying flycheck with pylint"
              "email, CV, also Audiosockets, GRAB"
              "audio guy, YouTube copyright algo, BOIDS, LIDAR, Python make own ufunc, we do use this link http://programarcadegames.com/index.php?lang=en&chapter=introduction_to_animation with our game"
              "RISC-v, ISA, that original video you watch on Tablet?, Forth"
              "crochet, Hanifas health, prepare for Emacs video of kill workflow"
              "download books that introduce AI and blabla, record class discriminator, record handling, Hoare (1966) discriminated unions, dynmaic polymorphism, software test PDF"
              (append
               (make-list 2 "Qt practice")
               (make-list 4 "web, TEST and check that CSRF for a whole day")
               (make-list 3 "drawing")
               )
              ))

  (nth (random (length var1)) var1)


  ;; testing our url randomizer


  (defun ardie1()
  (interactive)
  (org-copy-subtree)
  (let (
        (ardie/org-random-list (butlast (split-string (substring-no-properties (current-kill 0)) "\n")))
        )
    (message
     (nth (random (length ardie/org-random-list)) ardie/org-random-list)
     )))

#+end_src
** rsync:
#+begin_quote


rsync -avzh --delete --max-size='400M' --exclude="/.*" --exclude='*/myenv*/' --exclude='*/.git*/' --exclude='*/.git*' /home/ardie/Documents /home/ardie/mybackup2025/

rsync -avzh --delete --max-size='400M' --exclude="/.*" --exclude='*/myenv*/' --exclude='*/.git*/' --exclude='*/.git*' /home/ardie/Desktop /home/ardie/mybackup2025/


rsync -avzh --delete --max-size='400M' --exclude="/.*" --exclude='*/myenv*/' --exclude='*/.git*/' --exclude='*/.git*' /home/ardie/emacs-python-workspace /home/ardie/mybackup2025/

rsync -avzh --delete --max-size='400M' --exclude="/.*" --exclude='*/myenv*/' --exclude='*/.git*/' --exclude='*/.git*' /home/ardie/Music /home/ardie/mybackup2025/

rsync -avzh --delete --max-size='400M' --exclude="/.*" --exclude='*/myenv*/' --exclude='*/.git*/' --exclude='*/.git*' /home/ardie/my-trash /home/ardie/mybackup2025/



#+end_quote
** Terry:
*** IMPORTANT: we need to add auto-increment column, becoz there is NO guarantee the SQL table will read (SELECT) the same way
*** withdrawal logs should be downloadable
*** admin should be able to download, withdrawal AND upload logs as CSV
*** test again withdrawal and registration of events. Lots of test please surrounding logs
*** we should test it on chrome and firefox
*** correct color scheme for all whatHappened
*** All our pages need their title checked
*** we need to test reset token limit in production, first set it to 20 minutes (1200 sec)
*** At the last stage we want to remove the verbose logging, AND we need to write somewhere how we added logging in Render.
*** we need separate ENV variable for MAIL, especially our app password, NOT SAFE
*** events page need a log delete button, makes it simpler. its the only thing we need.
*** we need to test if users can still proceed properly unsigning claused event, even with @login_required
*** replace our create-member with a create-dummy-member
*** we need to test again members partial download page
*** we always upload using march/update_inc_new
*** relocate svg to its own dir
*** autocomplete="off"
*** we test EVERY endpoint from LOGGEDOUT and NONADMIN states, we first LIST every endpoint before doing so
*** we need to test every endpoint for (user accessing admin endpoints) for satisfaction
*** create admin on startup, also save this reddit link somewhere important, [[https://www.reddit.com/r/flask/comments/117qm79/create_initialadmin_user/][reddit flask create admin on startup]]
**** [[https://stackoverflow.com/questions/72296682/simplest-way-to-securely-distinguish-between-admins-and-other-users-in-flask][validate redirect with python urlparse netloc]]
*** type in Python model, is a built in class, replace!!
*** we need a dummy user to test
*** make sure there are 2 admins
*** rename #tournament_name as someting very unique, its too generic, OR remove all IDs from form-template elements, since that is not used
*** IMPORTANT: check multiple file inputs and see the effect of log in form_submission()
*** we should write this somewhere. Jinja when looping through dict, has NO "awareness" of dict structure by default hence has to resort to jinja tricks like these:
#+begin_export web

{% for membersAnswer in membersAnswers.values() %}
    {% if loop.first %}

	{% for fieldname,answer in membersAnswer.items() %}
	    {% if answer.subgroupId is none %}
		<th class="w-20 p-4 bg-yellow-400">
		    {{ fieldname }}
		</th>
	    {% else %}
		<th class="w-20 p-4 border-x-2 border-yellow-600 bg-yellow-200 font-light">
		    {{ fieldname }}
		</th>
	    {% endif %}
	{% endfor %}



    {% endif %}
{% endfor %}



#+end_export
*** the type, eligibility, important, can be put at top of form or dropdown display
*** create kill all form button that will kill altogether eventFormQuestions, eventFormQuestionAnaswers, and eventFormQuestionSubgroup
*** our admin doesnt session timeout
[[https://www.freekb.net/Article?id=4560][this link]]
** Tests:
*** Put some tests in case of wrongly named CSV files
*** kill event should successfully kill all event descendent data
**** create event
**** create form questions with sub questions
**** get 2 members to register for event and fill form
**** get 1 member to register for event ONLY
**** get 1st memebr to register again
**** KILL event
**** check event, eventmember, formquestion, formquestionsubgroup, formquestionanswers, formquestionanswersdeleted of specific event ID are deleted
*** Test form link when there is no matching event, or no event entirely
*** Insert the exact same name for tournament name, make sure it catches error properly, shoulfd show DB level error message
*** Go thrhough the usual uplaod of Jan Feb and March, check messages
*** Upload Jan Feb March, and try uploading FRL in Feb, it should fail wih "wrong type"
*** Uplaod Jan Feb march, and try updating FRL in Feb, it should correctly updated FIDE. Check 1 members to confirm
*** login as member and update a FIDE
** Write somewhere:
*** replace all request.args.get('mcfid') occurence with current_user.mcfId
*** for uploads
**** [[https://www.pullrequest.com/blog/secure-file-uploads-in-flask-filtering-and-validation-techniques/][secure file uplaods]]
**** [[https://www.geeksforgeeks.org/uploading-and-downloading-files-in-flask/][file upload basics]]
**** [[https://blog.miguelgrinberg.com/post/handling-file-uploads-with-flask][miguel file uploads]]
**** [[https://imagekit.io/blog/how-to-upload-files-in-html/][basic element]]
**** [[https://www.pullrequest.com/blog/secure-file-uploads-in-flask-filtering-and-validation-techniques/][in flask]]
**** [[https://stackoverflow.com/questions/7076042/what-mime-type-should-i-use-for-csv][the mimetypethat should be used]]
**** We need database tracking each uploads.
#+begin_src python

  class File(db.Model):
         id = db.Column(db.Integer, primary_key=True)
         filename = db.Column(db.String(200), nullable=False)
         filepath = db.Column(db.String(300), nullable=False)
         created_at = db.Column(db.DateTime, default=datetime.utcnow)

         def __repr__(self):
             return f"File('{self.filenname}', '{self.filepath}')"

  # and do the usual db.session.add() db.commit()

#+end_src
*** read about Render persistent disks. 
**** navigating and modifying the folders from inside Render Dashboard shell tab
**** [[https://community.render.com/t/files-in-render-disk-are-being-lost-with-starter-service/17440/4][use /data path]]. Being root is fine, it will persistent and be writable
**** [[https://render.com/docs/disks?_gl=1*1c3j8ip*_gcl_au*MTU0Nzc2NjkxOS4xNzQyNDUzMTcw*_ga*NDI4NTk4MDM0LjE3NDI0NTEyMTU.*_ga_QK9L9QJC5N*czE3NDY3MTU2NjEkbzExJGcxJHQxNzQ2NzE1ODkwJGo1JGwwJGgw#transferring-files][persistent disk]]
**** python write to disk
#+begin_src python

  import os

disk_path = "/mnt/data"  # Path to the persistent disk
folder_name = "my_folder"
folder_path = os.path.join(disk_path, folder_name)

try:
    os.makedirs(folder_path, exist_ok=True)
    print(f"Folder '{folder_name}' created successfully at '{folder_path}'.")
except Exception as e:
    print(f"An error occurred: {e}")

#+end_src
**** [[https://magic-wormhole.readthedocs.io/en/latest/welcome.html][magic wormhole to download files]]
**** [[https://www.youtube.com/watch?v=oFrTqQw0_3c][magic wormhole]]
**** [[https://render.com/docs/disks?_gl=1*18deote*_gcl_au*MTU0Nzc2NjkxOS4xNzQyNDUzMTcw*_ga*NDI4NTk4MDM0LjE3NDI0NTEyMTU.*_ga_QK9L9QJC5N*czE3NDY3MTI2NDQkbzEwJGcxJHQxNzQ2NzEzMzQ0JGoyMSRsMCRoMA..][monitoring Render persistent disk]]
**** And why people keep mentioning cron jobs.
*** to deploy our system, from scratch with Admin AND Users. We should have an entry point that searches an admin. If True, redirect to main_page, Else admin_register.html
**** this means we need to create our password reset email delivery system.
**** only then can we finally protect all our end points
** Password resets for Terry's app:
*** [[https://nrodrig1.medium.com/flask-mail-reset-password-with-token-8088119e015b][better example]]
*** The simple example, without anythng special [[https://stackoverflow.com/questions/48983616/reset-the-password-in-flask-python][stackoverflow]]
*** [[https://freelancefootprints.substack.com/p/yet-another-password-reset-tutorial][using FlaskForm]]
*** from [[https://diginantony.medium.com/how-to-create-a-password-reset-in-flask-python-4dd458c22815][medium]] (yuck), and its bad english
*** username and password only no longer support in Google [[https://stackoverflow.com/questions/72478573/how-to-send-an-email-using-python-after-googles-policy-update-on-not-allowing-j][workaround]] 
*** Password reset link from AI, yuck:
#+begin_src python


  from flask import Flask, render_template, request, url_for
  from itsdangerous import URLSafeTimedSerializer, SignatureExpired
  from flask_mail import Mail, Message

  app = Flask(__name__)
  app.config['SECRET_KEY'] = 'your_secret_key' # Replace with a strong, random key
  app.config['MAIL_SERVER'] = 'smtp.example.com'
  app.config['MAIL_PORT'] = 587
  app.config['MAIL_USE_TLS'] = True
  app.config['MAIL_USERNAME'] = 'your_email@example.com'
  app.config['MAIL_PASSWORD'] = 'your_email_password'

  mail = Mail(app)
  s = URLSafeTimedSerializer(app.config['SECRET_KEY'])

  @app.route('/forgot_password', methods=['GET', 'POST'])
  def forgot_password():
      if request.method == 'POST':
          email = request.form['email']
          token = s.dumps(email, salt='password-reset-salt')
          link = url_for('reset_password', token=token, _external=True)
          msg = Message('Password Reset Request', sender='noreply@example.com', recipients=[email])
          msg.body = f"Click this link to reset your password: {link}"
          mail.send(msg)
          return 'Password reset link sent to your email.'
      return render_template('forgot_password.html')

  @app.route('/reset_password/<token>', methods=['GET', 'POST'])
  def reset_password(token):
      try:
          email = s.loads(token, salt='password-reset-salt', max_age=3600) # Token valid for 1 hour
      except SignatureExpired:
          return 'The password reset link is expired.'
      except Exception as e:
           return f'Invalid password reset link. {e}'

      if request.method == 'POST':
          new_password = request.form['new_password']
          # Update password in database for the user with this email
          return 'Password updated successfully.'
      return render_template('reset_password_form.html', token=token)

  if __name__ == '__main__':
      app.run(debug=True)

#+end_src
*** Flask session timeout:
**** [[https://mulgrew.me/posts/session-timeout-flask.html][this one has module g, dont know]]
**** [[https://stackoverflow.com/questions/11783025/is-there-an-easy-way-to-make-sessions-timeout-in-flask][more basic timeout]]
*** for null check, we need feedback for the users
*** remember to convince Terry, that publishing online and locally on laptop are 2 very different things. Online, you have to consider DDOS and everything. Becoz anything can happen when you decide to make something online. Sorry to sound technial but thats it. Of course, modern framework have ways of making it easier, but it still requires reading.
*** Stupid app, we should recheck all of our validations, should be FIDE
*** Security:
** CPP, c++:
*** 
*** we need to think of a way to create a dynamic drag and drop table in qt cpp, as hinted here: [[https://forum.qt.io/topic/65304/table-with-dynamic-input-from-user-qt-c/2][link]]
*** 
** Emacs
*** We need to use an Ubuntu clipboardmanager with Emacs built in function (rather than Emacs kill ring), and post a video on that
**** No GUI manager:
#+begin_quote

sudo apt update
sudo apt install xclip xsel

#+end_quote
**** and use this:
#+begin_src emacs-lisp

  (require 'clip-mode)
  (setq clip-mode-functions '(clip-insert-selection-at-point)) ; Use for inserting text into Emacs
  (setq clip-selection-at-point-functions '(clip-get-selections)) ; Use for selecting text from Emacs

  ;; Optional: Bind keys for copy and paste (adjust as needed)
  (global-set-key (kbd "C-c y") 'clip-yank) ; Copy and yank the selection
  (global-set-key (kbd "C-c p") 'clip-paste) ; Paste the selection

#+end_src
**** Use a clipboard manager, which works with Emacs built in copy/paste, or create a more advanced function to show history or even paste specific items
#+begin_quote


sudo apt install copyq. 
sudo apt install gpaste. 


#+end_quote
*** We need to make this tool [[https://news.ycombinator.com/item?id=22129636][array-ify]]
*** We need a really cool markdown live preview that works, with eww
#+begin_src emacs-lisp



    (setq browse-url-browser-function 'eww-browse-url)



  ;;     (defun ardie1 ()
  ;;     (interactive)
  ;;     (shell-command-on-region (point-min) 
  ;;                              (point-max) 
  ;;                              "markdown"
  ;;                              "testest")
  ;; (with-current-buffer "testest"
  ;;       (html-mode))
  ;; (with-current-buffer "testest"
  ;;       (impatient-mode))
  ;;     )


  ;; (defun ardie1 ()
  ;; (i
   nteractive)
  (let ((ardie/current-buffer (buffer-name)))
    (shell-command-on-region (point-min) 
                             (point-max) 
                             "markdown"
                             "testest")
    (switch-to-buffer ardie/current-buffer)
    )
  (with-current-buffer "testest"
    (html-mode))
  (with-current-buffer "testest"
    (impatient-mode))


  )

#+end_src
*** We need to makea video about how we manage config safely, when we have multiple Emacs (Eg: 2 versions, and 1 on Windows), minimally without any additional installation, useful if our main config file is quite large
**** The error usually looks like C:\Users\<your_username>\AppData\Roaming\elpa not found
**** 
*** things we should consider wriing in our new YT video (Ultra-ergonomic directional buffer and window navigation, for distraction free writing and coding, conditional on hard-wiring your usage of Ctrl and Alt)
**** ideas for even more "distraction free" writing or coding 
**** as you notice, I also use both left and right Ctrl and Alt, Ctrl-w for example becomes (right)Ctrl-w, becoz thats better ergonomically
**** the hydra keys are mapped to my TODO file, and other important files
**** I have funny leading keys for my hydra
**** I also have hydra for selecting, killing lines, selecting functions, super cool, etc....
**** fuure consideraiont include epoxied flat beads instead of velcro, but I have trouble finding small and flat beads, coz the velcro absorbs dust easily
**** References: https://github.com/emacsorphanage/key-chord and https://www.johndcook.com/blog/2015/02/01/rare-bigrams/
*** Code is Data:
*** we need to watch more Git videos, like [[https://www.youtube.com/watch?app=desktop&v=NXaEImbo-n8&t=920s][this]], and systemcrafters vid on git reflog. Also, we faster diff checks inside Emacs. Make it EPIC!!
*** we need to do a command that copies from current buffer folder into other buffer folder, with confirm prompt from user
*** we need a "code as data" note/file
*** for C++, from this [[https://fanpengkong.com/post/emacs-ccpp/emacs-ccpp/][link]], we use this everyday, with try packages, until we are familiar, DONT use this until we figure which one uses the , we made it shorter these days.
#+begin_src emacs-lisp

  ;; from this point on, we deleted all :ensure t to avoid auto-installation
    ;; lsp
  (use-package lsp-mode
    :hook ((c-mode . lsp)
           (c++-mode . lsp)
           ;; (lsp-mode . lsp-enable-which-key-integration)
           )
    :commands lsp
    ;; :config
    ;; (setq lsp-keymap-prefix "C-c l")
    ;; (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
    ;; (setq lsp-file-watch-threshold 15000)
    )

  ;; (use-package lsp-ui
  ;;   :commands (lsp-ui-mode)
  ;;   :config
  ;;   (setq lsp-ui-doc-enable nil)
  ;;   (setq lsp-ui-doc-delay 0.5)
  ;;   (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
  ;;   (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
  ;;   )

  ;; (use-package lsp-ivy
  ;;   :commands lsp-ivy-workspace-symbol)

  ;; (use-package lsp-treemacs
  ;;   :commands lsp-treemacs-errors-list)

  ;; company
  (use-package company
    :bind ("M-/" . company-complete-common-or-cycle) ;; overwritten by flyspell
    :init (add-hook 'after-init-hook 'global-company-mode)
    :config
    (setq company-show-numbers            t
          company-minimum-prefix-length   1
          company-idle-delay              0.5
          company-backends
          '((company-files          ; files & directory
             company-keywords       ; keywords
             company-capf           ; what is this?
             company-yasnippet)
            (company-abbrev company-dabbrev))))

  (use-package company-box
    :after company
    :hook (company-mode . company-box-mode))

  ;; flycheck
  ;; (use-package flycheck
  ;;   :init (global-flycheck-mode)
  ;;   :config
  ;;   (setq flycheck-display-errors-function
  ;;         #'flycheck-display-error-messages-unless-error-list)

  ;;   (setq flycheck-indication-mode nil))

  ;; (use-package flycheck-pos-tip
  ;;   :after flycheck
  ;;   :config
  ;;   (flycheck-pos-tip-mode))

#+end_src
*** for more Emacs buffer ergonomic magic, also post in on Social Media
#+begin_src lisp

  (progn
    ;; http://xahlee.info/emacs/emacs/emacs_ido_setup.html
    (require 'ido)
    (ido-mode 1)
    ;; show choices vertically

    (setf (nth 2 ido-decorations) "\n")
    (setq ido-enable-flex-matching t)
    (setq ido-default-file-method 'selected-window)
    (setq ido-default-buffer-method 'selected-window)
    (setq max-mini-window-height 0.5))

  (defhydra my-b-hydra 
      (:color purple)
    "my switch to buffer"
    ("b" (progn (ido-switch-buffer)) :exit t))

  ;; ========== global goto1 minor mode for hydras.

  ;;;###autoload
  (define-minor-mode my-b-mode
      "A minor mode so that my key settings override annoying major modes."
    ;; If init-value is not set to t, this mode does not get enabled in
    ;; `fundamental-mode' buffers even after doing \"(global-my-mode 1)\".
    ;; More info: http://emacs.stackexchange.com/q/16693/115
    :init-value t
    :lighter " my-b"
    :keymap (let ((map (make-sparse-keymap)))
              (define-key map
                  ;; (kbd "C-c ;")
                  (kbd "; b")
                'my-b-hydra/body) map))

#+end_src
*** for our new Git worktree trick
#+begin_src lisp



      (global-set-key (kbd "C-<drag-mouse-8>") 'ardie/discard-unstaged-changes)
    (global-set-key (kbd "C-<mouse-8>") 'ardie/discard-unstaged-changes)

  (defun ardie/discard-unstaged-changes ()
    (interactive)

    (let
        ((current-branch (shell-command-to-string "git rev-parse --abbrev-ref HEAD")))
      (if (string-match-p "working" current-branch)
          (if (y-or-n-p "discard changes, sto restart from prev commit? (y or n) ")
              (let ((discard-change-output (shell-command-to-string "git checkout .")))
                (print discard-change-output))
            (print "action canceled")
            )
        (print "not working branch: nothing done")
        )
      )
    )  



  ;; ===== New: under test

  (defun ardie/project-save-all-buffers (&optional proj arg)
    "Save all file-visiting buffers in PROJ without asking.

  Falls back to `project-current' if PROJ is not specified."
    (let* ((proj (or proj (project-current)))
           (buffers (project-buffers (project-current))))
      (dolist (buf buffers)
        ;; Act on base buffer of indirect buffers, if needed.
        (with-current-buffer (or (buffer-base-buffer buf) buf)
          (when (and (buffer-file-name buf)   ; Ignore all non-file-visiting buffers.
                     (buffer-modified-p buf)) ; Ignore all unchanged buffers.
            (let ((buffer-save-without-query t))  ; Save silently.
              (save-buffer arg)))))))
  ;; ===== New: under test
#+end_src
**** Also in our attempt at improving further our powerful shortcuts and "no stash" workflow
*** Also for our rust-ts-mode:
#+begin_src lisp


    ;; ===== we no longer need rust-mode becoz we dont need rust-run
    ;; ===== we digged inside rust-run and discovered (compile) function used
    ;; ===== in most Emacs major programming modes

  ;; WRITE THESE SOME WHERE
  ;; ===== we unbound a key after a mistake
  ;; (fmakunbound 'my-rust-endline)
  ;; (unbind-key (kbd "RET") rust-ts-mode-map)

  (defun my-rust-endline ()
    (interactive)
    (insert ";")
    (newline)
    )

  (add-hook 'rust-mode-hook 'my-rust-endline)
  (add-hook 'rust-ts-mode-hook 'my-rust-endline)


  (define-key rust-ts-mode-map (kbd "C-<return>") 'my-rust-endline)


#+end_src
*** we need ;;h for select all, coz we still use it a lot for example in adding org-insert-structure-template
**** Also need indent-region hydra
*** we change add alternative to ;ii as highlight, coz swiper is messy
*** combobulate links:
**** [[https://sqrtminusone.xyz/configs/emacs/]]
*** we need to create a script that goes uses both next-logical-line and forward-word to copy, but we are only it works in web-mode
*** we need to create a el script fr we-mode that splits tags (once wrapped) into separate lines, or can use forward-sexp into it, think
#+begin_src lisp



  (split-string "<br><br>" ">")


(let ((separator "_"))
  
  (dolist (var1 '("1" "2" "3"))
    (print
     (concat
      var1
      separator
      )
     )
    )
  )

#+end_src
*** we need to really try javascript console in Emacs, we forgot where th link was
*** we should really explore combobulate to explore doing tricks in HTML and JAVSCRIPT, like moving a tree outside parent
**** moving everything outisde of any bracket
**** moving everyghing outside tag
**** but first start the experiment (and as practice), splitting the content into separate lines
*** we have to remap some of our Emacs hudra to mark-sexp. But only for Emacs29. Also we need modify our select line in hydra to save-excursion
*** we need a Emacs feature/mode that provides some cool jquery selector shortcut
*** we should really learn all the paredit tricks
*** there are several ways to exit hydras in fact, some more stable than others (becoz of nested hydras
**** [[https://emacs.stackexchange.com/questions/36597/returning-to-the-parent-hydra][link]]
**** [[https://emacspeak.blogspot.com/2020/09/emacs-paired-commands-efficient.html][repeatable hydra yank]]
*** Company mode readings:
**** [[https://www.reddit.com/r/emacs/comments/q8u2l4/unsetting_return_in_company_mode/][finally disabled company mode completion with better keybindings company-active-map]]
**** [[https://github.com/company-mode/company-mode/issues/640][variuos ideas of use-package for company-mode]]
**** [[https://company-mode.github.io/manual/Getting-Started.html#Usage-Basics][good verbose doc]]
*** We need to learn setting up opening module in Emacs rust. 
*** Read about elpy-rpc, and why do we have an elpy-rpc-buffer, it sounds cool but i dont know what its used for
*** more efficient faster completions for our Python, using this code, for now. We just need to set company-mode properly, and then use configs below from this [[https://github.com/joaotavora/eglot/discussions/1436][link]]
#+begin_src lisp


(use-package company
  :config (setq company-idle-delay 0
		company-minimum-prefix-length 1
		company-tooltip-align-annotations t))
(add-hook 'after-init-hook 'global-company-mode)
  
#+end_src
*** [[https://www.deusinmachina.net/p/tree-sitter-revolutionizing-parsing][parsing tree-sitter link]]
*** [[https://www.masteringemacs.org/article/combobulate-structured-movement-editing-treesitter][another one on tree-sitter]]
*** 
*** [[https://jackjamison.xyz/blog/emacs-garbage-collection/][garbage collection, basically to reduce stuttering]]
*** [[https://kitchingroup.cheme.cmu.edu/blog/2016/11/10/Persistent-highlighting-in-Emacs/][The Kitchin Research Group]]
*** [[https://github.com/rougier/svg-tag-mode][really cool, possible improvement to our html editing]]
*** [[https://github.com/io12/good-scroll.el][supersmooth scrolling]]
*** [[https://github.com/minad/org-modern][org-modern look]]
*** join multi into 1 without spaces
*** [[https://karthinks.com/software/fringe-matters-finding-the-right-difference/][another cool blog]]
** Python web app security practices:
** RUST:
*** For those that missed the session, simply go to [[https://github.com/rust-malaysia/bevy_workshop][github repo of bevy malaysia]], copy src, clear out obstacles.rs, and start from there. It should be the same thing.
*** Some recommended (please go through them, defo begging you...) resources:
**** Install Rust - Rust Programming Language (A must!)
****     Official Introduction to Bevy (Highly recommended!)
****     What is an ECS? feat. Bevy and Rust (Entity-Component-System, a core concept in Bevy, explained in a video by Chris Biscardi)
****     Game Engine Of The Future - YouTube (A very fun and nice introduction to the Bevy engine by TanTan! Definitely not trying to convince you to switch over to Bevy for your future projects hahaha)
****     Bevy Playground (Try Bevy on your browser now!!!! Highly recommended!)
**** Contact us organizers at
****  +60164410216 (Ivan Tham)
****     +60129851338 (Jeffrey Lean)
****     +60173389100 (Nixon)
**** [[https://t.me/+dF46Fly4A_BjOTJl][subscribe for more events]]
****  https://rust-malaysia.github.io/meetup/
**** [[https://www.youtube.com/playlist?list=PL85XCvVPmGQh3V0Pz-_xFm6VAUTR4aLUw][YouTube]]
**** [[https://nixon-voxell.itch.io/lumina][game1]]
**** [[https://github.com/nixon-voxell/lumina][game2]]
**** [[https://bevyengine.org/learn/quick-start/getting-started/setup/][install bevy]]
**** [[https://www.rust-lang.org/tools/install][install rust]]
**** [[https://bevyengine.org/learn/quick-start/introduction/][introduction to bevy]]
**** [[https://www.youtube.com/watch?v=AirfWcVOEHw][Entity Component System]]
**** [[https://www.youtube.com/watch?v=sfFQrhajs6o][YouTube introduction]]
**** [[https://learnbevy.com/playground][bevy playground]]
** Present your Emacs teaching class inside University of Malaya International students main discussion group. Gauge reaction
*** kill_events (thats with an S!!), we only did the kill_event/<int:id>
**** https://snyk.io/blog/secure-python-flask-applications/
*** try save-excursion and return in quit for select-hydra. Or the similar trick in your word-hydra
** We need to refactor error message of upload, what do we do with all the ID info?? Maybe theres no need for it.
*** create checks for duplicate events
*** we should add timestamp naming for CSV files
*** https://qwiet.ai/hacking-and-securing-python-applications/
** Make sure you share-rate is above 3%
** Post in Pythons Group Malaysia, your willingness to work for Django, having experience in Flask and used Django for a side project.
** Instagram, YouTube:
*** Join KLCC groups, Malaysian craft groups, Malaysian art group, Southeast Asian music groups to target more than 100 views by Saturday.
** https://www.interview.micro1.ai/intro/micro1/?candidate=698fa6e4-4849-4b2a-90cf-db3e7d8d3816&ping=ok
** Social media posting:
*** Post your youtube channel to Peppers Lim sciencey channel, and Johnson "flat chest" 
*** Emacs as a fast and lightweight and FREE writing tool:
**** Why speed matters for note-taking and throwaway ideas. It doesnt have to be split second, but easily-reachable and in the realm of less than 5 seconds.
**** When we are dong research, or or trapped in deep thought, we often come up with ideas from unexpected places, and we quickly forget them.
**** We assume those ideas are not important ("if its important, you would not forget"). Only to find it, someone else made something based on that idea.
**** The obsession of speed is NOT the same as obsession with speed when developing software. (premature optimization doesnt apply here)
**** becoz the range of seconds we are thinking is not 0.1 - 1.0, but rather less than 5 seconds. Which makes a big difference, especially when we want to write throwaway ideas.
**** Maybe we're reading on a random topic, and we came up with idea for a blog post. So instead of opening the Word doc, we can bind it to an Emacs org file with just 3 key presses
**** REMEMBER: we need to do a snippet that makes it look TOO EASY
*** Today Id like to talk about some cool Hydra ideas and tricks that I use in my daily workflow
**** I use this trick a lot in many places, usually to avoid overlying on Ctrl and Alt for most of the basic text editing.
**** Im not going to explaing what Hydra mode is in detail, becoz theres a lot of better resources. So Im just going to give you some ideas on how I use it
**** If you already a long time Emacs user, and haave not explored, even youre a writer, I higaly recommend.
**** And if youre a writer, or using Emacs as a knowledge management system, Im going to explain how hydra mode might be personally useful for you too
**** first im going to an example file, and show some of the things I can do 
**** so the first hydra that im using is for selecting a line and do whatever action  want with it.
**** once im selecting a line, I can do whatever I want with it. For example, I can kill a line,or even move a line up or down.
**** so that second trick was quite cool, but Im gonna explain what the first does. Now usually when I want to kill a line and paste it somewhere else, I do a Ctrl....
**** in Hydra I do a ...
**** So you can think of Hydra as leading key that triggers a key map, or a space with temporary keys, and selecting another key or head, either calls a function, or creates another key map or space.
**** Since, Emacs is very extensible, I can bind the K head to an existing kill-region function
**** and i can still use the same Ctrl-w key
**** usually in Hydra examples you see online, most use someghin like Ctrl-l as a leader key
**** I use semicolon which is inspired my Spacemacs or Neovims spacebar as a leader key. 
**** So the code looks so,ething this
#+begin_src emacs-lisp

  (defhydra hydra-my-commands (global-map "SPC")
  "My Commands"
  ("f" find-file "Find File")
  ("s" save-buffer "Save Buffer")
  ("q" kill-emacs "Quit Emacs")
  :color blue)

#+end_src
**** Now if you wanted to map it to something els you would define a child like this.
**** The space key in this is defined globally, but I wanted my hydra to be flexible either globally or only in certain major modes.
**** A trick I found online is using minor-modes, but I cant find the link where I found this, so I dont know who or what to attribute to.
**** this is all just a boilerplate code, and defaults to global, but if I want to add this minor-mode to a major-mode, I use this, where the 2nd argument is the minor mode
#+begin_src emacs-lisp

  (add-hook 'web-mode-hook #'my-custom-web-mode)

#+end_src
**** minor modes are basicalt more flexible, and you can have multipel minor modes for a single major mode
**** as you can see I have lots of minor modes and just name it the similar to my hydra, so each hydra has its own minor mode, that makes it simple
**** its probably quite messy, but if I ever wanted to add another cool hydra, its straigghtforward for me
*** this doesnt belong here, CNCF, Linux, open source:
**** https://cloud-native.slack.com/
**** https://clotributor.dev/
*** Forth
**** A compiler is a social construct
*** Literally all knitting and crocheting is like programming. Physicists are literally confused by the knitting "science". Yes I tried crocheting. And the "patterns" that crocheters read are also a bit like reading code. The most mind boggling thing, is a non-crocheter would be quite perplexed and joining the dots between crochet (software product) and patterns. Good crocheters can read a cryptic pattern code, and produce something really beautiful.
**** https://www.youtube.com/watch?v=iTLvD6-X8WQ
*** Own your IDE:
**** REMEMBER: we need to do a snippet that makes it look TOO EASY
**** Its easy to get distracted by additional tools. This still happens even when youre using Emacs, so when things get confusing, I just turn off all those autocomplete, and simply rely on highlighting to spend some quiet time just reading the code. Especially useful to forget all that noise. How about all of you? Are there any fallback tools, you end up relying solely on?
**** Another thing I do is close-all-buffers, its such a mind-clearer, an advantage over other IDEs
*** A post on Ubuntu clipboardmanager with Emacs function
*** Code is data:
#+begin_src emacs-lisp

  (if (< emacs-major-version 29)
      (setq backup-directory-alist `(("." . ,(concat ardie/all-compute-cfg-dir "emacs_backup_files"))))  
    (setq backup-directory-alist '(("." . "/home/ardie/my-emacs-29-config/emacs_backup_files")))  
    )

#+end_src
*** Interesting analysis on Harry Potter (https://www.youtube.com/watch?v=wRkHBNT7NQ0)
**** School stories, turns out Harry Potter is more of a "school stories" rather than fantasy. School Stories are genre popular during a period in English literature. It explains the strange romnaticism of school board hierarchies in JK Rowling writings, rather than criticism meant to dismantle hierarchy. This isnt a specifically a JK Rowling issue, as it was common for authors of this genre to write like this, often rarely bringing up issues of toxic hierarchy in boarding schools. (So now, you also know that toxic hierarchy in boarding schools in not necessarily a specific a Meley thing). Charles Dickens writings seems to be the one of the few that goes against this norm, taking a stance against boarding schools corporal punishment, often for very small mistakes. Other authors including JK Rowling romantacize boarding schools.
**** There are many interesting points this video raises as well.
*** Explaining Emacs:
**** REMEMBER: we need to do a snippet that makes it look TOO EASY
**** Emacs, is stateless, in a sense
**** If you were to delete your config, and restart your Emacs, your entire Emacs would be vanilla all over again
**** autocommand detects events such as opening a file. Emacs uses hooks. And there are so many hooks, but the nature of Emacs documentation means its up to you to explore this
**** eerything is a buffer, running a terminal inside Emacs, and the terminal is a buffer. whereas in Neovim, im guessing Neovim is inside terminal
**** to truly take advanage of Emacs, the learning experience is different from Neovim. If you start with only suggested configs with Neovim, and learn only 1 prog lang, you can already do amazing stuff. But with Emacs, you often need to read and explore more, becoz Emacs has so many packages most emacs users havenever heard of 
**** Neovim has much better defaults. Emacs has horrible defaults by FAR
**** Org-Mode is literally what Emacs is all about, in a sense
*** Society and work:
**** Society works because people work without complaining. You are a captive tax farm animal, do you duty and no harm will come to you while being a caged animal for the “farmer” aka religious/biz/political leader who hired thugs with weapons to guard all viable land and natural resources so you must work for one of them in exchange for food and shelter. If you are made poor—deprived of opportunity—you are more likely to become petty, criminal, even violent. Collective prosperity prevents crime, not capitalism, socialism, liberalism, or cops. But with all viable land and natural resources taken, an individual has no choice but to work for and reinforce the very status quo that oppresses them, in exchange for the means of survival. Your will to live is leveraged against you; your best and only years on God’s green Earth are used to build, maintain, and restock ivory towers for people you’ll never meet. Prolife isn’t about life—it’s about social control, the manufacturing of cheap and renewable labor. A life born, especially in desperation, is easily leveraged into a life of economic slavery and ideological subservience. This is why suicide and the right to die have long been criminalized. How else can the elite secure generations of compliant labor? Rebellion is associated with youth not because the young are especially rebellious, but because the rebellious are not allowed to grow old. Economic systems of any kind inevitably pool wealth, create disparity, and lead to conflict—both within borders and beyond. “Work sets you free” because even homelessness is a crime. Religion is primitive government. Government is resource control through politics. And politics? It’s just mediation between the haves and have-nots by the old—deciding who gets what, where, when, how much, and why. If you work for them, you might survive. Work against them, and you suffer.
*** Should I apply? 
**** [[https://compro.miu.edu/?utm_source=facebook&utm_medium=cpc&utm_content=text&utm_campaign=compro&utm_id=120210340864320345_v2_s06_e7201_sp_110&utm_term=120210340864370345&fbclid=IwY2xjawMLi3hleHRuA2FlbQEwAGFkaWQBqyPoGbLBuWJyaWQRMTdOY0lpSzRXbW01aklUMmcBHuTWV54DUfqMu-CpPxs7DLCAuV0srbD9sXm0FAIjSMlbXVa-WZ7VU3B8dSOi_aem_3t2fF1lsPdx-YHLCOJmAxw][masters in computer sciecne]]
*** [[https://northeastbylines.co.uk/news/national-news/flag-fetishism-by-gaslight/][flag fetishism by gas light]]
*** Teaching later:
**** some differences = Neovim has remove keybinding, Emacs has modes, so you usually have overwrites instead of removing
**** autocommand detects events such as opening a file. Emacs uses hooks. And there are so many hooks, but the nature of Emacs documentation means its up to you to explore this
**** eerything is a buffer, running a terminal inside Emacs, and the terminal is a buffer. whereas in Neovim, im guessing Neovim is inside terminal
**** to truly take advanage of Emacs, the learning experience is different from Neovim. If you start with only suggested configs with Neovim, and learn only 1 prog lang, you can already do amazing stuff. But with Emacs, you often need to read and explore more, becoz Emacs has so many packages most emacs users havenever heard of 
**** Neovim has much better defaults. Emacs has horrible defaults by FAR
**** Org-Mode is literally what Emacs is all about, in a sense
*** (1) To clarify a previous post, coz apparently some seniors thought I made things complicated.
**** I posted this a while ago in a Dev group.
**** Some senior said I made things overcomplicated.
**** I guess Im bad at explaining stuff.
**** I guess the point is, I can engage in a long-week coding experiment writing throwaway code. 
**** If Im happy, and its clean code, I can push. Thats a single mouse button, (no need fir git add <file1> <file2>) 
**** if its good code, but I dont wanna show this version upstream in a repo or in front of the team. I can just click a mouse  button, to start everything over.
**** If I want to test its also, a single button.
**** In total, 4 special powerful mouse buttons.
**** And these buttons work regardless of the project or language (thanks to some function and .dir-locals.el for project-specific variable)..
**** Yes, the almost powerful ergonomic feel of a modern IDE without the bloat, and keeping all the custom extensibility.
**** Would take a very long time to achieve this in VSCode Im sure.
**** I dont wanna feel too weird, so this is like balance of Emacs weirdness and modern IDE.
**** Come one, someone. Tell me this make sense without needing to understand my config.
*** Video on my project-agnostic Neovim killer workflow.
**** My attempt at using Emacs like badass
**** I basically combined project local variables (Emacs.dir-locals.el), which is basically directory local variables, with Git worktree and some eLisp functions to create a workflow that consists of a fuzzing branch and working branch
**** As summarized before:
***** each Emacs instance in its own workspace
***** simply switching between Emacs changes branch
***** 1 Emacs for working code,1 Emacs for fuzzing code
***** no more stashing
***** blindly do a "git add ." (triggered by a single mouse button)
***** a single mouse button to run/test the project
**** But the real takeaway is, Im doing  3 mouse button cliks every single time. For every project, regardless of the programming language.
**** And if after a long, maybe long week session of coding, the code works but i dont like how it looks like, there's a fourth button press, that reverts to a previous commit.
**** there's basically more or less 3 things to note in the code:
***** The code needs to be branch-aware
***** The code needs to be commit-aware
**** If Im pushing into production, the repo will see none of this.
**** The whole purpose is to create a furious hacking workflow that is completely hidden from any main branching. And no personal micro-managing of files with Git stashing/etc.
**** If after a long week changes look good enough, I can push it to the repo. If not, I can do a reset with the ardie/back-to-square-one function (which is also bound to a Alt-single mouse button)e
**** Since Git is mostly a toolkit, it doesnt make sense to me, to not abuse it in a personalized way.
**** Useful for: 1 - not wanting push code that works but too embarassing for public 2 - playing with week-long throwaway code, and can start over easily 3 - avoiding pushing unclean commits to control freak team leads ("why is there a space in this commit history? And why are you using single-quotes instead of double quotes?").
*** Post about your worktree discovery:
**** This is a continuation from my previous post
**** Git (vcs) can be a mental challenge. Even when youve mastered, it is still considered a huge mental gear change from code logic. You have to "put your head outside" a bit to go "Git mode". Is important that we learn tools that increase programmer comfort. While Git is mostly a version control tool, it should also not only NOT get in thw way of your personal progress and project, but also make your programmer life more comfortable and cooler. 
**** Welcome to Git Worktree. Logically its just a "branch made into physical folders". But if we work through this site example, we can improve it further. The site shows another way of using Git Worktree, that involves a "fuzzing" branch (kinda like "testing") that will hold most of your work assets/build files. While the site was not entirely clear on where the "main" branch sits in this. I used an extra branch that represents main, "working". So in practice, I just merge "working" back to "main" whenever Im satisfied with my commit amends. So "working" (and of course, main) has only your tracked files, while fuzzing includes the files you dont want commited.
**** I should do a video to increase my YouTube channel views with this trick. But heres the code snippet I use. 
**** Basically, ardie/add-all-amend-commit -> ardie/git-get-rev-parse -> ardie/switch-d
**** In summary:
***** each Emacs instance in its own workspace
***** simply switching between Emacs changes branch
***** 1 Emacs for code,1 Emacs for test/fuzz
***** no more stashing (hopefully)
***** blindly do a "git add ." (triggered by a single shortcut)
***** a single mouse button to run/test the project
**** This is just a sample and a reminder, to not just use Emacs as an "efficient Vim alternative" or just "Vim movements", but use it like a selfish badass. Ergonomics (not just efficiency, that is a misleading term) that extend to project management, knowledge management, and Git workflow.
*** share an improved Python/Emacs class on FB Malaysia teaching group
**** Share on several Malaysia teaching groups again
#+begin_quote

Anyone interested in a free introductory crash course in Emacs? I dont want a price for successive classes, coz Im too afraid of being judged. Hah.
But personally, its just a half excuse for me to meet with weirdos, or to make connections with people who have different ideas. Hahahaha.
I cant be the only guy who uses softwares very very differently.
Contact info also available in the link.
(Note: this is not for seniors. Also ignore the Python description in the link page, I have yet to update it)

#+end_quote
*** Reddit:
**** Ask about how to auto wrap around if else, the same way we can do with sexp
*** Post for RemoteWorkMalaysia:
**** I have been jobless for 3 months. Im extremely hungry for solving problems, if given the opportunity.
**** If you have any suggestions or advice or if you know anyone who would be willing to give me a chance, it would be very much appreciated. 
**** Thank you in advanced for reading this long post 
**** My name is Ardie and I’m currently looking for a job. Some of you remember me from some of my previous posts in the main group about Emacs. If there are any job opportunity that I could apply for or be a part, please do consider me.
**** My project experience includes creating a software module that has been successfully integrated into the production branch of a GIS company. This company client includes an electrical utility company. Other experiences include fixing bugs for a Study Aboard Education platform. I have also made a small Python web app (Flask, TailWind CSS, Javascript) which is kept in sync locally with a Github workflow, so Im very much familiar with Git workflow.
**** My past academic experience includes Bachelor of Information Technology and Masters in Marine Science. My Masters is where I was introduced to Linux during its early years. My programming experience includes Python, Javascript, SQL and some minor C, Fortran as well as Java. My recent experiences include a full-stack Python web app using the Flask framework (utilizing both frontend and backend) as well as a software module for a GIS-based company. Both heavily utilizes SQL. My total experience in programming is more than 8 years, both academic and work related. I am a self-motivated learner, having taught myself various technologies such as web development frameworks, Git version control, Linux, and Emacs. Outside of my professional work, I have recently created a personal Django project.
**** Additionally, I am highly adaptable in my approach to problem-solving. I thrive in environments that promote knowledge sharing and look forward to collaborating with diverse individuals on engaging and innovative projects. Im also an avid reader of filds slightly outside of the technical aspects, such as domain-driven design in programming. If there are any jobs that fit my experience or might benefit additional talent, please PM me for further discussions.
**** If any company or anyone has a project that utilizes Ruby on Rails or other non-mainstream alternatives. Not just looking forward, but rather I will be extremely excited in mastering something new like this.
**** Im not just a quick learner, but i make efforts to expand my familiarity with not just different programming languages but different paradigms, as I have managed to decently master eLisp (Emacs) and Lisp in just 3 years.
*** Post for programming language nerd inMalaysia, EDIT
**** Ive always wanted a split keyboard, the sheer ergonomic game changer. But now Im far too deep into Emacs land, I came up with soe radical tips on Emacs ergonomics in avoiding the famed "Emacs pinky"
**** My Noevim-killer setup. No, Ive got nothing againt Vim or Neovim, and I did not set out to create a Vim-binding alternative, but it feels so ergonomic, it might as well as be. However, I mostly combined this with some unique hacky modifications of my own keyboard, as well as my usage of both sides of Ctrl and Alt. So they might not work for your setup. One of the complaints I hear all the time from YouTubers who are pro Neovim are Emacs pinky's, which is the result of Emacs over-reliance on modifiers like Alt and Ctrl. Ive used Emacs for less than 10 years, so unlike others, I personally feel less attached if Emacs in the future decides to change some default keybindings. Theres always a workarond, by having a "classic bindings". Anyway, long story short, here are some of the clever tricks that I came up with in my journey to a more ergonomic Vim-binding alternative in Emacs:
****     Completely rewire how I use my my keyboard. This ones more like "hardwired" hack. Basically, I always use both hands, and as little pinky as possible. When I am pressing Ctrl-w, instead of using Left hand for both Ctrl and W, I use Right hand for Ctrl and Left hand for w.
****     I experimented with Hydra mode as much as possible. Using Hydra mode, I map shortcuts like ;;t to a Personal learning Diary, and ;;p to my Python Diary, and there are 24 more alphabets to go. If I were to ever code in C or C++, I could remap those modes to exclusively not use those.
****     I use a rather less-known package called Key Chord. Using key chords, I create a directional bigram, that is highly ergonomic. I will explain this in a later post, but simply, instead of Ctrl-_ for Undo, I use qw for Undo, since qw is a key combination rarely used in writing (aka bigram). Since qw is placed on the left (aka directional), left hints on "going back", since its our natural reading direction. These directional key presses are a theme I apply throughout (]\ for opening empty scratch buffer on the right, p[ is for moving to opened window on the right, and [] for moving to opened window on the left, zx for moving to previous buffer, and ,. for moving to next buffer).
****     I paste small Velcro pieces on all my keyboard modifiers, such as Ctrl and Alt with braille-inspired variations, so I can literally just feel the Alt and Ctrl. Similarly applied to by directional bigram key chords. In my current workflow, I no longer look at the keys for Ctrl or Alt, and this braille addition makes my navigation many times more ergonomic. The braille like pieces are not applied everywhere, just 5-7 keys
****     Thats it, so far, my only complain is this Velcro addition makes my keyboard look ugly, my next move might be to epoxy necklace beads to my keyboards for those braille-inspired patterns. Yes its very hacky, but I can almost touch type, not looking at keys most of the time
****     References: https://github.com/emacsorphanage/key-chord and https://www.johndcook.com/blog/2015/02/01/rare-bigrams/
****     Well, its either this or a very expensive split keyboard that is completely out of my reach. 
*** we need to write about [[https://www.critique-musicale.com/bachen.htm][Bach]] being over-rated
*** Post something on Linux Fans Group
*** Do you have a cool Python project to share? Actually, I dont have anything cool to say about Python coz I like Python for web dev, but Im not an expert in it, Im obsessed about Emacs. I dont do heavy OOP or data science in Python, but if you do, PyCon2025 is the place to go. Anyway [[https://cfp.pycon.my/pyconmy-2025/cfp][CALL FOR PAPERS!!!!!..]].. Dont worry about advanced topics, I myself like showing off, but I personally prefer casual Python talk, like last years talk on a Filipinos womens experience as the only female in her Python team. Yes, it can be that casual, but the more variety the better (Check out the section for targeting your type of audience: Beginner, Intermediate and Advanced User)
*** So basically, tree-sitter has something to do with concrete syntax tree which is slightly related to abstract syntax tree. Basically, its what the compiler usually deals with. But why is such a big deal these days, is becoz these things are no longer secret these days, while historically, compiler secrets are guarded by corporations with jealousy. 
**** A good article to read on combobulate and tree-sitter is on MasteringEmacs website. 
**** Anyway, the great thing about combobulate, is that if you managed to setup tree-sitter properly (think: tree-sitter is the "math" behind combobulate), its actually in the background never interfering with your current workflow.
**** I use Hydra-mode a lot in my workflow. Makes for some really cool and pleasant editing experience. (I radically use semicolon as "leading key" replacing Ctrl and Alt for a few editing and buffer navigation stuff, my Hydra file is the messiest, but its the most fun to add).
**** I then simply added without a second thought another Hydra head that uses (combobulate-python-envelope-nest-if-else). Now ;;sf selects n lines and wraps in if..else with indentation.
**** Why this is such a big deal is that, some old timer eLisp coders use a lot of cool paredit tricks (powerful shortcuts moving logic around, by just moving parenthesis). And combobulate seeks to emulate this in other languages.
**** Just my writeup, hoping to inspire others (or inviting criticism).
*** My Noevim-killer setup. No, Ive got nothing againt Vim or Neovim, and I did not set out to create a Vim-binding alternative, but it feels so ergonomic, it might as well as be. However, I mostly combined this with some unique hacky modifications of my own keyboard, as well as my usage of both sides of Ctrl and Alt. So they might not work for your setup. One of the complaints I hear all the time from YouTubers who are pro Neovim are Emacs pinky's, which is the result of Emacs over-reliance on modifiers like Alt and Ctrl. Ive used Emacs for less than 10 years, so unlike others, I personally feel less attached if Emacs in the future decides to change some default keybindings. Theres always a workarond, by having a "classic bindings". Anyway, long story short, here are some of the clever tricks that I came up with in my journey to a more ergonomic Vim-binding alternative in Emacs:
**** Completely rewire how I use my my keyboard. This ones more like "hardwired" hack. Basically, I always use both hands, and as little pinky as possible. When I am pressing Ctrl-w, instead of using Left hand for both Ctrl and W, I use Right hand for Ctrl and Left hand for w.
**** I experimented with Hydra mode as much as possible. Using Hydra mode, I map shortcuts like ;;t to a Personal learning Diary, and ;;p to my Python Diary, and there are 24 more alphabets to go. If I were to ever code in C or C++, I could remap those modes to exclusively not use those.
**** I use a rather less-known package called Key Chord. Using key chords, I create a directional bigram, that is highly ergonomic. I will explain this in a later post, but simply, instead of Ctrl-_ for Undo, I use qw for Undo, since qw is a key combination rarely used in writing (aka bigram). Since qw is placed on the left (aka directional), left hints on "going back", since its our natural reading direction. These directional key presses are a theme I apply throughout (]\ for opening empty scratch buffer on the right, p[ is for moving to opened window on the right, and [] for moving to opened window on the left, zx for moving to previous buffer, and ,. for moving to next buffer). 
**** I paste small Velcro pieces on all my keyboard modifiers, such as Ctrl and Alt with braille-inspired variations, so I can literally just feel the Alt and Ctrl. Similarly applied to by directional bigram key chords. In my current workflow, I no longer look at the keys for Ctrl or Alt, and this braille addition makes my navigation many times more ergonomic.
**** Thats it, so far, my only complain is this Velcro addition makes my keyboard look ugly, my next move might be to epoxy necklace beads to my keyboards for those braille-inspired patterns. Yes its very hacky, but its better than carrying a very bulky mechnical keyboard everywhere with me.
**** References: [[https://github.com/emacsorphanage/key-chord][Key Chords]] and [[https://www.johndcook.com/blog/2015/02/01/rare-bigrams/][bigrams]]
**** Well, its either this or a very expensive split keyboard that is completely out of my reach.
** Jobs:
*** [[https://app.outlier.ai/en/expert][Outlier tasks]]
*** micro1
*** Interesting companies
**** PostCo: really likes open minded developers, who learn rare stuff. says want developers open to learning Ruby on Rails 
**** Hero Plus Group: uses Ruby in Rails. Specifically mentions Flask.
*** https://my.hiredly.com
*** https://www.maukerja.my/
*** https://www.jorawork.com/
*** https://www.ricebowl.my
*** Read about orchestration and automation
*** about Google cloud platforms: Snowflake and Databricks (good to have)
*** maybe SQL and Azure diffs
** Python:
*** understanding [[https://www.geeksforgeeks.org/python-flask-immutablemultidict/][immutablemultidict]], kinda important
*** should we try this SMTP one day? network stuff is always a nightmare
**** [[https://stackoverflow.com/questions/37224073/smtp-auth-extension-not-supported-by-server][SMTP stackoverflow]]
*** A good Flask read on getting data back from DB, from another good site called [[https://python-adv-web-apps.readthedocs.io/en/latest/flask_db2.html][python-adv-web-apps]]
*** not a good bulk update tutorial, but its got exampe of [[https://github.com/sqlalchemy/sqlalchemy/discussions/10537][python tricks]] with lists
*** [[https://www.devdungeon.com/content/run-python-wsgi-web-app-waitress][READ WSGI]]
*** What is this [[https://austinpoor.com/blog/plots-with-jinja][SVG]] experiment. This one is [[https://www.react-graph-gallery.com/build-axis-with-react][from react]]
*** Good [[https://www.peterspython.com/en/blog/sqlalchemy-using-cascade-deletes-to-delete-related-objects][link]] on Python Flask SQLalchemy on cascade-deletes. Especially note the "Database object deletes using ForeignKey ON DELETE CASCADE"
** We are going to publish our site, either in render or fly.io
** Emacs:
*** Convincing others:
**** Non-destructive ways to test Emacs packages:
***** use the try package. Then do the usual use-package, or any normal config for that package you found online.
*** Also try Emacs Application Framework on a new laptop
*** You like trying cool custom personalized Emacs el. This one is useful simpler bookmark, might help a lot in you html editing: [[https://github.com/joodland/bm][here]]
*** we are professional, so we need to make Python SUBMIT to us. [[https://emacs.stackexchange.com/questions/3372/coloring-indentation-levels][Color diff indentation levels]]
*** web-mode-element-wrap must be hydra-ed. We also need to auto-select a whole delimiter. But first try the stackoverflow templating engine trick.
*** We need to learn this Emacs [[https://emacs.stackexchange.com/questions/23810/getting-proper-indentation-for-python-flask-templates][templating indent]] mode thingy
** readng technical software/programming documentation for beginners requires a balance of conceptual and technical description.
** contact African guy again
** Python project notes, jot down the folowing:
*** [[https://skulpt.org/using.html][skulpt is cheat for running python like its javascript]]
** I read about ketamine, psilocybin and alcohol, and also neurotransmitter GABA
*** https://adf.org.au/drug-facts/ketamine/
*** https://www.psychologytoday.com/intl/blog/culturally-speaking/202312/the-magic-behind-the-molecules-psilocybin-vs-alcohol
*** https://my.clevelandclinic.org/health/articles/22857-gamma-aminobutyric-acid-gaba
**** Researchers are still studying the effects of increased level of GABA, for High blood pressure, Insomnia, Diabetes.
*** GABA presence in food:
****  kimchi, miso and tempeh
**** green, black and oolong tea
**** brown rice, soy and adzuki beans, chestnuts, mushrooms, tomatoes, spinach, broccoli, cabbage, cauliflower, Brussels sprouts, sprouted grains and sweet potatoes
** [[https://ringgitplus.com/en/blog/income-tax/how-to-file-your-taxes-for-the-first-time.html][read on how to do e-filing for d first time]]
** wrote a little n Scriabin nocturne
** Read about your Hugo
*** Understand layouts and everything inside (partials, shortcodes, _default)
*** When you replaced your /layouts folder, it fails, simple rename back /_layouts
* Piano (no social media progress)
** You need to buy a stand
* More org notes
** For your recipes
*** Balti
*** some YSAC u did before
*** your chocolate donut (combination of Jamie Olivers friend & Gordon Ramsay)
** For suit, call these numbers for material. (Mention that Sparkle, Lot L-D 1&2, Pudu Plaza, KL recommended these guys)
*** 011 70018033
*** 013 343 2049
*** 018 398 5048
* Address:
** G-12-30, BLOCK G MENTARI COURT Gate 1, Jalan PJS 8/9, Bandar Sunway, 46150 Petaling Jaya, Selangor, Malaysia
