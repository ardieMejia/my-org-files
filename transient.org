#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="zoho_ticket.css" />
#+OPTIONS:  toc:nil num:nil ^:nil


* Reminder
*** remember, you made the FUCKING d minor prelude??
* What to do today:
** Boid, save somewhere:
*** https://people.ece.cornell.edu/land/courses/ece4760/labs/s2021/Boids/Boids.html
**** separation = avoid factor (position aware)
**** alignment = matching factor (not position aware)
**** cohesion = centering factor (position award)
*** https://cs.stanford.edu/people/eroberts/courses/soco/projects/2008-09/modeling-natural-systems/boids.html
*** https://github.com/meznak/boids_py
*** https://github.com/SverreNystad/boids-in-python
*** https://github.com/Nikorasu/PyNBoids
*** https://alan-turing-institute.github.io/rse-course/html/module03_research_data_in_python/03_06_boids.html
*** https://rits.github-pages.ucl.ac.uk/intro-research-prog/morea/lesson17/reading2.html
** Randomizer
#+begin_src lisp

  (make-list 10 2)

  (setq var1 (-cons*
              "Python Pydantic/dataclasses - Python Faker, BEtter s conf .org file, ask the 3 guys who respected u on lang group on part time job"
              "combobulate, especially dealing with nodes"
              "Emacs code compass, BACKUP our data, magit, write a HTTP server"
              "email, CV, also Audiosockets"
              "BOIDS, LIDAR, Python make own ufunc, we do use this link http://programarcadegames.com/index.php?lang=en&chapter=introduction_to_animation with our game"
              "attention is all you need (transformer model), RISC-v, ISA, that original video you watch on Tablet?, Forth"
              "crochet, Hanifas health, code generation (internet of bugs)"
              "read Rust perspective PDF, commityour treesitter.so in user-emacs-directory coz its pretty safe unless your changing architecture completely"
              "GUIX videos, url practices in ~/my-trash/delete/stupidNotion/README.org"
              (append
               (make-list 3 "Qt practice")
               (make-list 2 "boppps")
               (make-list 4 "drawing")
               )
              ))

  (nth (random (length var1)) var1)


  ;; testing our url randomizer


  (defun ardie1()
  (interactive)
  (org-copy-subtree)
  (let (
        (ardie/org-random-list (butlast (split-string (substring-no-properties (current-kill 0)) "\n")))
        )
    (message
     (nth (random (length ardie/org-random-list)) ardie/org-random-list)
     )))

#+end_src
** rsync:
#+begin_quote


rsync -avzh --delete --max-size='400M' --exclude="/.*" --exclude='*/myenv*/' --exclude='*/.git*/' --exclude='*/.git*' /home/ardie/Documents /home/ardie/mybackup2025/

rsync -avzh --delete --max-size='400M' --exclude="/.*" --exclude='*/myenv*/' --exclude='*/.git*/' --exclude='*/.git*' /home/ardie/Desktop /home/ardie/mybackup2025/


rsync -avzh --delete --max-size='400M' --exclude="/.*" --exclude='*/myenv*/' --exclude='*/.git*/' --exclude='*/.git*' /home/ardie/emacs-python-workspace /home/ardie/mybackup2025/

rsync -avzh --delete --max-size='400M' --exclude="/.*" --exclude='*/myenv*/' --exclude='*/.git*/' --exclude='*/.git*' /home/ardie/emacs-gforth-workspace /home/ardie/mybackup2025/

rsync -avzh --delete --max-size='400M' --exclude="/.*" --exclude='*/myenv*/' --exclude='*/.git*/' --exclude='*/.git*' /home/ardie/emacs-go-workspace /home/ardie/mybackup2025/

rsync -avzh --delete --max-size='400M' --exclude="/.*" --exclude='*/myenv*/' --exclude='*/.git*/' --exclude='*/.git*' /home/ardie/emacs-csharp-workspace /home/ardie/mybackup2025/

rsync -avzh --delete --max-size='400M' --exclude="/.*" --exclude='*/myenv*/' --exclude='*/.git*/' --exclude='*/.git*' /home/ardie/Music /home/ardie/mybackup2025/

rsync -avzh --delete --max-size='400M' --exclude="/.*" --exclude='*/myenv*/' --exclude='*/.git*/' --exclude='*/.git*' /home/ardie/my-trash /home/ardie/mybackup2025/



#+end_quote
** Terry:
*** IMPORTANT: we need to add auto-increment column, becoz there is NO guarantee the SQL table will read (SELECT) the same way
*** withdrawal logs should be downloadable
*** admin should be able to download, withdrawal AND upload logs as CSV
*** test again withdrawal and registration of events. Lots of test please surrounding logs
*** we should test it on chrome and firefox
*** correct color scheme for all whatHappened
*** All our pages need their title checked
*** we need to test reset token limit in production, first set it to 20 minutes (1200 sec)
*** At the last stage we want to remove the verbose logging, AND we need to write somewhere how we added logging in Render.
*** we need separate ENV variable for MAIL, especially our app password, NOT SAFE
*** events page need a log delete button, makes it simpler. its the only thing we need.
*** we need to test if users can still proceed properly unsigning claused event, even with @login_required
*** replace our create-member with a create-dummy-member
*** we need to test again members partial download page
*** we always upload using march/update_inc_new
*** relocate svg to its own dir
*** autocomplete="off"
*** we test EVERY endpoint from LOGGEDOUT and NONADMIN states, we first LIST every endpoint before doing so
*** we need to test every endpoint for (user accessing admin endpoints) for satisfaction
*** create admin on startup, also save this reddit link somewhere important, [[https://www.reddit.com/r/flask/comments/117qm79/create_initialadmin_user/][reddit flask create admin on startup]]
**** [[https://stackoverflow.com/questions/72296682/simplest-way-to-securely-distinguish-between-admins-and-other-users-in-flask][validate redirect with python urlparse netloc]]
*** type in Python model, is a built in class, replace!!
*** we need a dummy user to test
*** make sure there are 2 admins
*** rename #tournament_name as someting very unique, its too generic, OR remove all IDs from form-template elements, since that is not used
*** IMPORTANT: check multiple file inputs and see the effect of log in form_submission()
*** we should write this somewhere. Jinja when looping through dict, has NO "awareness" of dict structure by default hence has to resort to jinja tricks like these:
#+begin_export web

{% for membersAnswer in membersAnswers.values() %}
    {% if loop.first %}

	{% for fieldname,answer in membersAnswer.items() %}
	    {% if answer.subgroupId is none %}
		<th class="w-20 p-4 bg-yellow-400">
		    {{ fieldname }}
		</th>
	    {% else %}
		<th class="w-20 p-4 border-x-2 border-yellow-600 bg-yellow-200 font-light">
		    {{ fieldname }}
		</th>
	    {% endif %}
	{% endfor %}



    {% endif %}
{% endfor %}



#+end_export
*** the type, eligibility, important, can be put at top of form or dropdown display
*** create kill all form button that will kill altogether eventFormQuestions, eventFormQuestionAnaswers, and eventFormQuestionSubgroup
*** our admin doesnt session timeout
[[https://www.freekb.net/Article?id=4560][this link]]
** Tests:
*** Put some tests in case of wrongly named CSV files
*** kill event should successfully kill all event descendent data
**** create event
**** create form questions with sub questions
**** get 2 members to register for event and fill form
**** get 1 member to register for event ONLY
**** get 1st memebr to register again
**** KILL event
**** check event, eventmember, formquestion, formquestionsubgroup, formquestionanswers, formquestionanswersdeleted of specific event ID are deleted
*** Test form link when there is no matching event, or no event entirely
*** Insert the exact same name for tournament name, make sure it catches error properly, shoulfd show DB level error message
*** Go thrhough the usual uplaod of Jan Feb and March, check messages
*** Upload Jan Feb March, and try uploading FRL in Feb, it should fail wih "wrong type"
*** Uplaod Jan Feb march, and try updating FRL in Feb, it should correctly updated FIDE. Check 1 members to confirm
*** login as member and update a FIDE
** Write somewhere:
*** replace all request.args.get('mcfid') occurence with current_user.mcfId
*** for uploads
**** [[https://www.pullrequest.com/blog/secure-file-uploads-in-flask-filtering-and-validation-techniques/][secure file uplaods]]
**** [[https://www.geeksforgeeks.org/uploading-and-downloading-files-in-flask/][file upload basics]]
**** [[https://blog.miguelgrinberg.com/post/handling-file-uploads-with-flask][miguel file uploads]]
**** [[https://imagekit.io/blog/how-to-upload-files-in-html/][basic element]]
**** [[https://www.pullrequest.com/blog/secure-file-uploads-in-flask-filtering-and-validation-techniques/][in flask]]
**** [[https://stackoverflow.com/questions/7076042/what-mime-type-should-i-use-for-csv][the mimetypethat should be used]]
**** We need database tracking each uploads.
#+begin_src python

  class File(db.Model):
         id = db.Column(db.Integer, primary_key=True)
         filename = db.Column(db.String(200), nullable=False)
         filepath = db.Column(db.String(300), nullable=False)
         created_at = db.Column(db.DateTime, default=datetime.utcnow)

         def __repr__(self):
             return f"File('{self.filenname}', '{self.filepath}')"

  # and do the usual db.session.add() db.commit()

#+end_src
*** read about Render persistent disks. 
**** navigating and modifying the folders from inside Render Dashboard shell tab
**** [[https://community.render.com/t/files-in-render-disk-are-being-lost-with-starter-service/17440/4][use /data path]]. Being root is fine, it will persistent and be writable
**** [[https://render.com/docs/disks?_gl=1*1c3j8ip*_gcl_au*MTU0Nzc2NjkxOS4xNzQyNDUzMTcw*_ga*NDI4NTk4MDM0LjE3NDI0NTEyMTU.*_ga_QK9L9QJC5N*czE3NDY3MTU2NjEkbzExJGcxJHQxNzQ2NzE1ODkwJGo1JGwwJGgw#transferring-files][persistent disk]]
**** python write to disk
#+begin_src python

  import os

disk_path = "/mnt/data"  # Path to the persistent disk
folder_name = "my_folder"
folder_path = os.path.join(disk_path, folder_name)

try:
    os.makedirs(folder_path, exist_ok=True)
    print(f"Folder '{folder_name}' created successfully at '{folder_path}'.")
except Exception as e:
    print(f"An error occurred: {e}")

#+end_src
**** [[https://magic-wormhole.readthedocs.io/en/latest/welcome.html][magic wormhole to download files]]
**** [[https://www.youtube.com/watch?v=oFrTqQw0_3c][magic wormhole]]
**** [[https://render.com/docs/disks?_gl=1*18deote*_gcl_au*MTU0Nzc2NjkxOS4xNzQyNDUzMTcw*_ga*NDI4NTk4MDM0LjE3NDI0NTEyMTU.*_ga_QK9L9QJC5N*czE3NDY3MTI2NDQkbzEwJGcxJHQxNzQ2NzEzMzQ0JGoyMSRsMCRoMA..][monitoring Render persistent disk]]
**** And why people keep mentioning cron jobs.
*** to deploy our system, from scratch with Admin AND Users. We should have an entry point that searches an admin. If True, redirect to main_page, Else admin_register.html
**** this means we need to create our password reset email delivery system.
**** only then can we finally protect all our end points
** Password resets for Terry's app:
*** [[https://nrodrig1.medium.com/flask-mail-reset-password-with-token-8088119e015b][better example]]
*** The simple example, without anythng special [[https://stackoverflow.com/questions/48983616/reset-the-password-in-flask-python][stackoverflow]]
*** [[https://freelancefootprints.substack.com/p/yet-another-password-reset-tutorial][using FlaskForm]]
*** from [[https://diginantony.medium.com/how-to-create-a-password-reset-in-flask-python-4dd458c22815][medium]] (yuck), and its bad english
*** username and password only no longer support in Google [[https://stackoverflow.com/questions/72478573/how-to-send-an-email-using-python-after-googles-policy-update-on-not-allowing-j][workaround]] 
*** Password reset link from AI, yuck:
#+begin_src python


  from flask import Flask, render_template, request, url_for
  from itsdangerous import URLSafeTimedSerializer, SignatureExpired
  from flask_mail import Mail, Message

  app = Flask(__name__)
  app.config['SECRET_KEY'] = 'your_secret_key' # Replace with a strong, random key
  app.config['MAIL_SERVER'] = 'smtp.example.com'
  app.config['MAIL_PORT'] = 587
  app.config['MAIL_USE_TLS'] = True
  app.config['MAIL_USERNAME'] = 'your_email@example.com'
  app.config['MAIL_PASSWORD'] = 'your_email_password'

  mail = Mail(app)
  s = URLSafeTimedSerializer(app.config['SECRET_KEY'])

  @app.route('/forgot_password', methods=['GET', 'POST'])
  def forgot_password():
      if request.method == 'POST':
          email = request.form['email']
          token = s.dumps(email, salt='password-reset-salt')
          link = url_for('reset_password', token=token, _external=True)
          msg = Message('Password Reset Request', sender='noreply@example.com', recipients=[email])
          msg.body = f"Click this link to reset your password: {link}"
          mail.send(msg)
          return 'Password reset link sent to your email.'
      return render_template('forgot_password.html')

  @app.route('/reset_password/<token>', methods=['GET', 'POST'])
  def reset_password(token):
      try:
          email = s.loads(token, salt='password-reset-salt', max_age=3600) # Token valid for 1 hour
      except SignatureExpired:
          return 'The password reset link is expired.'
      except Exception as e:
           return f'Invalid password reset link. {e}'

      if request.method == 'POST':
          new_password = request.form['new_password']
          # Update password in database for the user with this email
          return 'Password updated successfully.'
      return render_template('reset_password_form.html', token=token)

  if __name__ == '__main__':
      app.run(debug=True)

#+end_src
*** Flask session timeout:
**** [[https://mulgrew.me/posts/session-timeout-flask.html][this one has module g, dont know]]
**** [[https://stackoverflow.com/questions/11783025/is-there-an-easy-way-to-make-sessions-timeout-in-flask][more basic timeout]]
*** for null check, we need feedback for the users
*** remember to convince Terry, that publishing online and locally on laptop are 2 very different things. Online, you have to consider DDOS and everything. Becoz anything can happen when you decide to make something online. Sorry to sound technial but thats it. Of course, modern framework have ways of making it easier, but it still requires reading.
*** Stupid app, we should recheck all of our validations, should be FIDE
*** Security:
** CPP, c++:
*** 
*** we need to think of a way to create a dynamic drag and drop table in qt cpp, as hinted here: [[https://forum.qt.io/topic/65304/table-with-dynamic-input-from-user-qt-c/2][link]]
*** 
** Emacs
*** We need to write a "separator function" that auto-separates a lne based in symbols, example:
#+begin_quote

#include <QMainWindow> -----into-----
#
include
<
QMainWindow
>

#+end_quote
*** Do we need this? Its Emacs hiding text being made professional
#+begin_src emacs-lisp

  (defun ardie/tell-face ()
  (interactive)
  (if
      (equal (face-at-point) nil)
      (setq ardie/current-face 'default)
    (setq ardie/current-face (face-at-point)) 
    )
  (setq our-foreground
	(face-attribute ardie/current-face :foreground))
  (print our-foreground)
  (setq our-background
	(face-attribute 'default :background))  
  (print our-background)
  )

(face-attribute 'font-lock-comment-face :background)



(setq default-background (face-attribute 'default :background)
      default-foreground (face-attribute 'font-lock-comment-face :foreground))

(defun disappear ()
  (interactive)
  (set-face-attribute ardie/current-face nil
              :foreground our-background))

(defun reappear ()
  (interactive)
  (set-face-attribute ardie/current-face nil
              :foreground our-foreground))

#+end_src
*** [[https://www.awseducate.com/student/s/content][AWS Educate]]
**** [[https://console.cloud.google.com/welcome/new?project=steel-fin-473905-g3&authuser=1][GCP google cloud]]
*** Holy SH*T again!!
#+begin_src emacs-lisp

  ;; inspired by https://endlessparentheses.com/ispell-and-abbrev-the-perfect-auto-correct.html



  (defun ardie/test()
  (interactive)
  ;; (print (substring-no-properties (ispell-get-word nil)))
  (if mark-active
      (let ((after (substring-no-properties (buffer-substring (region-beginning)(region-end)))))
	(exchange-point-and-mark)
	(pop-mark)
	(backward-char)
	;; (ispell-get-word nil)
    ;; (print (word-at-point))
	(let ((before (substring-no-properties (word-at-point))))
      (define-abbrev xx-abbrev-table before after)
      ))
  (let ((after (substring-no-properties (word-at-point))))
    (backward-word)
    (backward-char)
    ;; (ispell-get-word nil)
    ;; (print (word-at-point))
    (let ((before (substring-no-properties (word-at-point))))
      (define-abbrev xx-abbrev-table before after)
      ))
    )
  )


(setq xx-abbrev-table (make-abbrev-table ))

(setq local-abbrev-table xx-abbrev-table)

#+end_src
*** we need to read stuff: Emacs autodocumentation on point
**** https://vxlabs.com/2016/04/11/step-by-step-guide-to-c-navigation-and-completion-with-emacs-and-the-clang-based-rtags/
**** https://github.com/dawsers/emacs-qthelp
**** https://fanpengkong.com/post/emacs-ccpp/emacs-ccpp/
**** https://lahtela.me/2020/05/21/setting-up-emacs-for-qt-development.html
**** 
*** This works holy s**t!!
#+begin_src emacs-lisp


  (defun my-mark-line ()
    (interactive)
    "my own mark lien"

    (if mark-active
        (progn
          (exchange-point-and-mark)
          (when
              (not (equal (window-end) (point)))
            (next-line)
            (move-end-of-line 1)
            )
          (exchange-point-and-mark)
          )
      (progn
        (move-beginning-of-line 1)
        (set-mark (point))
        (move-end-of-line 1)
        (exchange-point-and-mark)
        )    
      )

    )

#+end_src
*** We need to use an Ubuntu clipboardmanager with Emacs built in function (rather than Emacs kill ring), and post a video on that
**** No GUI manager:
#+begin_quote

sudo apt update
sudo apt install xclip xsel

#+end_quote
**** and use this:
#+begin_src emacs-lisp

  (require 'clip-mode)
  (setq clip-mode-functions '(clip-insert-selection-at-point)) ; Use for inserting text into Emacs
  (setq clip-selection-at-point-functions '(clip-get-selections)) ; Use for selecting text from Emacs

  ;; Optional: Bind keys for copy and paste (adjust as needed)
  (global-set-key (kbd "C-c y") 'clip-yank) ; Copy and yank the selection
  (global-set-key (kbd "C-c p") 'clip-paste) ; Paste the selection

#+end_src
**** Use a clipboard manager, which works with Emacs built in copy/paste, or create a more advanced function to show history or even paste specific items
#+begin_quote


sudo apt install copyq. 
sudo apt install gpaste. 


#+end_quote
*** We need to make this tool [[https://news.ycombinator.com/item?id=22129636][array-ify]]
*** We need a really cool markdown live preview that works, with eww
#+begin_src emacs-lisp



    (setq browse-url-browser-function 'eww-browse-url)



  ;;     (defun ardie1 ()
  ;;     (interactive)
  ;;     (shell-command-on-region (point-min) 
  ;;                              (point-max) 
  ;;                              "markdown"
  ;;                              "testest")
  ;; (with-current-buffer "testest"
  ;;       (html-mode))
  ;; (with-current-buffer "testest"
  ;;       (impatient-mode))
  ;;     )


  ;; (defun ardie1 ()
  ;; (i
   nteractive)
  (let ((ardie/current-buffer (buffer-name)))
    (shell-command-on-region (point-min) 
                             (point-max) 
                             "markdown"
                             "testest")
    (switch-to-buffer ardie/current-buffer)
    )
  (with-current-buffer "testest"
    (html-mode))
  (with-current-buffer "testest"
    (impatient-mode))


  )

#+end_src
*** We need to makea video about how we manage config safely, when we have multiple Emacs (Eg: 2 versions, and 1 on Windows), minimally without any additional installation, useful if our main config file is quite large
**** The error usually looks like C:\Users\<your_username>\AppData\Roaming\elpa not found
**** 
*** things we should consider wriing in our new YT video (Ultra-ergonomic directional buffer and window navigation, for distraction free writing and coding, conditional on hard-wiring your usage of Ctrl and Alt)
**** ideas for even more "distraction free" writing or coding 
**** as you notice, I also use both left and right Ctrl and Alt, Ctrl-w for example becomes (right)Ctrl-w, becoz thats better ergonomically
**** the hydra keys are mapped to my TODO file, and other important files
**** I have funny leading keys for my hydra
**** I also have hydra for selecting, killing lines, selecting functions, super cool, etc....
**** fuure consideraiont include epoxied flat beads instead of velcro, but I have trouble finding small and flat beads, coz the velcro absorbs dust easily
**** References: https://github.com/emacsorphanage/key-chord and https://www.johndcook.com/blog/2015/02/01/rare-bigrams/
*** Code is Data:
*** we need to watch more Git videos, like [[https://www.youtube.com/watch?app=desktop&v=NXaEImbo-n8&t=920s][this]], and systemcrafters vid on git reflog. Also, we faster diff checks inside Emacs. Make it EPIC!!
*** we need to do a command that copies from current buffer folder into other buffer folder, with confirm prompt from user
*** we need a "code as data" note/file
*** for C++, from this [[https://fanpengkong.com/post/emacs-ccpp/emacs-ccpp/][link]], we use this everyday, with try packages, until we are familiar, DONT use this until we figure which one uses the , we made it shorter these days.
#+begin_src emacs-lisp

  ;; from this point on, we deleted all :ensure t to avoid auto-installation
    ;; lsp
  (use-package lsp-mode
    :hook ((c-mode . lsp)
           (c++-mode . lsp)
           ;; (lsp-mode . lsp-enable-which-key-integration)
           )
    :commands lsp
    ;; :config
    ;; (setq lsp-keymap-prefix "C-c l")
    ;; (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
    ;; (setq lsp-file-watch-threshold 15000)
    )

  ;; (use-package lsp-ui
  ;;   :commands (lsp-ui-mode)
  ;;   :config
  ;;   (setq lsp-ui-doc-enable nil)
  ;;   (setq lsp-ui-doc-delay 0.5)
  ;;   (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
  ;;   (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
  ;;   )

  ;; (use-package lsp-ivy
  ;;   :commands lsp-ivy-workspace-symbol)

  ;; (use-package lsp-treemacs
  ;;   :commands lsp-treemacs-errors-list)

  ;; company
  (use-package company
    :bind ("M-/" . company-complete-common-or-cycle) ;; overwritten by flyspell
    :init (add-hook 'after-init-hook 'global-company-mode)
    :config
    (setq company-show-numbers            t
          company-minimum-prefix-length   1
          company-idle-delay              0.5
          company-backends
          '((company-files          ; files & directory
             company-keywords       ; keywords
             company-capf           ; what is this?
             company-yasnippet)
            (company-abbrev company-dabbrev))))

  (use-package company-box
    :after company
    :hook (company-mode . company-box-mode))

  ;; flycheck
  ;; (use-package flycheck
  ;;   :init (global-flycheck-mode)
  ;;   :config
  ;;   (setq flycheck-display-errors-function
  ;;         #'flycheck-display-error-messages-unless-error-list)

  ;;   (setq flycheck-indication-mode nil))

  ;; (use-package flycheck-pos-tip
  ;;   :after flycheck
  ;;   :config
  ;;   (flycheck-pos-tip-mode))

#+end_src
*** for more Emacs buffer ergonomic magic, also post in on Social Media
#+begin_src lisp

  (progn
    ;; http://xahlee.info/emacs/emacs/emacs_ido_setup.html
    (require 'ido)
    (ido-mode 1)
    ;; show choices vertically

    (setf (nth 2 ido-decorations) "\n")
    (setq ido-enable-flex-matching t)
    (setq ido-default-file-method 'selected-window)
    (setq ido-default-buffer-method 'selected-window)
    (setq max-mini-window-height 0.5))

  (defhydra my-b-hydra 
      (:color purple)
    "my switch to buffer"
    ("b" (progn (ido-switch-buffer)) :exit t))

  ;; ========== global goto1 minor mode for hydras.

  ;;;###autoload
  (define-minor-mode my-b-mode
      "A minor mode so that my key settings override annoying major modes."
    ;; If init-value is not set to t, this mode does not get enabled in
    ;; `fundamental-mode' buffers even after doing \"(global-my-mode 1)\".
    ;; More info: http://emacs.stackexchange.com/q/16693/115
    :init-value t
    :lighter " my-b"
    :keymap (let ((map (make-sparse-keymap)))
              (define-key map
                  ;; (kbd "C-c ;")
                  (kbd "; b")
                'my-b-hydra/body) map))

#+end_src
*** for our new Git worktree trick
#+begin_src lisp



      (global-set-key (kbd "C-<drag-mouse-8>") 'ardie/discard-unstaged-changes)
    (global-set-key (kbd "C-<mouse-8>") 'ardie/discard-unstaged-changes)

  (defun ardie/discard-unstaged-changes ()
    (interactive)

    (let
        ((current-branch (shell-command-to-string "git rev-parse --abbrev-ref HEAD")))
      (if (string-match-p "working" current-branch)
          (if (y-or-n-p "discard changes, sto restart from prev commit? (y or n) ")
              (let ((discard-change-output (shell-command-to-string "git checkout .")))
                (print discard-change-output))
            (print "action canceled")
            )
        (print "not working branch: nothing done")
        )
      )
    )  



  ;; ===== New: under test

  (defun ardie/project-save-all-buffers (&optional proj arg)
    "Save all file-visiting buffers in PROJ without asking.

  Falls back to `project-current' if PROJ is not specified."
    (let* ((proj (or proj (project-current)))
           (buffers (project-buffers (project-current))))
      (dolist (buf buffers)
        ;; Act on base buffer of indirect buffers, if needed.
        (with-current-buffer (or (buffer-base-buffer buf) buf)
          (when (and (buffer-file-name buf)   ; Ignore all non-file-visiting buffers.
                     (buffer-modified-p buf)) ; Ignore all unchanged buffers.
            (let ((buffer-save-without-query t))  ; Save silently.
              (save-buffer arg)))))))
  ;; ===== New: under test
#+end_src
**** Also in our attempt at improving further our powerful shortcuts and "no stash" workflow
*** Also for our rust-ts-mode:
#+begin_src lisp


    ;; ===== we no longer need rust-mode becoz we dont need rust-run
    ;; ===== we digged inside rust-run and discovered (compile) function used
    ;; ===== in most Emacs major programming modes

  ;; WRITE THESE SOME WHERE
  ;; ===== we unbound a key after a mistake
  ;; (fmakunbound 'my-rust-endline)
  ;; (unbind-key (kbd "RET") rust-ts-mode-map)

  (defun my-rust-endline ()
    (interactive)
    (insert ";")
    (newline)
    )

  (add-hook 'rust-mode-hook 'my-rust-endline)
  (add-hook 'rust-ts-mode-hook 'my-rust-endline)


  (define-key rust-ts-mode-map (kbd "C-<return>") 'my-rust-endline)


#+end_src
*** we need ;;h for select all, coz we still use it a lot for example in adding org-insert-structure-template
**** Also need indent-region hydra
*** we change add alternative to ;ii as highlight, coz swiper is messy
*** combobulate links:
**** [[https://sqrtminusone.xyz/configs/emacs/]]
*** we need to create a script that goes uses both next-logical-line and forward-word to copy, but we are only it works in web-mode
*** we need to create a el script fr we-mode that splits tags (once wrapped) into separate lines, or can use forward-sexp into it, think
#+begin_src lisp



  (split-string "<br><br>" ">")


(let ((separator "_"))
  
  (dolist (var1 '("1" "2" "3"))
    (print
     (concat
      var1
      separator
      )
     )
    )
  )

#+end_src
*** we need to really try javascript console in Emacs, we forgot where th link was
*** we should really explore combobulate to explore doing tricks in HTML and JAVSCRIPT, like moving a tree outside parent
**** moving everything outisde of any bracket
**** moving everyghing outside tag
**** but first start the experiment (and as practice), splitting the content into separate lines
*** we have to remap some of our Emacs hudra to mark-sexp. But only for Emacs29. Also we need modify our select line in hydra to save-excursion
*** we need a Emacs feature/mode that provides some cool jquery selector shortcut
*** we should really learn all the paredit tricks
*** there are several ways to exit hydras in fact, some more stable than others (becoz of nested hydras
**** [[https://emacs.stackexchange.com/questions/36597/returning-to-the-parent-hydra][link]]
**** [[https://emacspeak.blogspot.com/2020/09/emacs-paired-commands-efficient.html][repeatable hydra yank]]
*** Company mode readings:
**** [[https://www.reddit.com/r/emacs/comments/q8u2l4/unsetting_return_in_company_mode/][finally disabled company mode completion with better keybindings company-active-map]]
**** [[https://github.com/company-mode/company-mode/issues/640][variuos ideas of use-package for company-mode]]
**** [[https://company-mode.github.io/manual/Getting-Started.html#Usage-Basics][good verbose doc]]
*** We need to learn setting up opening module in Emacs rust. 
*** Read about elpy-rpc, and why do we have an elpy-rpc-buffer, it sounds cool but i dont know what its used for
*** more efficient faster completions for our Python, using this code, for now. We just need to set company-mode properly, and then use configs below from this [[https://github.com/joaotavora/eglot/discussions/1436][link]]
#+begin_src lisp


(use-package company
  :config (setq company-idle-delay 0
		company-minimum-prefix-length 1
		company-tooltip-align-annotations t))
(add-hook 'after-init-hook 'global-company-mode)
  
#+end_src
*** [[https://www.deusinmachina.net/p/tree-sitter-revolutionizing-parsing][parsing tree-sitter link]]
*** [[https://www.masteringemacs.org/article/combobulate-structured-movement-editing-treesitter][another one on tree-sitter]]
*** 
*** [[https://jackjamison.xyz/blog/emacs-garbage-collection/][garbage collection, basically to reduce stuttering]]
*** [[https://kitchingroup.cheme.cmu.edu/blog/2016/11/10/Persistent-highlighting-in-Emacs/][The Kitchin Research Group]]
*** [[https://github.com/rougier/svg-tag-mode][really cool, possible improvement to our html editing]]
*** [[https://github.com/io12/good-scroll.el][supersmooth scrolling]]
*** [[https://github.com/minad/org-modern][org-modern look]]
*** join multi into 1 without spaces
*** [[https://karthinks.com/software/fringe-matters-finding-the-right-difference/][another cool blog]]
** We need to refactor error message of upload, what do we do with all the ID info?? Maybe theres no need for it.
*** create checks for duplicate events
*** we should add timestamp naming for CSV files
*** https://qwiet.ai/hacking-and-securing-python-applications/
** Make sure you share-rate is above 3%
** Instagram, YouTube:
*** Join KLCC groups, Malaysian craft groups, Malaysian art group, Southeast Asian music groups to target more than 100 views by Saturday.
** https://www.interview.micro1.ai/intro/micro1/?candidate=698fa6e4-4849-4b2a-90cf-db3e7d8d3816&ping=ok
** Social media posting:
*** Put this in another post:
**** After many years, Ill have to finally admit, that software engineering is arguably more difficult than even electrical engineering. Becoz of the many abusive elements, which includes lack of structural support. Software Engineering is an ever-shifting field. That alone is fine, arguably "fun", if it wasnt for the fact that software engineering doesnt get the same respect as other engineering, hence we are treated like gig workers. Until, software engineering matures and "grows up", it will continue to be the less-respected field. The problem is also the multitude of newcomers who, but dont treat it with same respect once they land their cushy jobs. So lots of Javascript-only developers, with no respect of the umbrella field (dont blame them, they need to eat too). And so many problematic "ideologies" that have fully conquered many parts of SE in the corporate world, such as "Clean Code" and pervasive Java style OOP. You could argue fields like Electrical Engineering is easier, becoz its stable, bounded by historical terms/culture/ the law of a country (such as how power generators, distribution and transmission of power differ between countries). Electrical Engineering is more "resistant" to change and idiot proof. In contrast, Software Engineers are somehow expected to be simultaneously "flexible" and "locked-in". Simultaneously "independent" yet "hierarchical". Every "expert" in this field has what you call, "survivors bias". Most "experts" also havent really met another "expert". So one "expert" lives and dies by "clean code", while another will not touch it with a 5 feet pole. And many contrasting opinions. (Oh by the way, quite a number of superbly talented developers that dont believe in Clean Code). The average expert also doesnt believe in documentation, but the amount of overly verbose documentation when corporate money decides to back documentation, holy sh*t (think Java docs: overly verbose, lacking in examples).
**** Dont get me wrong, I love programming. But isnt this ridiculus? Software Engineering is just an underfunded art+science+hack+math.
*** The clean code debacle
**** Casey 
**** The odin guy
**** the internet of bugs guy
*** NixOS (and ehem, GUIX..). The most under-rated Linux distro? Its an OS with declarative configuration, atomic upgrades and rollbacks, etc... Its a "stateless OS", basically infinitely "BACKUP-able". Instead of the state of the machine being determined by step-by-step installs and configs. The state of your system is determined entirely by your config. If you used Emacs before, but havent tried NixOS (and GUIX, ehem) its kinda the same thing. Where your config literally determines the current "state". Except its for OSes. Being reproducible makes it great for mass deploys (of the exact system and apps on multiple computers).
*** Niri? Leonardo drawing app? Infinitely and organically spawning depending on your current workflow seems to the future
*** What would you do if you could go back in time, and inform your younger self. I would inform my younger self, that software engineering world is filled with misnomers and misleading terminologies, and if you only "disrespected" it more, you would become so much more epic. But the key in the "real world", is to navigate between corporate projects and personal projects. But not only is it "too late" for that, the notion of "programmers freedom and happiness" is dependent on top of "personal responsibilities", "real religious dogma" and "political stability". Down here, this is pretty much unachievable. 
*** What is an OS?
#+begin_quote

I think what sets Emacs users apart.

Is how there's very little boundary between data, code, buffer, window, etc...

And this lack of boundary, and translating this to power and control over your system, is kinda difficult to duplicate in other tools

So after many years, proficient Emacs users already develop their own workflow.

Alienating them further from people coming from other tools. 

How is this all important?

Well, the statement "Emacs is an entire operating system", didnt sit well with me before.

But now it does, it makes sense. Having read "In the Beginning was the Command Line" by Neal Stephenson.

Beautiful read.

People assume theres some tangible boundary between OSes and the apps inside and computational logic. 

A developer with sufficient understanding (but not necessarily skill) can create his own Operating System if he persists.

He can also make his apps as integrated or loosely bound to the OS as he likes.

Back in the day, when an Apple collapsed, it blacked out like a TV monitor, when Windows crashed, it devolved into endless terminal text.

The very DNA between Apple and Microsoft back then differed more.

But the difference between an OS and a usable app? Thats a social construct.

So in a sense Emacs really is an Operating System. With even far little boundary between all its elements.

https://web.stanford.edu/class/cs81n/command.txt


#+end_quote
*** [[https://app.syncuid.com/syncuid?fbclid=IwY2xjawM-1JJleHRuA2FlbQIxMABicmlkETE5TThhZ3BxR0x0c1VQVmxGAR4M_qdd0WbvJkzNS2aSS2XYAcRlbt3copbZvhLiHV7HNzdLSRt7q3K-CJuKOg_aem_n09274JffIIpXAW7qRl-DA][You must JOIN this group]]
*** Why we have a lot to learn old Emacs tools
*** Using a library also involves understanding how the creators of the library think. At least thats how I try to think when I learn a new language. Most of the time, that just means realizing, the guys who made those libraries love hiding data and functions as private members of some class, making it difficult to actually hunt down hidden logic. Learning library becomes a just as challenging as learning the language.
*** Is it more valuable to master a programming language or know a lot of libraries?
**** Its not a simple binary answer
**** Some libraries are entirely solving problems that are native to the language (e.g. assisting the language’s packaging tools or enhancing the syntax).
**** Even for libraries that are solving general purpose problems, how they interact with the language is important
**** Do you want to write libraries that other people will use? To do that well, you need both a good general understanding of libraries and quite a deep knowledge of the language.
**** People do over-obsess about “language mastery”, but “learn programming, not languages” is the flipside that seems to encourage in people "you dont need to learn anything to contribute to society"
*** With the increase in Python adoption, comes an increase in programmers who will only learn 1 language (and unable to move to another). But we cant stop the march of time. Progress is progress, I asked some random guys at events. and interviews, they say its about flexibility. No, I actually hate that word. "Flexibility" seems to imply, a willingness to sacrifice your "obvious" strengths to pursues a skill that "might" be useful, but theres no guarantee, becoz someone else will have mastered it several years before you. The problem is people no longer knows "why" we learn prog langs anyway. The answer is sometimes quite simple. If you wanna learn more about computer hardware, you will learn more about hardware learning a prog lang, than holding a screwdriver. If you wanna learn about libraries, you will more about libraries by creating a simple library in a language, than mastering an entire library. Soon, people will master a prog lang, acheiving a lot, but still not realizing, they are actually already learning about hardware, liraries, etc. 
*** Why cant we just use technology and AI to bootstrap ourselves to nature. The same way Python can be bootstrapped to the low-level hardware, in a sense that no longer
*** The reason why people get defensive over programming languages, is that already installed systems often need defending. The installed systems are large, really large. And the laws that govern that installed system are written by incompetent folks. Of course, ideally most computer scientists and software engineers with deep knowledge of the system should be writing the laws, but its either one or the other. So people defending Java against all other languages are mostly defending the system, constrained by bloated dinosaur laws.
*** [[https://people.kernel.org/linusw/rust-in-perspective][rust in perspective, AMAZING history of languages]]
**** There are many illuminating quotes inside. But one particular interesting bit. How Niklaus Wirth (some creator of a language called Pascal), both critized C language. Something along the lines of "it gives the appearance of high level language while not behaving like 1". An example is how C has no "awareness" of array sizes and we are dealing with memory addresses. (This explains the weirdness of dealing with C++ in my own project, where appending new table rows, requires you to pass in as arguments, along the data, array size. You dont have this nonsense in Python). Of course, the benefit of having this low level of control, is that the pointer can refer to anything, register/RAM/etc. The kind of control that programmers love, giving some true hacking powers.
*** llamo and llama.cpp enables LLM inference on consumer hardware. Layman terms: it lowers the precision of the floating point numbers used in the model. So me no knowing anything, I decided to try it on my not-really-high-end laptop. Bad idea. It completely halted to a stop.
*** LinkedIn:
**** Any meaningful software or software-adjecent project is often created by 1 man. Saying this makes you sound like some toxic pro-individualistic guy. Taken from Jonathon Blow's own quote, but unfortunately its true. So we have the Leonardo drawing app. When it comes to drawing it completely blows Photoshop out of the water. Professional illustrators are giving good reviews for a Beta version. 1 man vs a software developed by an entire skyscapers worth of community. Im not sure what that says about the state of modern software as a whole, but its saying something substantial. I just dont know how to put in words. "Mind boggling sh*tshow?". But the software is still in Beta. "Mind boggling" is somehow not enough. But a point to consider is that is that Photoshop history came from "Photographers" in mind. But still..
*** Saving Malaysian education with open source tools
*** Meley conservatives have more in common with Right Wingers nut cases in Alabama than they realize. The vibe I get after following Vaush for a long time. Like literally, the only difference is language and skin color. The average Kampung poverty stricken Meley Right Winger thinks of himself, as a "close relative" to some powerful Datuk or or Sultan. Most of these guys who I met in Uni, are always dreaming about "1 day a great Meley bangsawan warrior will lift us from our shackles". They are always waiting for a Meley "Mahdi/saviour/Jesus" to save the Meleys through some prophecy. Most White Americans folks adjacent to the spirit Alabama and Tennessee are also LITERALLY like that. Which is why many of the farmers also voted for Trump (who destroyed farming anyway using Tariffs) the same way victimized yet deluded Meley hardcore kampungers will always vote for a fella/saviour among them. This is not too ridicule, but its important to understand that 'Meleys are victims' but always make the worst decisions for themselves. We need a Meley dictator who forces every single Meley to learn English and math and engineering. Of course, has to combine this with a ultra-cheap higher education policy.
*** [[https://www.youtube.com/shorts/T_VqX573yzg][narc cant read autist]]
*** Dont learn Forth
#+begin_quote

Some prog langs are like read-only languages.
"the reader requires memory of what happened before"
very unreadable
maybe learning Forth is not worth it.
unless youre trapped in a universe with nothing but an embedded device.

#+end_quote
*** Survival of the fittest:
**** Survival of the fittest is ironically the most anti-evolutionary sentiment one can believe in.
**** Why?
**** "Evolution is not survival of the fittest, but the fittest being just good enough for systematic survival"
**** Its an indicator to NOT trust human instinct and feels.
**** It explains abuse within the context of family. 
**** Abusing children has no negative systemic effect.
**** If anything, if the society is sufficiently authoritarian, abusing children can even be systemically beneficial.
**** Becoz societies that are mostly anti-freedom benefits from child abuse, as much as it results in less differences.
**** Humans as a species are geared towards "being just good enough".
**** And that also translates to tolerating injustices among the working class (or even encouraging it)
**** As long as the suffering doesnt reache a threshold where it becomes visibly intolerable, it is permitted.
**** "Survival of the fittest" is ironically, a very pro-religious pro-capitalist sentiment.
**** It fits together with Karma, both sentiments are fundamentally religious.
*** The state of documentation and discoverability is scary
**** The amount of software developers who dont believe in documentation is scary.
**** On the flipside, there are companies/corporates that invest in documentation.
**** And the resulting documentation is also scary.
**** In my last position, the software and programming language was based on a limited license. The official doc of the prog lang and software was tied to the license. You could only access it online
**** The documentation was overly verbose, and the example code were scarce. 
**** Well, in the spirit of "code is documentation", thats already minus 1 point.
**** My sources of doc were Seniors, if they werent busy, and an older documentation that was partly discouraged, becoz they were installed and not found online.
**** More than once, some of the seniors commented, to always refer to the latest documentation.
**** But some of the concepts that helped understanding were specific to this software. Not a prog lang concept. And these could only be found in the older documentation (that were not even online)
**** The general vibe I got was "programming is a nasty business, and all programmers in this field cant write any documentation"
**** And the vibe I got there was, "all the guys who mostly know the system left long ago, and none of them documented anything"
**** But in this instance, there is an added horribleness, learning is at the mercy of everyone whos been there for more than 10 years.
*** Working with a programming library with prog langs as stupid as C++, unfortunately, does involve trying to get into heads of the "library developer".
**** In essence, you gotta kinda mind-read, which is stupid. Becoz most Software Engineers are bad at writing.
*** Programming language as a bootstrap to understand history, culture, etc..
**** Programming language are a powerful unbiased way to understand hardware
*** Something about this: https://blog.codinghorror.com/nobody-hates-software-more-than-software-developers/
*** Post your youtube channel to Peppers Lim sciencey channel, and Johnson "flat chest" 
*** Part 2:Emacs as a Microsoft Word alternative, but why?:
**** We already did flypspell, try, highlight and Hydra
**** We need dial back down on the eLisp
**** No recording in crowd
**** quickly read through the 1st notes
**** Why am I doing this?
**** Who is this for? 
***** The poor Emacs programmer who wants to see what is possible
***** For those who want to transition away from Spacemacs or Doom Emacs
***** Not for those who want to learng how to install Emacs, start with frameworks like Spacemacs, etc
***** But mostly for myself, to document what Ive done so far
***** For those who want an environment that blurs the line between writing and programmer
**** First Im going to show a trick. What did I do just there?
**** Someone on Reddit gave me this article.
**** Mention the article first. But we are going to summarize it. Link in description.
**** https://web.stanford.edu/class/cs81n/command.txt
**** Someone commented on how I jumped right into eLisp, and that seems to scare people. Another friend Imet Zoom, commented on how this is bad way to make money. So instead, if you see me writing eLisp, always assume im going to explain this very soon, and the eLisp, is just to demonstrate the immediate effect of eLisp on your editors behaviour.
**** Why do we use GUI? Computers are much more powerful than most people realize. Modern software are multiple layers of abstraction. That includes your fat and sluggish Microsft Word. Abstraction in this sense isnt just the prog lang of choice. It is various layers of metaphors built on many abstractions of the past, and that layer includes the font you choose, or the QWERTY keyboard you type on.
**** When you talk to programmers and their fascination with the efficiency and power of command line apps. Their arguments are 100% convincing, but its easy to get lost in meaning. GUI's and mouses are not evil, they are meant to be altruistic, to let the average user access the power of the computer. 
**** But the GUI itself is not evil, its a tool. The existing GUI is an abstraction for accessibility. Its a tool that has many flaws, but it works. 
**** Modern Operating Systems and software have successfully fooled people into thinking computers are too complex to learn and enslave for the average mortal, and that terminal apps are too simple to actually be "computers" 
**** Emacs has had a long history of surviving this tug of war between GUI and CLI, and between the many ways of doing many things. And it came out on top by being VERY extensible.
**** What is extensibility?
***** Extensibility is "the quality of being designed to allow the addition of new capabilities or functionality." 
***** But Emacs is not Neovim, its been around for a long time. You could NOT install any package, and still (given years of determination), make Emacs do some crazy tricks. Why? Becoz eLisp.
***** Packages is not what makes Emacs works. Its the other way around, Emacs is what makes the packages works. Why? Becoz eLisp.
***** If I attempted to explain eLisp, I would sound llike a fool.
**** Extensibility is the very DNA of eLisp
**** How I eLisp-ed my way into that cool trick I achieved at the beginning.
**** Is this still scary? Even for those who are Emacs-adjacent? Ok lets try using a package instead.
**** We can try the jinx package which is supposed to be faster.
**** Install both of these packages
**** Both Hunspell and aspell works, but for pesonal dictrionary only aspell worksm, getting it to work completely from Emacs is also quite tricky. So the most sane option.
**** You can forget about over-exploring both of these tools. As you can see, Xah Lee struggle d wit this. 
**** The manual is confusing with the coniguration files and variables, more than most Linux tools, but instead you just use directly like this, and use a to add a new word
#+begin_quote

aspell check ~/sample.txt
# now youll see some text inside .aspell.en.pws

#+end_quote
**** and the only eLisp varible thats important is this
#+begin_src emacs-lisp

  (setq ispell-program-name "/usr/bin/aspell")

#+end_src
**** theres no reliable way to add new words from Emacs
**** So we learnt about eLisp ability to take text as data, and transform our writing experience completely.
**** We also learnt that Jynx package, but making it to work with hunspell is difficult
**** Please consider buying me coffee in the Ko-Fi link in the description. It matters a lot.
*** Part 3, "But what about capitalism?": 
**** We learnt some cool abbrev-mode tricks. And how we can do some great tricks, to make a personalized autocorrect.
**** The strange effect Software Engineering tribalism, and subtle strain of anti-intellectualism down here, in my country.
**** If software engineers in "developed" parts of the world, isnt it much worse?
**** Sometimes, I feel like Im trying so hard to enjoying what Im doing, since software engineering isnt a field thats gonna develop "some maturity"
**** Is this the same feeling everywhere, capitalism and climate change, and AI, and software engineers losing its appeal and respect. And newcomers treating aspect of it like disposable.
**** 3 things from (Internet of bugs), survivors bias, and blub paradox, but also putting Jonathon Blow into a corporate position would be a waste of talent
**** We have to include our eLisp of saving on losing focus. How does Microsoft Word do this? It has a version of you file every 10 minutes. But its not the real file, but AutoRecoverable version.
**** Most of us already know Emacs doesnt save time initially, it only saves time if you actually overcome a certain learning curve.
**** I once worked for this company, that uses Emacs as the IDE and launching point. They used Emacs version 22, which is the last Emacs to not have a package manager. They start their app, by feeding a gis.exe an emacs exe as a parameter, and some app configs. I used a clever workarond that involved installing Emacs with packages on my local, all under 1 folder, and I copied the zipped folder the remote. So there was no messing around with any app files. Everything as done with configs in my personal folder and even the Emacs and all the packages installed was inside a personal folder. Im jobless now, but that has NOTHING to do with how I use Emacs there. It was mostly about me writing some highly opinionated posts about Java and some of the tasks. But here I got some questions.
**** What do you think of companies who are suspicious of hiding their codebase, even when their codebase isnt really that attractive, not well documented, would require a VERY long time to read, its just a messy pile of OOP. And its also written in a VERY rare language (built on top of JVM), so the likelihood of it landing into the hands of competitors is close to nil. Also company that purposely have vague statements, such as, "expected behaviour". 
**** Pre-assessment: What do my viewers already know:
***** They already know hydra
***** 
**** Hydra mode, finally I understand:
#+begin_src emacs-lisp

  (defhydra hydra-a ()
  "a"
  ("b" (progn
         (hydra-b/body)
		     )
   "visit hydra-b")
  ("q" hydra-pop "exit"))



(defhydra hydra-b ()
  "b"
  ("i" forward-line :exit nil)    
  ("q"  "exit" :exit t))

(define-key emacs-lisp-mode-map (kbd "C-c C-h") 'hydra-a/body)


#+end_src
**** Im still unemployed, and I am currently managing this between responsiblities. 
*** this doesnt belong here, CNCF, Linux, open source:
**** https://cloud-native.slack.com/
**** https://clotributor.dev/
*** Why programming languages matter
**** Learning a new language "changes the path of least resistance" - Tom van Cutsem
**** A language that doesnt affect the way you think about programming, is not worth knowing.
**** You cant trust the opinion of others, because of the Blub paradox: theyre satisfied with whatever language they happen to use, because it dictates the way they think about programs. - Paul Graham (Beating The Averages)
**** A programming system has 2 parts. The programming 'environment' is the part thats installed on the computer. The programming 'language' is the part that's installed in the programmer's head. - Brett Victor, Learnable Programming
*** Literally all knitting and crocheting is like programming. Physicists are literally confused by the knitting "science". Yes I tried crocheting. And the "patterns" that crocheters read are also a bit like reading code. The most mind boggling thing, is a non-crocheter would be quite perplexed and joining the dots between crochet (software product) and patterns. Good crocheters can read a cryptic pattern code, and produce something really beautiful.
**** https://www.youtube.com/watch?v=iTLvD6-X8WQ
*** Own your IDE:
**** REMEMBER: we need to do a snippet that makes it look TOO EASY
**** Its easy to get distracted by additional tools. This still happens even when youre using Emacs, so when things get confusing, I just turn off all those autocomplete, and simply rely on highlighting to spend some quiet time just reading the code. Especially useful to forget all that noise. How about all of you? Are there any fallback tools, you end up relying solely on?
**** Another thing I do is close-all-buffers, its such a mind-clearer, an advantage over other IDEs
*** The Hole Mask
**** https://beambuttcare.com/products/the-hole-mask
*** A post on Ubuntu clipboardmanager with Emacs function
*** I learnt C++ QT just to see if I can make anything substantial from it. 
**** I also wanted to learn some OOP just to avoid OOP, I need to understand at least some of the stuff  some "extremist" say what is bad and good about OOP.
**** Borrowing from "Eskil Steenberg" and some of the guys from Better Software Conference, to make something substantial. Becoz making something substantial gives you an understanding of the lang beyond any books.
**** Eskil Steenberg makes a comment along the lines of "C++ is NOT a great language".
**** I used the same Database I created from a previous Flask project. So I already have the data to work with
**** I cant be the only guy learning this, thinking the official documentation is horrible. I tried to avoid AI to actually understand on an intuintive level the concepts and terminology. Avoid using AI as a crutch.
**** I understand more from blogs even, thats how frustrated I am with C++ Qt. If you look at forums with C++ dinosaurs, none of them seem to think the official docs are perfect. I guess programmers really do suck at writing
**** I know that learning to code from books is difficult, but Im still a writer at heart, and I believe in the power of books
**** While learning prog languages made me understand prog langs (actually more like disrespecting other prog langs). Books are what really changed my life (at least a few books).
**** Actually, this post has no beginning or end point. 
**** Ok, heres a point, C++ doesnt seem like a language that is intuitive to learn. Its not like certain math or learning Lisp, where code makes great documentation. Where you reach some point, regardless of the hoops, where the code itself seems to teach you. The language guides itself.
**** In C++, nothing about the language design teaches you about logic, if that makes any sense. You seem to be learning the language before the logic, if that makes any sense. There's nothing beautiful about it. You have to make it or force to be beautiful. You have to impose your will on C++ to make it great.
**** Also, another point, enterprise programmers are even worse than graduate programmers at writing.
**** Heres another, can we stop submitting to enterprise idiots who only judge programmers on how they write requirement documents?
**** Becoz they cant even write simple documentation for programmers who come later, its all just requirement documents that are VERY DISTRACTING to newcomers who want to learn the system better  
*** Maybe I should just give up on trying to publish a static site with Hugo, "markdown is a disaster"
**** [[https://karl-voit.at/2025/08/17/Markdown-disaster/][Markdown Disaster by Karl Voit]]
*** Code is data:
#+begin_src emacs-lisp

  (if (< emacs-major-version 29)
      (setq backup-directory-alist `(("." . ,(concat ardie/all-compute-cfg-dir "emacs_backup_files"))))  
    (setq backup-directory-alist '(("." . "/home/ardie/my-emacs-29-config/emacs_backup_files")))  
    )

#+end_src
*** Singapore National Environment Agency
Singapore has a "National Environment Agency".
And the agents go around catching and fining people smoking in coffeeshops.
Up to 500 SGD.
Having that in a country that is obsessed with car ownership and unregulated capitalism (and maintaining that image) is absolutely HILARIOUS.
"It's like the fire department going into houses fining for overcooked chicken… while the entire forest is on fire behind them."
*** Learning programming languages are enough for a great understanding of computer logic and tech.
**** Prog langs are more than just a "way to talk to computers"
**** They enforce good design at the level language, rather than some "policy" level.
*** Interesting analysis on Harry Potter (https://www.youtube.com/watch?v=wRkHBNT7NQ0)
**** School stories, turns out Harry Potter is more of a "school stories" rather than fantasy. School Stories are genre popular during a period in English literature. It explains the strange romnaticism of school board hierarchies in JK Rowling writings, rather than criticism meant to dismantle hierarchy. This isnt a specifically a JK Rowling issue, as it was common for authors of this genre to write like this, often rarely bringing up issues of toxic hierarchy in boarding schools. (So now, you also know that toxic hierarchy in boarding schools in not necessarily a specific a Meley thing). Charles Dickens writings seems to be the one of the few that goes against this norm, taking a stance against boarding schools corporal punishment, often for very small mistakes. Other authors including JK Rowling romantacize boarding schools.
**** There are many interesting points this video raises as well.
*** Explaining Emacs:
**** REMEMBER: we need to do a snippet that makes it look TOO EASY
**** Emacs, is stateless, in a sense
**** If you were to delete your config, and restart your Emacs, your entire Emacs would be vanilla all over again
**** autocommand detects events such as opening a file. Emacs uses hooks. And there are so many hooks, but the nature of Emacs documentation means its up to you to explore this
**** eerything is a buffer, running a terminal inside Emacs, and the terminal is a buffer. whereas in Neovim, im guessing Neovim is inside terminal
**** to truly take advanage of Emacs, the learning experience is different from Neovim. If you start with only suggested configs with Neovim, and learn only 1 prog lang, you can already do amazing stuff. But with Emacs, you often need to read and explore more, becoz Emacs has so many packages most emacs users havenever heard of 
**** Neovim has much better defaults. Emacs has horrible defaults by FAR
**** Org-Mode is literally what Emacs is all about, in a sense
*** Society and work:
**** Society works because people work without complaining. You are a captive tax farm animal, do you duty and no harm will come to you while being a caged animal for the “farmer” aka religious/biz/political leader who hired thugs with weapons to guard all viable land and natural resources so you must work for one of them in exchange for food and shelter. If you are made poor—deprived of opportunity—you are more likely to become petty, criminal, even violent. Collective prosperity prevents crime, not capitalism, socialism, liberalism, or cops. But with all viable land and natural resources taken, an individual has no choice but to work for and reinforce the very status quo that oppresses them, in exchange for the means of survival. Your will to live is leveraged against you; your best and only years on God’s green Earth are used to build, maintain, and restock ivory towers for people you’ll never meet. Prolife isn’t about life—it’s about social control, the manufacturing of cheap and renewable labor. A life born, especially in desperation, is easily leveraged into a life of economic slavery and ideological subservience. This is why suicide and the right to die have long been criminalized. How else can the elite secure generations of compliant labor? Rebellion is associated with youth not because the young are especially rebellious, but because the rebellious are not allowed to grow old. Economic systems of any kind inevitably pool wealth, create disparity, and lead to conflict—both within borders and beyond. “Work sets you free” because even homelessness is a crime. Religion is primitive government. Government is resource control through politics. And politics? It’s just mediation between the haves and have-nots by the old—deciding who gets what, where, when, how much, and why. If you work for them, you might survive. Work against them, and you suffer.
*** Should I apply? 
**** [[https://compro.miu.edu/?utm_source=facebook&utm_medium=cpc&utm_content=text&utm_campaign=compro&utm_id=120210340864320345_v2_s06_e7201_sp_110&utm_term=120210340864370345&fbclid=IwY2xjawMLi3hleHRuA2FlbQEwAGFkaWQBqyPoGbLBuWJyaWQRMTdOY0lpSzRXbW01aklUMmcBHuTWV54DUfqMu-CpPxs7DLCAuV0srbD9sXm0FAIjSMlbXVa-WZ7VU3B8dSOi_aem_3t2fF1lsPdx-YHLCOJmAxw][masters in computer sciecne]]
*** [[https://northeastbylines.co.uk/news/national-news/flag-fetishism-by-gaslight/][flag fetishism by gas light]]
*** Teaching later:
**** some differences = Neovim has remove keybinding, Emacs has modes, so you usually have overwrites instead of removing
**** autocommand detects events such as opening a file. Emacs uses hooks. And there are so many hooks, but the nature of Emacs documentation means its up to you to explore this
**** eerything is a buffer, running a terminal inside Emacs, and the terminal is a buffer. whereas in Neovim, im guessing Neovim is inside terminal
**** to truly take advanage of Emacs, the learning experience is different from Neovim. If you start with only suggested configs with Neovim, and learn only 1 prog lang, you can already do amazing stuff. But with Emacs, you often need to read and explore more, becoz Emacs has so many packages most emacs users havenever heard of 
**** Neovim has much better defaults. Emacs has horrible defaults by FAR
**** Org-Mode is literally what Emacs is all about, in a sense
*** (1) To clarify a previous post, coz apparently some seniors thought I made things complicated.
**** I posted this a while ago in a Dev group.
**** Some senior said I made things overcomplicated.
**** I guess Im bad at explaining stuff.
**** I guess the point is, I can engage in a long-week coding experiment writing throwaway code. 
**** If Im happy, and its clean code, I can push. Thats a single mouse button, (no need fir git add <file1> <file2>) 
**** if its good code, but I dont wanna show this version upstream in a repo or in front of the team. I can just click a mouse  button, to start everything over.
**** If I want to test its also, a single button.
**** In total, 4 special powerful mouse buttons.
**** And these buttons work regardless of the project or language (thanks to some function and .dir-locals.el for project-specific variable)..
**** Yes, the almost powerful ergonomic feel of a modern IDE without the bloat, and keeping all the custom extensibility.
**** Would take a very long time to achieve this in VSCode Im sure.
**** I dont wanna feel too weird, so this is like balance of Emacs weirdness and modern IDE.
**** Come one, someone. Tell me this make sense without needing to understand my config.
*** Video on my project-agnostic Neovim killer workflow.
**** My attempt at using Emacs like badass
**** I basically combined project local variables (Emacs.dir-locals.el), which is basically directory local variables, with Git worktree and some eLisp functions to create a workflow that consists of a fuzzing branch and working branch
**** As summarized before:
***** each Emacs instance in its own workspace
***** simply switching between Emacs changes branch
***** 1 Emacs for working code,1 Emacs for fuzzing code
***** no more stashing
***** blindly do a "git add ." (triggered by a single mouse button)
***** a single mouse button to run/test the project
**** But the real takeaway is, Im doing  3 mouse button cliks every single time. For every project, regardless of the programming language.
**** And if after a long, maybe long week session of coding, the code works but i dont like how it looks like, there's a fourth button press, that reverts to a previous commit.
**** there's basically more or less 3 things to note in the code:
***** The code needs to be branch-aware
***** The code needs to be commit-aware
**** If Im pushing into production, the repo will see none of this.
**** The whole purpose is to create a furious hacking workflow that is completely hidden from any main branching. And no personal micro-managing of files with Git stashing/etc.
**** If after a long week changes look good enough, I can push it to the repo. If not, I can do a reset with the ardie/back-to-square-one function (which is also bound to a Alt-single mouse button)e
**** Since Git is mostly a toolkit, it doesnt make sense to me, to not abuse it in a personalized way.
**** Useful for: 1 - not wanting push code that works but too embarassing for public 2 - playing with week-long throwaway code, and can start over easily 3 - avoiding pushing unclean commits to control freak team leads ("why is there a space in this commit history? And why are you using single-quotes instead of double quotes?").
*** Post about your worktree discovery:
**** This is a continuation from my previous post
**** Git (vcs) can be a mental challenge. Even when youve mastered, it is still considered a huge mental gear change from code logic. You have to "put your head outside" a bit to go "Git mode". Is important that we learn tools that increase programmer comfort. While Git is mostly a version control tool, it should also not only NOT get in thw way of your personal progress and project, but also make your programmer life more comfortable and cooler. 
**** Welcome to Git Worktree. Logically its just a "branch made into physical folders". But if we work through this site example, we can improve it further. The site shows another way of using Git Worktree, that involves a "fuzzing" branch (kinda like "testing") that will hold most of your work assets/build files. While the site was not entirely clear on where the "main" branch sits in this. I used an extra branch that represents main, "working". So in practice, I just merge "working" back to "main" whenever Im satisfied with my commit amends. So "working" (and of course, main) has only your tracked files, while fuzzing includes the files you dont want commited.
**** I should do a video to increase my YouTube channel views with this trick. But heres the code snippet I use. 
**** Basically, ardie/add-all-amend-commit -> ardie/git-get-rev-parse -> ardie/switch-d
**** In summary:
***** each Emacs instance in its own workspace
***** simply switching between Emacs changes branch
***** 1 Emacs for code,1 Emacs for test/fuzz
***** no more stashing (hopefully)
***** blindly do a "git add ." (triggered by a single shortcut)
***** a single mouse button to run/test the project
**** This is just a sample and a reminder, to not just use Emacs as an "efficient Vim alternative" or just "Vim movements", but use it like a selfish badass. Ergonomics (not just efficiency, that is a misleading term) that extend to project management, knowledge management, and Git workflow.
*** share an improved Python/Emacs class on FB Malaysia teaching group
**** Share on several Malaysia teaching groups again
#+begin_quote

Anyone interested in a free introductory crash course in Emacs? I dont want a price for successive classes, coz Im too afraid of being judged. Hah.
But personally, its just a half excuse for me to meet with weirdos, or to make connections with people who have different ideas. Hahahaha.
I cant be the only guy who uses softwares very very differently.
Contact info also available in the link.
(Note: this is not for seniors. Also ignore the Python description in the link page, I have yet to update it)

#+end_quote
*** Reddit:
**** Ask about how to auto wrap around if else, the same way we can do with sexp
*** Post for RemoteWorkMalaysia:
**** I have been jobless for 3 months. Im extremely hungry for solving problems, if given the opportunity.
**** If you have any suggestions or advice or if you know anyone who would be willing to give me a chance, it would be very much appreciated. 
**** Thank you in advanced for reading this long post 
**** My name is Ardie and I’m currently looking for a job. Some of you remember me from some of my previous posts in the main group about Emacs. If there are any job opportunity that I could apply for or be a part, please do consider me.
**** My project experience includes creating a software module that has been successfully integrated into the production branch of a GIS company. This company client includes an electrical utility company. Other experiences include fixing bugs for a Study Aboard Education platform. I have also made a small Python web app (Flask, TailWind CSS, Javascript) which is kept in sync locally with a Github workflow, so Im very much familiar with Git workflow.
**** My past academic experience includes Bachelor of Information Technology and Masters in Marine Science. My Masters is where I was introduced to Linux during its early years. My programming experience includes Python, Javascript, SQL and some minor C, Fortran as well as Java. My recent experiences include a full-stack Python web app using the Flask framework (utilizing both frontend and backend) as well as a software module for a GIS-based company. Both heavily utilizes SQL. My total experience in programming is more than 8 years, both academic and work related. I am a self-motivated learner, having taught myself various technologies such as web development frameworks, Git version control, Linux, and Emacs. Outside of my professional work, I have recently created a personal Django project.
**** Additionally, I am highly adaptable in my approach to problem-solving. I thrive in environments that promote knowledge sharing and look forward to collaborating with diverse individuals on engaging and innovative projects. Im also an avid reader of filds slightly outside of the technical aspects, such as domain-driven design in programming. If there are any jobs that fit my experience or might benefit additional talent, please PM me for further discussions.
**** If any company or anyone has a project that utilizes Ruby on Rails or other non-mainstream alternatives. Not just looking forward, but rather I will be extremely excited in mastering something new like this.
**** Im not just a quick learner, but i make efforts to expand my familiarity with not just different programming languages but different paradigms, as I have managed to decently master eLisp (Emacs) and Lisp in just 3 years.
*** Post for programming language nerd inMalaysia, EDIT
**** Ive always wanted a split keyboard, the sheer ergonomic game changer. But now Im far too deep into Emacs land, I came up with soe radical tips on Emacs ergonomics in avoiding the famed "Emacs pinky"
**** My Noevim-killer setup. No, Ive got nothing againt Vim or Neovim, and I did not set out to create a Vim-binding alternative, but it feels so ergonomic, it might as well as be. However, I mostly combined this with some unique hacky modifications of my own keyboard, as well as my usage of both sides of Ctrl and Alt. So they might not work for your setup. One of the complaints I hear all the time from YouTubers who are pro Neovim are Emacs pinky's, which is the result of Emacs over-reliance on modifiers like Alt and Ctrl. Ive used Emacs for less than 10 years, so unlike others, I personally feel less attached if Emacs in the future decides to change some default keybindings. Theres always a workarond, by having a "classic bindings". Anyway, long story short, here are some of the clever tricks that I came up with in my journey to a more ergonomic Vim-binding alternative in Emacs:
****     Completely rewire how I use my my keyboard. This ones more like "hardwired" hack. Basically, I always use both hands, and as little pinky as possible. When I am pressing Ctrl-w, instead of using Left hand for both Ctrl and W, I use Right hand for Ctrl and Left hand for w.
****     I experimented with Hydra mode as much as possible. Using Hydra mode, I map shortcuts like ;;t to a Personal learning Diary, and ;;p to my Python Diary, and there are 24 more alphabets to go. If I were to ever code in C or C++, I could remap those modes to exclusively not use those.
****     I use a rather less-known package called Key Chord. Using key chords, I create a directional bigram, that is highly ergonomic. I will explain this in a later post, but simply, instead of Ctrl-_ for Undo, I use qw for Undo, since qw is a key combination rarely used in writing (aka bigram). Since qw is placed on the left (aka directional), left hints on "going back", since its our natural reading direction. These directional key presses are a theme I apply throughout (]\ for opening empty scratch buffer on the right, p[ is for moving to opened window on the right, and [] for moving to opened window on the left, zx for moving to previous buffer, and ,. for moving to next buffer).
****     I paste small Velcro pieces on all my keyboard modifiers, such as Ctrl and Alt with braille-inspired variations, so I can literally just feel the Alt and Ctrl. Similarly applied to by directional bigram key chords. In my current workflow, I no longer look at the keys for Ctrl or Alt, and this braille addition makes my navigation many times more ergonomic. The braille like pieces are not applied everywhere, just 5-7 keys
****     Thats it, so far, my only complain is this Velcro addition makes my keyboard look ugly, my next move might be to epoxy necklace beads to my keyboards for those braille-inspired patterns. Yes its very hacky, but I can almost touch type, not looking at keys most of the time
****     References: https://github.com/emacsorphanage/key-chord and https://www.johndcook.com/blog/2015/02/01/rare-bigrams/
****     Well, its either this or a very expensive split keyboard that is completely out of my reach. 
*** Post something on Linux Fans Group
*** Do you have a cool Python project to share? Actually, I dont have anything cool to say about Python coz I like Python for web dev, but Im not an expert in it, Im obsessed about Emacs. I dont do heavy OOP or data science in Python, but if you do, PyCon2025 is the place to go. Anyway [[https://cfp.pycon.my/pyconmy-2025/cfp][CALL FOR PAPERS!!!!!..]].. Dont worry about advanced topics, I myself like showing off, but I personally prefer casual Python talk, like last years talk on a Filipinos womens experience as the only female in her Python team. Yes, it can be that casual, but the more variety the better (Check out the section for targeting your type of audience: Beginner, Intermediate and Advanced User)
** Jobs:
*** [[https://app.outlier.ai/en/expert][Outlier tasks]]
*** micro1
*** Interesting companies
**** PostCo: really likes open minded developers, who learn rare stuff. says want developers open to learning Ruby on Rails 
**** Hero Plus Group: uses Ruby in Rails. Specifically mentions Flask.
*** https://my.hiredly.com
*** https://www.maukerja.my/
*** https://www.jorawork.com/
*** https://www.ricebowl.my
*** Read about orchestration and automation
*** about Google cloud platforms: Snowflake and Databricks (good to have)
*** maybe SQL and Azure diffs
** Python:
*** understanding [[https://www.geeksforgeeks.org/python-flask-immutablemultidict/][immutablemultidict]], kinda important
*** should we try this SMTP one day? network stuff is always a nightmare
**** [[https://stackoverflow.com/questions/37224073/smtp-auth-extension-not-supported-by-server][SMTP stackoverflow]]
*** A good Flask read on getting data back from DB, from another good site called [[https://python-adv-web-apps.readthedocs.io/en/latest/flask_db2.html][python-adv-web-apps]]
*** not a good bulk update tutorial, but its got exampe of [[https://github.com/sqlalchemy/sqlalchemy/discussions/10537][python tricks]] with lists
*** [[https://www.devdungeon.com/content/run-python-wsgi-web-app-waitress][READ WSGI]]
*** What is this [[https://austinpoor.com/blog/plots-with-jinja][SVG]] experiment. This one is [[https://www.react-graph-gallery.com/build-axis-with-react][from react]]
*** Good [[https://www.peterspython.com/en/blog/sqlalchemy-using-cascade-deletes-to-delete-related-objects][link]] on Python Flask SQLalchemy on cascade-deletes. Especially note the "Database object deletes using ForeignKey ON DELETE CASCADE"
** We are going to publish our site, either in render or fly.io
** Emacs:
*** Convincing others:
**** Non-destructive ways to test Emacs packages:
***** use the try package. Then do the usual use-package, or any normal config for that package you found online.
*** Also try Emacs Application Framework on a new laptop
*** You like trying cool custom personalized Emacs el. This one is useful simpler bookmark, might help a lot in you html editing: [[https://github.com/joodland/bm][here]]
*** we are professional, so we need to make Python SUBMIT to us. [[https://emacs.stackexchange.com/questions/3372/coloring-indentation-levels][Color diff indentation levels]]
*** web-mode-element-wrap must be hydra-ed. We also need to auto-select a whole delimiter. But first try the stackoverflow templating engine trick.
*** We need to learn this Emacs [[https://emacs.stackexchange.com/questions/23810/getting-proper-indentation-for-python-flask-templates][templating indent]] mode thingy
** readng technical software/programming documentation for beginners requires a balance of conceptual and technical description.
** I read about ketamine, psilocybin and alcohol, and also neurotransmitter GABA
*** https://adf.org.au/drug-facts/ketamine/
*** https://www.psychologytoday.com/intl/blog/culturally-speaking/202312/the-magic-behind-the-molecules-psilocybin-vs-alcohol
*** https://my.clevelandclinic.org/health/articles/22857-gamma-aminobutyric-acid-gaba
**** Researchers are still studying the effects of increased level of GABA, for High blood pressure, Insomnia, Diabetes.
*** GABA presence in food:
****  kimchi, miso and tempeh
**** green, black and oolong tea
**** brown rice, soy and adzuki beans, chestnuts, mushrooms, tomatoes, spinach, broccoli, cabbage, cauliflower, Brussels sprouts, sprouted grains and sweet potatoes
** [[https://ringgitplus.com/en/blog/income-tax/how-to-file-your-taxes-for-the-first-time.html][read on how to do e-filing for d first time]]
** Read about your Hugo
*** Understand layouts and everything inside (partials, shortcodes, _default)
*** When you replaced your /layouts folder, it fails, simple rename back /_layouts
* Piano (no social media progress)
** You need to buy a stand
* More org notes
** For your recipes
*** Balti
*** some YSAC u did before
*** your chocolate donut (combination of Jamie Olivers friend & Gordon Ramsay)
** For suit, call these numbers for material. (Mention that Sparkle, Lot L-D 1&2, Pudu Plaza, KL recommended these guys)
*** 011 70018033
*** 013 343 2049
*** 018 398 5048
* Address:
** G-12-30, BLOCK G MENTARI COURT Gate 1, Jalan PJS 8/9, Bandar Sunway, 46150 Petaling Jaya, Selangor, Malaysia
