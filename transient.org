#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="zoho_ticket.css" />
#+OPTIONS:  toc:nil num:nil ^:nil


* Reminder
** Remember what Chomsky said
*** societies ban certain discussions on purpose to  keep the illusion  of freedom of discussion going. 
*** Most reporters worth their salt, take their job as a mostly a joke. They know the illusion of freedom of speech
*** remember, you made the FUCKING d minor prelude??
* What to do today:
** Our terminology REALLY needs branch display in prompt. It also needs more powerful colors
** Boid, save somewhere:
*** https://people.ece.cornell.edu/land/courses/ece4760/labs/s2021/Boids/Boids.html
**** separation = avoid factor (position aware)
**** alignment = matching factor (not position aware)
**** cohesion = centering factor (position award)
*** https://cs.stanford.edu/people/eroberts/courses/soco/projects/2008-09/modeling-natural-systems/boids.html
*** https://github.com/meznak/boids_py
*** https://github.com/SverreNystad/boids-in-python
*** https://github.com/Nikorasu/PyNBoids
*** https://alan-turing-institute.github.io/rse-course/html/module03_research_data_in_python/03_06_boids.html
*** https://rits.github-pages.ucl.ac.uk/intro-research-prog/morea/lesson17/reading2.html
** Randomizer
#+begin_src lisp

  (make-list 10 2)

  (setq var1 (-cons*
              "social media posting, esp. prog lang nerd"
              "combobulate, especially dealing with nodes, search engine history"
              "Emacs backend, BACKUP our data, better Python comint alternaive, also read on COMINT, Git worktree"
              "email, CV, also Audiosockets, GRAB, adding my lightweight Lightroom to Github"
              "audio guy, YouTube copyright algo, BOIDS, LIDAR, Python make own ufunc"
              "music"
              "teach cycling, or something for Hanifas health, stitching mattress, Boeing, crochet, https://www.youtube.com/watch?v=aAxGTnVNJiE"
              "download books that introduce AI and blabla, record class discriminator, record handling, Hoare (1966) discriminated unions, dynmaic polymorphism, software test PDF"
              (append
               (make-list 2 "fiverr")
               (make-list 4 "web")
               (make-list 3 "drawing")
               )
              ))

  (nth (random (length var1)) var1)


#+end_src
** rsync:
#+begin_quote


rsync -avzh --delete --max-size='400M' --exclude="/.*" --exclude='*/myenv*/' --exclude='*/.git*/' --exclude='*/.git*' /home/ardie/Documents /home/ardie/mybackup2025/

rsync -avzh --delete --max-size='400M' --exclude="/.*" --exclude='*/myenv*/' --exclude='*/.git*/' --exclude='*/.git*' /home/ardie/Desktop /home/ardie/mybackup2025/


rsync -avzh --delete --max-size='400M' --exclude="/.*" --exclude='*/myenv*/' --exclude='*/.git*/' --exclude='*/.git*' /home/ardie/emacs-python-workspace /home/ardie/mybackup2025/

rsync -avzh --delete --max-size='400M' --exclude="/.*" --exclude='*/myenv*/' --exclude='*/.git*/' --exclude='*/.git*' /home/ardie/Music /home/ardie/mybackup2025/

rsync -avzh --delete --max-size='400M' --exclude="/.*" --exclude='*/myenv*/' --exclude='*/.git*/' --exclude='*/.git*' /home/ardie/my-trash /home/ardie/mybackup2025/



#+end_quote
** Terry:
*** admin should be able to download, withdrawal AND upload logs as CSV
*** test again withdrawal and registration of events. Lots of test please surrounding logs
*** we should test it on chrome and firefox
*** correct color scheme for all whatHappened
*** All our pages need their title checked
*** we need to test reset token limit in production, first set it to 20 minutes (1200 sec)
*** At the last stage we want to remove the verbose logging, AND we need to write somewhere how we added logging in Render.
*** we need separate ENV variable for MAIL, especially our app password, NOT SAFE
*** events page need a log delete button, makes it simpler. its the only thing we need.
*** we need to test if users can still proceed properly unsigning claused event, even with @login_required
*** replace our create-member with a create-dummy-member
*** we need to test again members partial download page
*** we always upload using march/update_inc_new
*** relocate svg to its own dir
*** autocomplete="off"
*** we test EVERY endpoint from LOGGEDOUT and NONADMIN states, we first LIST every endpoint before doing so
*** we need to test every endpoint for (user accessing admin endpoints) for satisfaction
*** create admin on startup, also save this reddit link somewhere important, [[https://www.reddit.com/r/flask/comments/117qm79/create_initialadmin_user/][reddit flask create admin on startup]]
**** [[https://stackoverflow.com/questions/72296682/simplest-way-to-securely-distinguish-between-admins-and-other-users-in-flask][validate redirect with python urlparse netloc]]
*** type in Python model, is a built in class, replace!!
*** we need a dummy user to test
*** make sure there are 2 admins
*** rename #tournament_name as someting very unique, its too generic, OR remove all IDs from form-template elements, since that is not used
*** IMPORTANT: check multiple file inputs and see the effect of log in form_submission()
*** we should write this somewhere. Jinja when looping through dict, has NO "awareness" of dict structure by default hence has to resort to jinja tricks like these:
#+begin_export web

{% for membersAnswer in membersAnswers.values() %}
    {% if loop.first %}

	{% for fieldname,answer in membersAnswer.items() %}
	    {% if answer.subgroupId is none %}
		<th class="w-20 p-4 bg-yellow-400">
		    {{ fieldname }}
		</th>
	    {% else %}
		<th class="w-20 p-4 border-x-2 border-yellow-600 bg-yellow-200 font-light">
		    {{ fieldname }}
		</th>
	    {% endif %}
	{% endfor %}



    {% endif %}
{% endfor %}



#+end_export
*** the type, eligibility, important, can be put at top of form or dropdown display
*** create kill all form button that will kill altogether eventFormQuestions, eventFormQuestionAnaswers, and eventFormQuestionSubgroup
*** our admin doesnt session timeout
[[https://www.freekb.net/Article?id=4560][this link]]
** Tests:
*** Put some tests in case of wrongly named CSV files
*** kill event should successfully kill all event descendent data
**** create event
**** create form questions with sub questions
**** get 2 members to register for event and fill form
**** get 1 member to register for event ONLY
**** get 1st memebr to register again
**** KILL event
**** check event, eventmember, formquestion, formquestionsubgroup, formquestionanswers, formquestionanswersdeleted of specific event ID are deleted
*** Test form link when there is no matching event, or no event entirely
*** Insert the exact same name for tournament name, make sure it catches error properly, shoulfd show DB level error message
*** Go thrhough the usual uplaod of Jan Feb and March, check messages
*** Upload Jan Feb March, and try uploading FRL in Feb, it should fail wih "wrong type"
*** Uplaod Jan Feb march, and try updating FRL in Feb, it should correctly updated FIDE. Check 1 members to confirm
*** login as member and update a FIDE
** Write somewhere:
*** replace all request.args.get('mcfid') occurence with current_user.mcfId
*** for uploads
**** [[https://www.pullrequest.com/blog/secure-file-uploads-in-flask-filtering-and-validation-techniques/][secure file uplaods]]
**** [[https://www.geeksforgeeks.org/uploading-and-downloading-files-in-flask/][file upload basics]]
**** [[https://blog.miguelgrinberg.com/post/handling-file-uploads-with-flask][miguel file uploads]]
**** [[https://imagekit.io/blog/how-to-upload-files-in-html/][basic element]]
**** [[https://www.pullrequest.com/blog/secure-file-uploads-in-flask-filtering-and-validation-techniques/][in flask]]
**** [[https://stackoverflow.com/questions/7076042/what-mime-type-should-i-use-for-csv][the mimetypethat should be used]]
**** We need database tracking each uploads.
#+begin_src python

  class File(db.Model):
         id = db.Column(db.Integer, primary_key=True)
         filename = db.Column(db.String(200), nullable=False)
         filepath = db.Column(db.String(300), nullable=False)
         created_at = db.Column(db.DateTime, default=datetime.utcnow)

         def __repr__(self):
             return f"File('{self.filenname}', '{self.filepath}')"

  # and do the usual db.session.add() db.commit()

#+end_src
*** read about Render persistent disks. 
**** navigating and modifying the folders from inside Render Dashboard shell tab
**** [[https://community.render.com/t/files-in-render-disk-are-being-lost-with-starter-service/17440/4][use /data path]]. Being root is fine, it will persistent and be writable
**** [[https://render.com/docs/disks?_gl=1*1c3j8ip*_gcl_au*MTU0Nzc2NjkxOS4xNzQyNDUzMTcw*_ga*NDI4NTk4MDM0LjE3NDI0NTEyMTU.*_ga_QK9L9QJC5N*czE3NDY3MTU2NjEkbzExJGcxJHQxNzQ2NzE1ODkwJGo1JGwwJGgw#transferring-files][persistent disk]]
**** python write to disk
#+begin_src python

  import os

disk_path = "/mnt/data"  # Path to the persistent disk
folder_name = "my_folder"
folder_path = os.path.join(disk_path, folder_name)

try:
    os.makedirs(folder_path, exist_ok=True)
    print(f"Folder '{folder_name}' created successfully at '{folder_path}'.")
except Exception as e:
    print(f"An error occurred: {e}")

#+end_src
**** [[https://magic-wormhole.readthedocs.io/en/latest/welcome.html][magic wormhole to download files]]
**** [[https://www.youtube.com/watch?v=oFrTqQw0_3c][magic wormhole]]
**** [[https://render.com/docs/disks?_gl=1*18deote*_gcl_au*MTU0Nzc2NjkxOS4xNzQyNDUzMTcw*_ga*NDI4NTk4MDM0LjE3NDI0NTEyMTU.*_ga_QK9L9QJC5N*czE3NDY3MTI2NDQkbzEwJGcxJHQxNzQ2NzEzMzQ0JGoyMSRsMCRoMA..][monitoring Render persistent disk]]
**** And why people keep mentioning cron jobs.
*** to deploy our system, from scratch with Admin AND Users. We should have an entry point that searches an admin. If True, redirect to main_page, Else admin_register.html
**** this means we need to create our password reset email delivery system.
**** only then can we finally protect all our end points
** Password resets for Terry's app:
*** [[https://nrodrig1.medium.com/flask-mail-reset-password-with-token-8088119e015b][better example]]
*** The simple example, without anythng special [[https://stackoverflow.com/questions/48983616/reset-the-password-in-flask-python][stackoverflow]]
*** [[https://freelancefootprints.substack.com/p/yet-another-password-reset-tutorial][using FlaskForm]]
*** from [[https://diginantony.medium.com/how-to-create-a-password-reset-in-flask-python-4dd458c22815][medium]] (yuck), and its bad english
*** username and password only no longer support in Google [[https://stackoverflow.com/questions/72478573/how-to-send-an-email-using-python-after-googles-policy-update-on-not-allowing-j][workaround]] 
*** Password reset link from AI, yuck:
#+begin_src python


  from flask import Flask, render_template, request, url_for
  from itsdangerous import URLSafeTimedSerializer, SignatureExpired
  from flask_mail import Mail, Message

  app = Flask(__name__)
  app.config['SECRET_KEY'] = 'your_secret_key' # Replace with a strong, random key
  app.config['MAIL_SERVER'] = 'smtp.example.com'
  app.config['MAIL_PORT'] = 587
  app.config['MAIL_USE_TLS'] = True
  app.config['MAIL_USERNAME'] = 'your_email@example.com'
  app.config['MAIL_PASSWORD'] = 'your_email_password'

  mail = Mail(app)
  s = URLSafeTimedSerializer(app.config['SECRET_KEY'])

  @app.route('/forgot_password', methods=['GET', 'POST'])
  def forgot_password():
      if request.method == 'POST':
          email = request.form['email']
          token = s.dumps(email, salt='password-reset-salt')
          link = url_for('reset_password', token=token, _external=True)
          msg = Message('Password Reset Request', sender='noreply@example.com', recipients=[email])
          msg.body = f"Click this link to reset your password: {link}"
          mail.send(msg)
          return 'Password reset link sent to your email.'
      return render_template('forgot_password.html')

  @app.route('/reset_password/<token>', methods=['GET', 'POST'])
  def reset_password(token):
      try:
          email = s.loads(token, salt='password-reset-salt', max_age=3600) # Token valid for 1 hour
      except SignatureExpired:
          return 'The password reset link is expired.'
      except Exception as e:
           return f'Invalid password reset link. {e}'

      if request.method == 'POST':
          new_password = request.form['new_password']
          # Update password in database for the user with this email
          return 'Password updated successfully.'
      return render_template('reset_password_form.html', token=token)

  if __name__ == '__main__':
      app.run(debug=True)

#+end_src
*** Flask session timeout:
**** [[https://mulgrew.me/posts/session-timeout-flask.html][this one has module g, dont know]]
**** [[https://stackoverflow.com/questions/11783025/is-there-an-easy-way-to-make-sessions-timeout-in-flask][more basic timeout]]
*** for null check, we need feedback for the users
*** Admin from AI, yuck:
#+begin_src python

    from flask import Flask, redirect, url_for
    from flask_login import LoginManager, UserMixin, login_required, current_user

  app = Flask(__name__)
  app.config['SECRET_KEY'] = 'your_secret_key'  # Replace with a strong, randomly generated key
  login_manager = LoginManager()
  login_manager.init_app(app)

  class User(UserMixin):
      def __init__(self, id, username, password, is_admin=False):
          self.id = id
          self.username = username
          self.password = password
          self.is_admin = is_admin

      def get_id(self):
          return str(self.id)

  # Example user data (replace with database interaction)
  users = {
      1: User(1, 'admin', 'adminpass', is_admin=True),
      2: User(2, 'user', 'userpass')
  }

  @login_manager.user_loader
  def load_user(user_id):
      return users.get(int(user_id))

  @app.route('/admin')
  @login_required
  def admin_page():
      if current_user.is_admin:
          return 'Welcome, Admin!'
      else:
          return redirect(url_for('home_page'))

  @app.route('/')
  def home_page():
      return 'Welcome, User!'

  if __name__ == '__main__':
      app.run(debug=True)
      
#+end_src
*** to split our app.py later on before it becomes more thn 5000 lines, from AI (yuck):
#+begin_src python

  # auth.py ==================================================
    from flask import Blueprint

    auth_bp = Blueprint('auth', __name__, url_prefix='/auth')

    @auth_bp.route('/login')
    def login():
        return 'Login Page'

    @auth_bp.route('/register')
    def register():
        return 'Register Page'

    # blog.py ==================================================
    from flask import Blueprint

    blog_bp = Blueprint('blog', __name__, url_prefix='/blog')

    @blog_bp.route('/')
    def index():
        return 'Blog Index'

    @blog_bp.route('/create')
    def create():
        return 'Create New Post'

    # app.py ==================================================
    from flask import Flask
    from auth import auth_bp
    from blog import blog_bp

    app = Flask(__name__)

    app.register_blueprint(auth_bp)
    app.register_blueprint(blog_bp)

    if __name__ == '__main__':
        app.run(debug=True)

#+end_src
*** remember to convince Terry, that publishing online and locally on laptop are 2 very different things. Online, you have to consider DDOS and everything. Becoz anything can happen when you decide to make something online. Sorry to sound technial but thats it. Of course, modern framework have ways of making it easier, but it still requires reading.
*** Stupid app, we should recheck all of our validations, should be FIDE
*** Security:
** Emacs:
*** Write this as function to get variable/identifier as a hydra, in Python, but also, write as Doc somewhere
#+begin_src lisp


  ;; (treesit-node-text NODE &optional NO-PROPERTY)
  ;; (treesit-node-at POS &optional PARSER-OR-LANG NAMED)
  ;; (treesit-node-string NODE)


  (global-set-key (kbd "C-<drag-mouse-8>") 'ardie/fun-treesit-get-var)
  (global-set-key (kbd "C-<mouse-8>") 'ardie/fun-treesit-get-var)


  (defun ardie/fun-treesit-get-var()
    (interactive)
    (if (treesit-parser-list)
        (if (equal (treesit-node-string (treesit-node-at (point))) "(identifier)")
            (let ((killed-text (treesit-node-text (treesit-node-at (point)) t))
                  (our-node (treesit-node-at (point))))
              (kill-new killed-text)
              (combobulate--mark-node our-node)
              ;; (append-to-buffer "*ardie-scratch*" "\n" )
	    
              (with-current-buffer "*ardie-scratch*" 	(end-of-buffer)(insert "\n"))
              (append-to-buffer "*ardie-scratch*" (region-beginning) (region-end))
              (message (format "appended to ardie-scratch: %s" killed-text))
              ;; (with-current-buffer "*ardie-scratch*" (insert "\n"))
              (deactivate-mark))	  
            (print "not an identifier/variable"))
        (print "buffer has no parser")))
#+end_src
*** for more Emacs buffer ergonomic magic, also post in on Social Media
#+begin_src lisp

  (progn
    ;; http://xahlee.info/emacs/emacs/emacs_ido_setup.html
    (require 'ido)
    (ido-mode 1)
    ;; show choices vertically
  
    (setf (nth 2 ido-decorations) "\n")
    (setq ido-enable-flex-matching t)
    (setq ido-default-file-method 'selected-window)
    (setq ido-default-buffer-method 'selected-window)
    (setq max-mini-window-height 0.5))

  (defhydra my-b-hydra 
      (:color purple)
    "my switch to buffer"
    ("b" (progn (ido-switch-buffer)) :exit t))

  ;; ========== global goto1 minor mode for hydras.

  ;;;###autoload
  (define-minor-mode my-b-mode
      "A minor mode so that my key settings override annoying major modes."
    ;; If init-value is not set to t, this mode does not get enabled in
    ;; `fundamental-mode' buffers even after doing \"(global-my-mode 1)\".
    ;; More info: http://emacs.stackexchange.com/q/16693/115
    :init-value t
    :lighter " my-b"
    :keymap (let ((map (make-sparse-keymap)))
              (define-key map
                  ;; (kbd "C-c ;")
                  (kbd "; b")
                'my-b-hydra/body) map))

#+end_src
*** we need to replace all ;;y with ;;p, make my-symbol avaialble
*** we need ;;h for select all, coz we still use it a lot for example in adding org-insert-structure-template
**** Also need indent-region hydra
*** we change add alternative to ;ii as highlight, coz swiper is messy
*** combobulate links:
**** [[https://sqrtminusone.xyz/configs/emacs/]]
*** we need to create a script that goes uses both next-logical-line and forward-word to copy, but we are only it works in web-mode
*** we need to create a el script fr we-mode that splits tags (once wrapped) into separate lines, or can use forward-sexp into it, think
#+begin_src lisp



  (split-string "<br><br>" ">")


(let ((separator "_"))
  
  (dolist (var1 '("1" "2" "3"))
    (print
     (concat
      var1
      separator
      )
     )
    )
  )

#+end_src
*** we need to really try javascript console in Emacs, we forgot where th link was
*** we should really explore combobulate to explore doing tricks in HTML and JAVSCRIPT, like moving a tree outside parent
**** moving everything outisde of any bracket
**** moving everyghing outside tag
**** but first start the experiment (and as practice), splitting the content into separate lines
*** we have to remap some of our Emacs hudra to mark-sexp. But only for Emacs29. Also we need modify our select line in hydra to save-excursion
*** we need a Emacs feature/mode that provides some cool jquery selector shortcut
*** we should really learn all the paredit tricks
*** there are several ways to exit hydras in fact, some more stable than others (becoz of nested hydras
**** [[https://emacs.stackexchange.com/questions/36597/returning-to-the-parent-hydra][link]]
**** [[https://emacspeak.blogspot.com/2020/09/emacs-paired-commands-efficient.html][repeatable hydra yank]]
*** warning level for Emacs config setup, not sure if we ever need it:
**** [[https://emacs.stackexchange.com/questions/78800/how-to-disable-automatic-appearance-of-warnings-buffer-in-emacs][warning levels]]
*** combobulate:
**** [[https://github.com/mickeynp/combobulate][main repo]]
***** 
*** Company mode readings:
**** [[https://www.reddit.com/r/emacs/comments/q8u2l4/unsetting_return_in_company_mode/][finally disabled company mode completion with better keybindings company-active-map]]
**** [[https://github.com/company-mode/company-mode/issues/640][variuos ideas of use-package for company-mode]]
**** [[https://company-mode.github.io/manual/Getting-Started.html#Usage-Basics][good verbose doc]]
*** Read about Bookmarks+ or some other way of preserving state between session
*** We need to learn setting up opening module in Emacs rust. 
*** Read about elpy-rpc, and why do we have an elpy-rpc-buffer, it sounds cool but i dont know what its used for
*** more efficient faster completions for our Python, using this code, for now. We just need to set company-mode properly, and then use configs below from this [[https://github.com/joaotavora/eglot/discussions/1436][link]]
#+begin_src lisp


(use-package company
  :config (setq company-idle-delay 0
		company-minimum-prefix-length 1
		company-tooltip-align-annotations t))
(add-hook 'after-init-hook 'global-company-mode)
  
#+end_src
*** [[https://www.deusinmachina.net/p/tree-sitter-revolutionizing-parsing][parsing tree-sitter link]]
*** [[https://www.masteringemacs.org/article/combobulate-structured-movement-editing-treesitter][another one on tree-sitter]]
*** 
*** [[https://jackjamison.xyz/blog/emacs-garbage-collection/][garbage collection, basically to reduce stuttering]]
*** [[https://kitchingroup.cheme.cmu.edu/blog/2016/11/10/Persistent-highlighting-in-Emacs/][The Kitchin Research Group]]
*** [[https://github.com/rougier/svg-tag-mode][really cool, possible improvement to our html editing]]
*** [[https://github.com/io12/good-scroll.el][supersmooth scrolling]]
*** [[https://github.com/minad/org-modern][org-modern look]]
*** join multi into 1 without spaces
*** [[https://karthinks.com/software/fringe-matters-finding-the-right-difference/][another cool blog]]
** Python web app security practices:
** RUST:
*** For those that missed the session, simply go to [[https://github.com/rust-malaysia/bevy_workshop][github repo of bevy malaysia]], copy src, clear out obstacles.rs, and start from there. It should be the same thing.
*** Some recommended (please go through them, defo begging you...) resources:
**** Install Rust - Rust Programming Language (A must!)
****     Official Introduction to Bevy (Highly recommended!)
****     What is an ECS? feat. Bevy and Rust (Entity-Component-System, a core concept in Bevy, explained in a video by Chris Biscardi)
****     Game Engine Of The Future - YouTube (A very fun and nice introduction to the Bevy engine by TanTan! Definitely not trying to convince you to switch over to Bevy for your future projects hahaha)
****     Bevy Playground (Try Bevy on your browser now!!!! Highly recommended!)
**** Contact us organizers at
****  +60164410216 (Ivan Tham)
****     +60129851338 (Jeffrey Lean)
****     +60173389100 (Nixon)
**** [[https://t.me/+dF46Fly4A_BjOTJl][subscribe for more events]]
****  https://rust-malaysia.github.io/meetup/
**** [[https://www.youtube.com/playlist?list=PL85XCvVPmGQh3V0Pz-_xFm6VAUTR4aLUw][YouTube]]
**** [[https://nixon-voxell.itch.io/lumina][game1]]
**** [[https://github.com/nixon-voxell/lumina][game2]]
**** [[https://bevyengine.org/learn/quick-start/getting-started/setup/][install bevy]]
**** [[https://www.rust-lang.org/tools/install][install rust]]
**** [[https://bevyengine.org/learn/quick-start/introduction/][introduction to bevy]]
**** [[https://www.youtube.com/watch?v=AirfWcVOEHw][Entity Component System]]
**** [[https://www.youtube.com/watch?v=sfFQrhajs6o][YouTube introduction]]
**** [[https://learnbevy.com/playground][bevy playground]]
** Present your Emacs teaching class inside University of Malaya International students main discussion group. Gauge reaction
*** kill_events (thats with an S!!), we only did the kill_event/<int:id>
**** https://snyk.io/blog/secure-python-flask-applications/
*** try save-excursion and return in quit for select-hydra. Or the similar trick in your word-hydra
** We need to refactor error message of upload, what do we do with all the ID info?? Maybe theres no need for it.
*** create checks for duplicate events
*** we should add timestamp naming for CSV files
*** https://qwiet.ai/hacking-and-securing-python-applications/
**** 
** Make sure you share-rate is above 3%
** Post in Pythons Group Malaysia, your willingness to work for Django, having experience in Flask and used Django for a side project.
** Instagram, YouTube:
*** Join KLCC groups, Malaysian craft groups, Malaysian art group, Southeast Asian music groups to target more than 100 views by Saturday.
** https://www.interview.micro1.ai/intro/micro1/?candidate=698fa6e4-4849-4b2a-90cf-db3e7d8d3816&ping=ok
** Social media posting:
*** Reddit:
**** Ask about how to auto wrap around if else, the same way we can do with sexp
*** Post for RemoteWorkMalaysia:
**** I have been jobless for 3 months. Im extremely hungry for solving problems, if given the opportunity.
**** If you have any suggestions or advice or if you know anyone who would be willing to give me a chance, it would be very much appreciated. 
**** Thank you in advanced for reading this long post 
**** My name is Ardie and I’m currently looking for a job. Some of you remember me from some of my previous posts in the main group about Emacs. If there are any job opportunity that I could apply for or be a part, please do consider me.
**** My project experience includes creating a software module that has been successfully integrated into the production branch of a GIS company. This company client includes an electrical utility company. Other experiences include fixing bugs for a Study Aboard Education platform. I have also made a small Python web app (Flask, TailWind CSS, Javascript) which is kept in sync locally with a Github workflow, so Im very much familiar with Git workflow.
**** My past academic experience includes Bachelor of Information Technology and Masters in Marine Science. My Masters is where I was introduced to Linux during its early years. My programming experience includes Python, Javascript, SQL and some minor C, Fortran as well as Java. My recent experiences include a full-stack Python web app using the Flask framework (utilizing both frontend and backend) as well as a software module for a GIS-based company. Both heavily utilizes SQL. My total experience in programming is more than 8 years, both academic and work related. I am a self-motivated learner, having taught myself various technologies such as web development frameworks, Git version control, Linux, and Emacs. Outside of my professional work, I have recently created a personal Django project.
**** Additionally, I am highly adaptable in my approach to problem-solving. I thrive in environments that promote knowledge sharing and look forward to collaborating with diverse individuals on engaging and innovative projects. Im also an avid reader of filds slightly outside of the technical aspects, such as domain-driven design in programming. If there are any jobs that fit my experience or might benefit additional talent, please PM me for further discussions.
**** If any company or anyone has a project that utilizes Ruby on Rails or other non-mainstream alternatives. Not just looking forward, but rather I will be extremely excited in mastering something new like this.
**** Im not just a quick learner, but i make efforts to expand my familiarity with not just different programming languages but different paradigms, as I have managed to decently master eLisp (Emacs) and Lisp in just 3 years.
*** Post for programming language nerd inMalaysia, EDIT
**** Ive always wanted a split keyboard, the sheer ergonomic game changer. But now Im far too deep into Emacs land, I came up with soe radical tips on Emacs ergonomics in avoiding the famed "Emacs pinky"
**** My Noevim-killer setup. No, Ive got nothing againt Vim or Neovim, and I did not set out to create a Vim-binding alternative, but it feels so ergonomic, it might as well as be. However, I mostly combined this with some unique hacky modifications of my own keyboard, as well as my usage of both sides of Ctrl and Alt. So they might not work for your setup. One of the complaints I hear all the time from YouTubers who are pro Neovim are Emacs pinky's, which is the result of Emacs over-reliance on modifiers like Alt and Ctrl. Ive used Emacs for less than 10 years, so unlike others, I personally feel less attached if Emacs in the future decides to change some default keybindings. Theres always a workarond, by having a "classic bindings". Anyway, long story short, here are some of the clever tricks that I came up with in my journey to a more ergonomic Vim-binding alternative in Emacs:
****     Completely rewire how I use my my keyboard. This ones more like "hardwired" hack. Basically, I always use both hands, and as little pinky as possible. When I am pressing Ctrl-w, instead of using Left hand for both Ctrl and W, I use Right hand for Ctrl and Left hand for w.
****     I experimented with Hydra mode as much as possible. Using Hydra mode, I map shortcuts like ;;t to a Personal learning Diary, and ;;p to my Python Diary, and there are 24 more alphabets to go. If I were to ever code in C or C++, I could remap those modes to exclusively not use those.
****     I use a rather less-known package called Key Chord. Using key chords, I create a directional bigram, that is highly ergonomic. I will explain this in a later post, but simply, instead of Ctrl-_ for Undo, I use qw for Undo, since qw is a key combination rarely used in writing (aka bigram). Since qw is placed on the left (aka directional), left hints on "going back", since its our natural reading direction. These directional key presses are a theme I apply throughout (]\ for opening empty scratch buffer on the right, p[ is for moving to opened window on the right, and [] for moving to opened window on the left, zx for moving to previous buffer, and ,. for moving to next buffer).
****     I paste small Velcro pieces on all my keyboard modifiers, such as Ctrl and Alt with braille-inspired variations, so I can literally just feel the Alt and Ctrl. Similarly applied to by directional bigram key chords. In my current workflow, I no longer look at the keys for Ctrl or Alt, and this braille addition makes my navigation many times more ergonomic. The braille like pieces are not applied everywhere, just 5-7 keys
****     Thats it, so far, my only complain is this Velcro addition makes my keyboard look ugly, my next move might be to epoxy necklace beads to my keyboards for those braille-inspired patterns. Yes its very hacky, but I can almost touch type, not looking at keys most of the time
****     References: https://github.com/emacsorphanage/key-chord and https://www.johndcook.com/blog/2015/02/01/rare-bigrams/
****     Well, its either this or a very expensive split keyboard that is completely out of my reach. 
*** we need to write about [[https://www.critique-musicale.com/bachen.htm][Bach]] being over-rated
*** Post something on Linux Fans Group
*** Reddit: Anyone knows how to "combobulate" the string inside app.config[], preferably without the quotes. Since combobulate maintains "structure", this would be doable. I know how tod o it in html using web-mode, but I cant do it in Python, although combobulate works normally (such as combobulate-python-envelope-nest-if-else). If this question sounds very general, maybe you can guide me to an article/blog on configs that combobulate a lot (Ive already read some of MasteringEmacs)
*** So I created a lightweight alternative to Photoshop Lightroom. Edits a single photo, and applies when you want the same "stacked" effect to batch photos. The real advantange of this, is tht its  incredibly lightweight, no need for 1-10 minutes loading an app. Just a mere seconds. 
*** Do you have a cool Python project to share? Actually, I dont have anything cool to say about Python coz I like Python for web dev, but Im not an expert in it, Im obsessed about Emacs. I dont do heavy OOP or data science in Python, but if you do, PyCon2025 is the place to go. Anyway [[https://cfp.pycon.my/pyconmy-2025/cfp][CALL FOR PAPERS!!!!!..]].. Dont worry about advanced topics, I myself like showing off, but I personally prefer casual Python talk, like last years talk on a Filipinos womens experience as the only female in her Python team. Yes, it can be that casual, but the more variety the better (Check out the section for targeting your type of audience: Beginner, Intermediate and Advanced User)
*** So basically, tree-sitter has something to do with concrete syntax tree which is slightly related to abstract syntax tree. Basically, its what the compiler usually deals with. But why is such a big deal these days, is becoz these things are no longer secret these days, while historically, compiler secrets are guarded by corporations with jealousy. 
**** A good article to read on combobulate and tree-sitter is on MasteringEmacs website. 
**** Anyway, the great thing about combobulate, is that if you managed to setup tree-sitter properly (think: tree-sitter is the "math" behind combobulate), its actually in the background never interfering with your current workflow.
**** I use Hydra-mode a lot in my workflow. Makes for some really cool and pleasant editing experience. (I radically use semicolon as "leading key" replacing Ctrl and Alt for a few editing and buffer navigation stuff, my Hydra file is the messiest, but its the most fun to add).
**** I then simply added without a second thought another Hydra head that uses (combobulate-python-envelope-nest-if-else). Now ;;sf selects n lines and wraps in if..else with indentation.
**** Why this is such a big deal is that, some old timer eLisp coders use a lot of cool paredit tricks (powerful shortcuts moving logic around, by just moving parenthesis). And combobulate seeks to emulate this in other languages.
**** Just my writeup, hoping to inspire others (or inviting criticism).
*** I hold by me view that most programming books are usually rubbish. And even for the Rust language is the same. I learnt more stuff in just a few hours at an introducory class in APU event, than searching for the better book. 
**** Here's the thing, most Rust books spend the 1st few chapters discussing high level stuff, and it turns out, from the APU (Asia Pacific Unviersity) class, the low level stuff is important to make that important fundamental leap. Why? Becoz Rust is quite different from other languages, that learning its datatypes, a little about the compiler, and design choices concept (something like between mutability and immutability, but also as it relates to copy and non-copy types) kinda is rewarding.
**** Its unlikely that most who learn Rust are starting at the complete beginning. Maybe in a few Unis. But when youre learning programming at school, your most likely learning the same syllabus that place did for years. So youre learning C or C++, or even skip to Python completely. But for most, your learning Rust, becoz you want to know what the fuss is all about. But instead, most Rust books, they dont start "X language vs Y language", or datatypes and why it matters. They start by some high level concept. Huh? Why do that, when beginners can just use Python. And even in books that are kinda good, the examples are just not that great.
**** I guess programmers are still bad at communication, even with all that big brain.
**** Maybe theyre doing this to advertise Rust as much as possible to programmers who dont want to even consider Rust. 
*** ask everywhere, is it normal for SD cards to fail constantly?
*** SIMPLIFICATION: Its easy to get distracted by additional tools. This still happens even when youre using Emacs, so when things get confusing, I just turn off all those autocomplete, and simply rely on highlighting to spend some quiet time just reading the code. Especially useful to forget all that noise. How about all of you? Are there any fallback tools, you end up relying solely on?
**** Another thing I do is close-all-buffers, its such a mind-clearer, an advantage over other IDEs
*** My Noevim-killer setup. No, Ive got nothing againt Vim or Neovim, and I did not set out to create a Vim-binding alternative, but it feels so ergonomic, it might as well as be. However, I mostly combined this with some unique hacky modifications of my own keyboard, as well as my usage of both sides of Ctrl and Alt. So they might not work for your setup. One of the complaints I hear all the time from YouTubers who are pro Neovim are Emacs pinky's, which is the result of Emacs over-reliance on modifiers like Alt and Ctrl. Ive used Emacs for less than 10 years, so unlike others, I personally feel less attached if Emacs in the future decides to change some default keybindings. Theres always a workarond, by having a "classic bindings". Anyway, long story short, here are some of the clever tricks that I came up with in my journey to a more ergonomic Vim-binding alternative in Emacs:
**** Completely rewire how I use my my keyboard. This ones more like "hardwired" hack. Basically, I always use both hands, and as little pinky as possible. When I am pressing Ctrl-w, instead of using Left hand for both Ctrl and W, I use Right hand for Ctrl and Left hand for w.
**** I experimented with Hydra mode as much as possible. Using Hydra mode, I map shortcuts like ;;t to a Personal learning Diary, and ;;p to my Python Diary, and there are 24 more alphabets to go. If I were to ever code in C or C++, I could remap those modes to exclusively not use those.
**** I use a rather less-known package called Key Chord. Using key chords, I create a directional bigram, that is highly ergonomic. I will explain this in a later post, but simply, instead of Ctrl-_ for Undo, I use qw for Undo, since qw is a key combination rarely used in writing (aka bigram). Since qw is placed on the left (aka directional), left hints on "going back", since its our natural reading direction. These directional key presses are a theme I apply throughout (]\ for opening empty scratch buffer on the right, p[ is for moving to opened window on the right, and [] for moving to opened window on the left, zx for moving to previous buffer, and ,. for moving to next buffer). 
**** I paste small Velcro pieces on all my keyboard modifiers, such as Ctrl and Alt with braille-inspired variations, so I can literally just feel the Alt and Ctrl. Similarly applied to by directional bigram key chords. In my current workflow, I no longer look at the keys for Ctrl or Alt, and this braille addition makes my navigation many times more ergonomic.
**** Thats it, so far, my only complain is this Velcro addition makes my keyboard look ugly, my next move might be to epoxy necklace beads to my keyboards for those braille-inspired patterns. Yes its very hacky, but its better than carrying a very bulky mechnical keyboard everywhere with me.
**** References: [[https://github.com/emacsorphanage/key-chord][Key Chords]] and [[https://www.johndcook.com/blog/2015/02/01/rare-bigrams/][bigrams]]
**** Well, its either this or a very expensive split keyboard that is completely out of my reach.
** Jobs:
*** [[https://app.outlier.ai/en/expert][Outlier tasks]]
*** micro1
*** Interesting companies
**** PostCo: really likes open minded developers, who learn rare stuff. says want developers open to learning Ruby on Rails 
**** Hero Plus Group: uses Ruby in Rails. Specifically mentions Flask.
*** https://my.hiredly.com
*** https://www.maukerja.my/
*** https://www.jorawork.com/
*** https://www.ricebowl.my
*** Read about orchestration and automation
*** about Google cloud platforms: Snowflake and Databricks (good to have)
*** maybe SQL and Azure diffs
** Python:
*** Examples of making a Query filter by default, we dont need REALLY this for now, as we added a password reset much later, and its at a confusing stage.
#+begin_src python

  # ===== in Model.py

  from flask_sqlalchemy import SQLAlchemy, BaseQuery

  class MyFilteredQuery(BaseQuery):
      def __init__(self, entities, session=None):
          super().__init__(entities, session)
          # Apply your default filter here
          self._set_default_filter()

      def _set_default_filter(self):
          # Example: Filter all queries for a 'deleted' column being False
          if hasattr(self.column_descriptions[0].entity, 'deleted'):
              self.filter_by(deleted=False)


  from flask_sqlalchemy import SQLAlchemy

  db = SQLAlchemy()

  class User(db.Model):
      __tablename__ = 'users'
      id = db.Column(db.Integer, primary_key=True)
      name = db.Column(db.String(80), unique=True, nullable=False)
      deleted = db.Column(db.Boolean, default=False)

      # Assign the custom query class
      query_class = MyFilteredQuery


  # ===== Usage
  # This query will automatically include `WHERE deleted = False`
  active_users = User.query.all()
#+end_src
*** [[https://stackoverflow.com/questions/76131622/itsdangerous-security-typeerror-unsupported-operand-types-for-int-and][link:]] ADD THIS SOMEWHERE. Many of the examples are outdated. Instead of this:
#+begin_src python

  from itsdangerous import TimedJSONWebSignatureSerializer as Serializer

  s=Serializer(app.config['SECRET_KEY'], 600)

  # ===== theres a way to do it like this, but nothing works so far,
  token = s.dumps({'some_id': current_user.mcfId}).decode('utf-8')
  some_id = s.loads(token)['some_id']

#+end_src
*** We are using this
#+begin_src python

  from itsdangerous import URLSafeTimedSerializer as Serializer

  s=Serializer(app.config['SECRET_KEY'], 600)

  token = s.dumps({'some_id': 123})
  some_id = s.loads(token, max_age=600)["some_id"]

#+end_src
*** We also avoided too much OOP (tying function to object, especially since we are only using the feature in a simple password reset and nothing else)
*** iterating through an an object like its a list, not the most readable sh*t, but at least feels cool. We need to TRY THIS. We can also explore this by using app.config as an example. Why does app.config.from_object(Config) work?
#+begin_src python

  class MyIterableObject:
      def __init__(self, data):
          self.data = data

      def __getitem__(self, key):
          # This method is called when you use obj[key]
          return self.data[key]

  # Example usage
  obj = MyIterableObject([1, 2, 3, 4])
  print(obj[0])  # Output: 1

  # You can now iterate through it like a list
  for item in obj:
      print(item)

#+end_src
*** understanding [[https://www.geeksforgeeks.org/python-flask-immutablemultidict/][immutablemultidict]], kinda important
*** should we try this SMTP one day? network stuff is always a nightmare
**** [[https://stackoverflow.com/questions/37224073/smtp-auth-extension-not-supported-by-server][SMTP stackoverflow]]
*** common errors with Python bcrypt:
**** ValueError: Invalid salt Bcrypt hashes begin with a specific prefix (e.g., $2b$). If this prefix is missing, altered, or incorrectly encoded (e.g., b'\(2b\)'), bcrypt will interpret it as an invalid salt. If you stored password as plain text, when other parts of your code uses bcrypt, this can happen
*** Jinja2 award winning [[https://ttl255.com/jinja2-tutorial-part-4-template-filters/][blog]]
*** A good Flask read on getting data back from DB, from another good site called [[https://python-adv-web-apps.readthedocs.io/en/latest/flask_db2.html][python-adv-web-apps]]
*** not a good bulk update tutorial, but its got exampe of [[https://github.com/sqlalchemy/sqlalchemy/discussions/10537][python tricks]] with lists
*** [[https://www.devdungeon.com/content/run-python-wsgi-web-app-waitress][READ WSGI]]
*** What is this [[https://austinpoor.com/blog/plots-with-jinja][SVG]] experiment. This one is [[https://www.react-graph-gallery.com/build-axis-with-react][from react]]
*** Good [[https://www.peterspython.com/en/blog/sqlalchemy-using-cascade-deletes-to-delete-related-objects][link]] on Python Flask SQLalchemy on cascade-deletes. Especially note the "Database object deletes using ForeignKey ON DELETE CASCADE"
** We are going to publish our site, either in render or fly.io
** Emacs:
*** Also, finish this somewhere, about starting, and its not that simple, becoz things go wrong, Emacs tends to hide it, when use the usual shell-command, so instead, your UNIT OF ABSTRACTION must be the process:
**** http://xahlee.info/emacs/emacs/elisp_start_external_process.html
*** Convincing others:
**** Non-destructive ways to test Emacs packages:
***** use the try package. Then do the usual use-package, or any normal config for that package you found online.
*** create a emacs script that calls magick on any dired
*** try perspective el
*** Also try Emacs Application Framework on a new laptop
*** You like trying cool custom personalized Emacs el. This one is useful simpler bookmark, might help a lot in you html editing: [[https://github.com/joodland/bm][here]]
*** we are professional, so we need to make Python SUBMIT to us. [[https://emacs.stackexchange.com/questions/3372/coloring-indentation-levels][Color diff indentation levels]]
*** web-mode-element-wrap must be hydra-ed. We also need to auto-select a whole delimiter. But first try the stackoverflow templating engine trick.
*** We need to learn this Emacs [[https://emacs.stackexchange.com/questions/23810/getting-proper-indentation-for-python-flask-templates][templating indent]] mode thingy
** readng technical software/programming documentation for beginners requires a balance of conceptual and technical description.
** contact African guy again
** Python project notes, jot down the folowing:
*** [[https://skulpt.org/using.html][skulpt is cheat for running python like its javascript]]
** TODO 
*** [[https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Server-side/Django/Models][we REALLY need to read about MODELS before proceeding with Django]]
** I read about ketamine, psilocybin and alcohol, and also neurotransmitter GABA
*** https://adf.org.au/drug-facts/ketamine/
*** https://www.psychologytoday.com/intl/blog/culturally-speaking/202312/the-magic-behind-the-molecules-psilocybin-vs-alcohol
*** https://my.clevelandclinic.org/health/articles/22857-gamma-aminobutyric-acid-gaba
**** Researchers are still studying the effects of increased level of GABA, for High blood pressure, Insomnia, Diabetes.
*** GABA presence in food:
****  kimchi, miso and tempeh
**** green, black and oolong tea
**** brown rice, soy and adzuki beans, chestnuts, mushrooms, tomatoes, spinach, broccoli, cabbage, cauliflower, Brussels sprouts, sprouted grains and sweet potatoes
** [[https://ringgitplus.com/en/blog/income-tax/how-to-file-your-taxes-for-the-first-time.html][read on how to do e-filing for d first time]]
** wrote a little n Scriabin nocturne
** Read about your Hugo
*** Understand layouts and everything inside (partials, shortcodes, _default)
*** When you replaced your /layouts folder, it fails, simple rename back /_layouts
* Piano (no social media progress)
** You need to buy a stand
* More org notes
** For your recipes
*** Balti
*** some YSAC u did before
*** your chocolate donut (combination of Jamie Olivers friend & Gordon Ramsay)
** For suit, call these numbers for material. (Mention that Sparkle, Lot L-D 1&2, Pudu Plaza, KL recommended these guys)
*** 011 70018033
*** 013 343 2049
*** 018 398 5048
* Address:
** G-12-30, BLOCK G MENTARI COURT Gate 1, Jalan PJS 8/9, Bandar Sunway, 46150 Petaling Jaya, Selangor, Malaysia
