#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="zoho_ticket.css" />
#+OPTIONS:  toc:nil num:nil ^:nil


* Reminder
** Remember what Chomsky said
*** societies ban certain discussions on purpose to  keep the illusion  of freedom of discussion going. 
*** Most reporters worth their salt, take their job as a mostly a joke. They know the illusion of freedom of speech
*** remember, you made the FUCKING d minor prelude??
* What to do today:
** Details for creatin DB becoz it will expire:
*** mcf-postgresql-2 name
*** 5432
*** Singapore
** Firefox:
*** user_def.js: 3 minutes
*** 
** Terry:
*** kill_member should redirect to start of members page (or better is previous page)
*** fix our main pages for both admin and 
*** We need to time our kill_events() query. 
**** https://flask-sqlalchemy.readthedocs.io/en/stable/record-queries/
*** Faster deletes SQL:
**** https://www.sqlservercentral.com/articles/how-to-delete-large-amounts-of-data
*** kill_events (thats with an S!!), we only did the kill_event/<int:id>
*** Read on how to limit login session timeout
*** for null check, we need feedback for the users
*** REMEMBER to include requst_limit to prevent DDOS
*** Admin from AI, yuck:
#+begin_src python

    from flask import Flask, redirect, url_for
    from flask_login import LoginManager, UserMixin, login_required, current_user

  app = Flask(__name__)
  app.config['SECRET_KEY'] = 'your_secret_key'  # Replace with a strong, randomly generated key
  login_manager = LoginManager()
  login_manager.init_app(app)

  class User(UserMixin):
      def __init__(self, id, username, password, is_admin=False):
          self.id = id
          self.username = username
          self.password = password
          self.is_admin = is_admin

      def get_id(self):
          return str(self.id)

  # Example user data (replace with database interaction)
  users = {
      1: User(1, 'admin', 'adminpass', is_admin=True),
      2: User(2, 'user', 'userpass')
  }

  @login_manager.user_loader
  def load_user(user_id):
      return users.get(int(user_id))

  @app.route('/admin')
  @login_required
  def admin_page():
      if current_user.is_admin:
          return 'Welcome, Admin!'
      else:
          return redirect(url_for('home_page'))

  @app.route('/')
  def home_page():
      return 'Welcome, User!'

  if __name__ == '__main__':
      app.run(debug=True)

#+end_src
*** Password reset link from AI, yuck:
#+begin_src python

  from flask import Flask, render_template, request, url_for
  from itsdangerous import URLSafeTimedSerializer, SignatureExpired
  from flask_mail import Mail, Message

  app = Flask(__name__)
  app.config['SECRET_KEY'] = 'your_secret_key' # Replace with a strong, random key
  app.config['MAIL_SERVER'] = 'smtp.example.com'
  app.config['MAIL_PORT'] = 587
  app.config['MAIL_USE_TLS'] = True
  app.config['MAIL_USERNAME'] = 'your_email@example.com'
  app.config['MAIL_PASSWORD'] = 'your_email_password'

  mail = Mail(app)
  s = URLSafeTimedSerializer(app.config['SECRET_KEY'])

  @app.route('/forgot_password', methods=['GET', 'POST'])
  def forgot_password():
      if request.method == 'POST':
          email = request.form['email']
          token = s.dumps(email, salt='password-reset-salt')
          link = url_for('reset_password', token=token, _external=True)
          msg = Message('Password Reset Request', sender='noreply@example.com', recipients=[email])
          msg.body = f"Click this link to reset your password: {link}"
          mail.send(msg)
          return 'Password reset link sent to your email.'
      return render_template('forgot_password.html')

  @app.route('/reset_password/<token>', methods=['GET', 'POST'])
  def reset_password(token):
      try:
          email = s.loads(token, salt='password-reset-salt', max_age=3600) # Token valid for 1 hour
      except SignatureExpired:
          return 'The password reset link is expired.'
      except Exception as e:
           return f'Invalid password reset link. {e}'

      if request.method == 'POST':
          new_password = request.form['new_password']
          # Update password in database for the user with this email
          return 'Password updated successfully.'
      return render_template('reset_password_form.html', token=token)

  if __name__ == '__main__':
      app.run(debug=True)

#+end_src
*** to avoid confirm form resubmission, we add these (sugested by AI), to redirect to the same form (GET). So going back, simply resend a GET request.
#+begin_src python

  from flask import Flask, render_template, request, redirect, url_for

  app = Flask(__name__)

  @app.route('/form', methods=['GET', 'POST'])
  def my_form():
      if request.method == 'POST':
          # Process the form data
          # ...
          # Redirect to a success page or the same form page (GET)
          return redirect(url_for('my_form'))
      return render_template('form.html')

  if __name__ == '__main__':
      app.run(debug=True)

#+end_src
*** we should put all db.session.commit() or db.session.close(), even after every SELECT queries, before opening endpoint template
*** remember to convince Terry, that publishing online and locally on laptop are 2 very different things. Online, you have to consider DDOS and everything. Becoz anything can happen when you decide to make something online. Sorry to sound technial but thats it. Of course, modern framework have ways of making it easier, but it still requires reading.
*** Stupid app, we should recheck all of our validations, should be FIDE
*** Security:
**** https://snyk.io/blog/secure-python-flask-applications/
**** 
** Reply to Reddit about your SQLAlchemy problem solved, a simple database restart worked. But youre not sure, if it also becoz of you     close_all_sessions() and db.engine.dispose()    
    
** SQLAlchemy:
*** https://docs.sqlalchemy.org/en/20/orm/session_basics.html
*** https://docs.sqlalchemy.org/en/20/core/pooling.html
*** https://docs.sqlalchemy.org/en/20/core/connections.html#sqlalchemy.engine.Engine.dispose
*** https://docs.sqlalchemy.org/en/20/core/pooling.html#dealing-with-disconnects
*** https://docs.sqlalchemy.org/en/20/tutorial/index.html
*** https://docs.sqlalchemy.org/en/20/core/engines.html#engine-configuration
*** 
** Emacs 
*** join multi into 1 without spaces
*** [[https://karthinks.com/software/fringe-matters-finding-the-right-difference/][another cool blog]]
*** keychord split-window-right needs change of keys ro reflect prose direction
*** try save-excursion and return in quit for select-hydra. Or the similar trick in your word-hydra
** Reddit:
*** Next
#+begin_quote

Hello everyone, 
Im a noob in Flask. And i have never deployed a web app. Im currently working on a project, which allows bulk uploading to the app. And later on, the client can use it with relative ease, helping his workflow.
I could push my commits up to a certain point. And it kept failing with the same messages: sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at "....." (10...), port ... failed: FATAL: remaining connection slots are reserved for roles with the SUPERUSER attribute
(at first it was a different message, then it repeated became this message)
Details:
Flask
TailWind CSS
attempted both gunicorn and recently waitress, with no difference in recent result.
I would post my code, but I dont know which part would help. Its quite big already. 

Example of commands I ran:
gunicorn -b 0.0.0.0:9000 'wsgi:app' -t 300 --keep-alive 300

#+end_quote
*** Next:
#+begin_quote

So I have managed to successfully solved my previous issue (include link from previous Reddit). I simply made sure I dropped all connections before a complete drop of all tables. My current workflow is to build all the tables from scratch everytime I push a commit. As to avoid such related issues (which costed me up to week of no progress). I want to know any reading sources I should do on session management. Some info:
 - I know the Select queries in general dont need closing.
 - I know I can use session_scope, but Im not using it throughout all my code
 - My code is not that huge, quite simple, but later it will be used by several users online. Not critical transaction, but still several users online.
But as a precaution, any more "best practices" I should be concerned about regarding sessions? Any book/resource/site I should read. I want to really make sure I catch everything, its already costing me 1 week of no progress.

#+end_quote
** Your switching to other-window, switch the keys
** GIT:
*** put this somewhere, SQUASH
*** https://www.freecodecamp.org/news/git-squash-commits/
** Finish making your Chopin video so that you can uplaod it one day
** We need to refactor error message of upload, what do we do with all the ID info?? Maybe theres no need for it.
*** Put some tests in case of wrongly named CSV files
*** create checks for duplicate events
*** we should add timestamp naming for CSV files
** We should finish our context manager lessons from our diary somewhere else, and also finish our NaN error somewhere else. But remember, that we have no need for it actually, our example below works wonders.
***  return int(num) if num and num.isdigit() else 0
** Python web app security practices:
*** https://qwiet.ai/hacking-and-securing-python-applications/
** Emacs, improve your web-mode, make it highlight matching tags
*** try Dirvish 
*** df23b19d-8e6b-4f20-af0a-6bba949e2cf5
** Very good source of information for SQLALCHEMY models to dictionary!!
** Make sure you share-rate is above 3%
** Post in Pythons Group Malaysia, your willingness to work for Django, having experience in Flask and used Django for a side project.
** async sync promise? build something simple??
** Write how your opinion of Jai changed in a more mature way
** I seriously dont know
*** https://www.restack.io/p/adding-columns-sqlalchemy-models-answer-query-result-dict
** Write this in software_engineering
** Practice your app with [[https://adventofcode.com/][Advent of Code]]
** FB groups for your interpretaions (aim more than 3% share rate & more than 100 views):
*** All About Music in Malaysia
*** Chopin groups
*** Scriabin
*** Malaysia art groups
*** Malaysia music groups
*** etsy Malaysia
*** crafts Malaysia
** You managed to get the attention of Nick and Nardine
**** Time to post something REALLY clickbaity
**** Use a cartoon image of yourself, maybe Gimpify your face.
** Present your Emacs teaching class inside University of Malaya International students main discussion group. Gauge reaction
** Obsidian config, we should include obsidian image link generation, and auto-file deletion (Obsidian side)
#+begin_src lisp

  (defun refactor--process-files (dir-name policy)
  (setq dir-files (directory-files dir-name))
  (dolist (element dir-files)
    (unless (or (string= "." element)
		(string= ".." element)
		(file-directory-p element))
      (find-file element)
      (print element)
      (funcall policy (point-min) (point-max))
      (save-buffer))))

(defun untabify-dir ()
  "Untabify the contents of a folder"
  (interactive)
  (let ((dir-name
	 "~/storage/shared/Documents/my-org-and-obsidian/my-org-notes"
	 ))
    (refactor--process-files dir-name 'untabify))
  )




;; NOTE: since this is only a single execution everytimme,
;; and we only have a single project,
;; we dont need to play around putting "my-org" into a variable
(setq org-publish-project-alist
      '(("my-org"
	 :base-directory "~/storage/shared/Documents/my-org-and-obsidian/my-org-notes"
	 :recursive t
	 :publishing-function org-md-publish-to-md
	 :publishing-directory "~/storage/shared/Documents/my-org-and-obsidian/my-oob-notes"
	 :base_extension "org"
	 :with-sub-superscript nil
	 :section-numbers nil
	 :base-extension "org"
	 :with-toc nil)))

(setq rd-a-project (assoc "my-org" org-publish-project-alist))
(setq ardie/list-of-post-publish 'nil)
(setq ardie/list-of-previous-publish 'nil)

;; initilialize first, otherwise, org-publish-cache produces error
(org-publish-initialize-cache "my-org")



(dolist (rd-long-filename (directory-files-recursively "~/storage/shared/Documents/my-org-and-obsidian/my-oob-notes" "\\.md$"))
  (delete-file rd-long-filename)
  )


(org-publish-project "my-org" t)




(save-buffers-kill-terminal)


#+end_src
** Instagram, YouTube:
*** Join KLCC groups, Malaysian craft groups, Malaysian art group, Southeast Asian music groups to target more than 100 views by Saturday.
** https://www.interview.micro1.ai/intro/micro1/?candidate=698fa6e4-4849-4b2a-90cf-db3e7d8d3816&ping=ok
** Social media posting:
*** Share your video uploaded direct on Facebook with this message:
#+begin_quote

My interpretation of Scriabins 2 Nocturnes Op5 No1.

Please like and subscribe to my YouTube channel to show support.

https://www.youtube.com/@ArdieMejia83

#+end_quote
*** Is Emacs enough from being trapped in a singular software ecosystem (Eg: Apple)?
**** Even for something as simple as search and replace, there lacks a  "repository" of "best practices". Although, it might be easy for me, its certainly straightforward enough for beginners
**** Advantages: A consistent language paradigm across all its "tools" (packages, configs, etc...)
**** Advantages: A ridiculus easy excuse to experiment with the functional paradigm without guilt (No installation whatsoever)
**** Possible cons: Personally, I use Emacs for a TODO and knowledge manager (categorizing blogs and links). Some coders Ive met dont seem to be interested in that
**** Possible cons: Coders who have tried (and gave up) seem to sight (either from experience or anecdote from other coders), of the Emacs pinky condition. While most cited solutions is mapping Caps Lock to Ctrl, I rewire my brain to always use both hand (Eg: Ctrl-p becomes Left-Ctrl and p, Ctrl-f, becomes Right-Ctrl and f). Rewire your brain doesnt seem a compelling argument enough.
**** Possible advantages: Learning Lisp might lead you to an incredible journey of self-discovery of other extensible tools. (GUIX, Nyxt browser)
*** Why handtools in woodworking?
**** Apart from the obvious artistic/crafty and detail reasons. There's a reason some woodworkers still use handtools despite the over-advertising of power tools. Its accuracy. Some woodworkers know this instinctively but cant put it on words. Utilizing all your 5 senses enhances accuracy, where powertools add an overpowered layer separating the woodworker from their product. When you feel and see the cuts, the planed surfaces, you ensure accuracy. Becoz a mistake multiplies in the face of your senses. We use sunlight before mating 2 wooden surface. And thats just 1 example, of multiplying the mistakes/perfection, when we use higher senses. Its not some airy nonsense of "artistry" (becoz art seems like a dirty word to some engineers, very strange). 
** Job:
*** Interesting companies
**** PostCo: really likes open minded developers, who learn rare stuff. says want developers open to learning Ruby on Rails 
**** Hero Plus Group: uses Ruby in Rails. Specifically mentions Flask.
*** https://my.hiredly.com
*** https://www.maukerja.my/
*** https://www.jorawork.com/
*** https://www.ricebowl.my
*** Read about orchestration and automation
*** about Google cloud platforms: Snowflake and Databricks (good to have)
*** maybe SQL and Azure diffs
** We need to test duplicates of everything, but for now only FIDE ID
** More links on file uploads:
*** [[https://imagekit.io/blog/how-to-upload-files-in-html/][basic element]]
*** [[https://www.pullrequest.com/blog/secure-file-uploads-in-flask-filtering-and-validation-techniques/][in flask]]
*** [[https://stackoverflow.com/questions/7076042/what-mime-type-should-i-use-for-csv][the mimetypethat should be used]]
** Errors and exceptions:
*** lets learn how to handle errors [[https://www.digitalocean.com/community/tutorials/how-to-handle-errors-in-a-flask-application][here]]
*** [[https://docs.python.org/3/library/exceptions.html][built-in]] python exceptions
*** [[https://docs.sqlalchemy.org/en/20/core/exceptions.html][SQLalchemy core]] exceptions
** [[https://hyperskill.org/learn/step/36181][IMPORTANT]]
** Software Engineering:
*** [[https://softwareengineering.stackexchange.com/questions/252448/representation-of-a-question-mark-in-variable-names][predicate variable naming]]
** Jokes:
*** For ages, scholars have debated which comes first. A project or a project template.
** Downloading the event_members table as an excel
** Write documentation for your event management system
** Social:
*** Post about how your wedges last a very long time. Post with old small table, it lasts forever. The medium sized table broke where IKEA glued it up, not me. Yes, Im proud of what I did to something that shouldnt last this long. 
*** If you share your video to people who are not interested in your content, it will only kill it. When people click off your video within the first few seconds, the algorithm picks up this behaviour as your content being not engaging enough and will deprioritize it. Thats why you need to be smart about sharing and only do it in the right places such as facebook groups dedicated to your niche.
** Read about GitGurdian and alternative tools that can help explore web vulnerabilities for idiots like me
** Mistakes we did, that we spnt a very long time to make the conditiaonl env loading work, is the "export" missing in bashrc. Why is an easy mistake to overlook?
*** So turns out bash doesnt automatically export environmnt variables to child processes
** Python:
*** Learn Polars
*** A good Flask read on getting data back from DB, from another good site called [[https://python-adv-web-apps.readthedocs.io/en/latest/flask_db2.html][python-adv-web-apps]]
*** not a good bulk update tutorial, but its got exampe of [[https://github.com/sqlalchemy/sqlalchemy/discussions/10537][python tricks]] with lists
*** Spend time reading a Github example [[https://github.com/adityaShar24/Social-Media-Backend?tab=readme-ov-file][Flask social media]] app, for MORE examples
*** Read on Blueprints
*** [[https://www.devdungeon.com/content/run-python-wsgi-web-app-waitress][READ WSGI]]
*** What is this [[https://austinpoor.com/blog/plots-with-jinja][SVG]] experiment
*** Good [[https://www.peterspython.com/en/blog/sqlalchemy-using-cascade-deletes-to-delete-related-objects][link]] on Python Flask SQLalchemy on cascade-deletes. Especially note the "Database object deletes using ForeignKey ON DELETE CASCADE"
** Its very important to be knowledgable on common practices of "deploying to production". So READ [[https://flask.palletsprojects.com/en/stable/tutorial/deploy/][THIS]]. Also, read on lots of [[https://flask.palletsprojects.com/en/stable/deploying/][CONCEPTS]]
** We are going to READ on FILE VALIDATION, COMMON skill:
*** https://imagekit.io/blog/how-to-upload-files-in-html/
*** https://www.pullrequest.com/blog/secure-file-uploads-in-flask-filtering-and-validation-techniques/
** The best way to read CSS frameworks, while learning an actual project in your real work, while also spending time doing your personal project, is to read all the documentation of several. Im currently reading both Bootstrap and Tailwind CSS. The frameworks come from different perspectives and opinions. And trying to get into the mind fo the guys who created the "language", means trying to think "what is the creator trying to convey", when reading all their documentations. 
** Think of a project to use with typst
*** Also write something about typst
** We are going to publish our site, either in render or fly.io
** Remember to move image files from Hanifas laptop during the meeting later.
** Progress
*** write about how you successfully did flex properly (3 child divs). Also flex and grid-cols dont mix very well. Remember to note how you read repeatedly sources from Bootstrap and Tailwind docs to get a sense of  CSS logic. You also tried to memorize slightly tailwind CSS. 
*** Do you want to write about thinking in terms of context. 
** read about [[https://www.linkedin.com/pulse/power-css-organizing-data-rows-columns-shydra-murray-h8t9c/][Flexbox]] please and differences between [[https://pieces.app/blog/top-5-best-css-frameworks-for-responsive-web-design-in-2024][css frameworks]]
** from our phone link
** Watch:
*** https://www.youtube.com/watch?v=YRvBQdJlBeo
*** https://www.youtube.com/watch?v=421twOHytG0
*** https://www.youtube.com/watch?v=1MSy6epsU6Y
*** https://www.youtube.com/watch?v=9UIIMBqq1D4
*** https://www.youtube.com/watch?v=afA0b5ygTyA
** Emacs:
*** Also, finish this somewhere, about starting, and its not that simple, becoz things go wrong, Emacs tends to hide it, when use the usual shell-command, so instead, your UNIT OF ABSTRACTION must be the process:
**** http://xahlee.info/emacs/emacs/elisp_start_external_process.html
*** Convincing others:
**** A few things that scare newcomers and Vimers, or frustrations that turn them away after trying Emacs for a month or two, and solutions that only work but might make life better.
***** Ctrl Alt haevy, aka pinky finger. An overly cool solution: Hydra Mode and Key Chords, you'll be able to do stuff no-one else can do
***** typing the wrong way, yes there is such a thing at least, not ideal, but this has a lot more to do, with physical wiring of motor skills in the brain. These days, I "always" remember to use both Left and Right hands for all modifier combinations. Eg: Ctrl-a = Right-Ctrl + Left a, Alt-w = Right-Ctrl + Left w, Ctrl-h = Left-Ctrl + Right h. These advice might seem to "hardwiry" for some.
***** awkward defaults, overcome, with searching for "sensible defaults" for config ideas
***** Emacs having the image of dinosaurs IDE, or an old mans IDE: Not true at all, witaout going into complete detail, cool packages that are new-ish that make your Emacs feel completely different or even radical. Hydra-mode, Helm, Vertico, Hydra-mode, Emacs Application Framework (if youre willing to install Python modules globally) and so many more. (This is from my personal experience, and the craziest thing about Emacs is, that every Emacser will have some interesting/cool/new workflow/trick/package he has discovered)
**** Reasons why I proseltize Emacs:
***** Sincerely believe it would benefit non-programmers more than programmers, especially who love both writing and coding, and cant live without writing. And programmers, even myself included, are often opinionated with biases towards what is correct and non-correct in technology.
***** Removing stereotypes, contrary to belief, Emacs communtiy are not wholly insular. Many partsa of the community, are increbly open and progressive, and pushing for changes such as Emacs default being less weird (I personally, dont understand why searching for "recent-files" is not enabled by default, I always forget the exact config, and have to copy it from some blog, when setting up Emacs on a new system).
***** A consistent and fun to learn language across the entire ecosystem. If you want to be really cool, you can learn Lisp in both Emas and Nyxt (web browser which also uses a Lisp, very hackable). Even cooler? use Nyxt and Emacs inside GUIX (a stateless Operating System using Guile Scheme Lisp entirely, personally Ive never tried this). GUIX is something Ive always wanted to try, but not enough resources to buy a new laptop at the moment. GUIX is quite cool if you can get the hang of it, coz if Im not mistake, it has the concept of "profiles", which means every "state", every installation, every change is reproducible. From a laymans term, its like Apple's Time Machine. Whatever happens to your system, you can roll back to a previous "state". As a programmer, I imagine everyone here understands the idea of "state", or at least understands it on a "feel" level.
***** We need more David beating up Big Tech Goliaths
**** But enough about that, why would YOU want to learn Emacs?
***** Lets think of it this way. Everyone was once an idiot, yes, thats right, even Seniors, they were also once idiots. C programmers, Lispers, Web Developers, we were all once idiots
***** If you are like me, Emacs and its ecosystem, is perhaps the ONLY technology of its kind, that rewards you if you know more. The more you read and explore and experiment, the higher returns. You cant say that for most things in the programming world. Sometimes, knowing more punishes you. 
**** Non-destructive ways to test Emacs packages:
***** use the try package. Then do the usual use-package, or any normal config for that package you found online.
**** Community
***** Anyone who knows of any other Emacs "community" or learning resource. Obviously, I cant discover everything by myself. This is me hoping to inspire those who havent made the leap towards Emacs but always wanted to. Hopefully I learn something from this too.
**** Proper 1:
***** My last post seem to attract a few (maybe too few) interested folks. So here I am posting again. I need help in organizing learning material (or learning community) to help spread Emacs. The ones Im familiar so far, SystemCrafters (fresh and progressive, from beginers to advanced), Xah Lee (very opinionated, but knowledgeable on programming concepts and paradigms, his "look" is misleading, hes more progressive than first impression). This is also a learning experience for myself too.
***** Also, as a side note, Im hunting for a job change, and would like to use this opportunity to connect, either for job/business/community opportunities. Im desperately in need of more opportunities and connections with like minded people. If I wanted to get into more Python based work, what are the areas I should be focusing on? I quite like the language element of Python, exploring the newer features. But sometimes, what the market demands often dont match where the language (Python) itself is heading in terms of development. If I were to go into Machine Learning, what is the market like and what should I be studying?
*** create a emacs script that calls magick on any dired
*** emacs iconfy frame with emacs client should work with non-openbox managers. try that with a new laptop
*** Ive installed Nyxt browser, uses Common Lisp, havent fully explored, but the documentation is fun to read so far. 
**** The word hacking can have both negative and positive connotations. Even if one were to remove the negative MORAL connotations, hacking in your OWN code and software seems to imply a sort of un-naturalness, as if expecting something to break.
**** Reading eLisp, Emacs and now Nyxt browser documentation, I get the impression that hacking can be both pleasant when there is consistency in the ecosystem. Maybe should try that approach in convincing others. Yes, writing is hard work. But writing both beautifully yet meaningfully accurate is even harder. 
**** I remember my first few but very huge fears when I used Emacs the first time. Feels like treading on literal abstraction. More like walking on nothingness. Nowadays, I feel less of that fear. I think partly its becoz, one knows that all software Apple/Android/Windows/whatever is essentially an elaborate hack. Just gotta turn your hack into a work of art. Art as in beauty in words and language, I guess.
**** Wow, this post seems just another rant.
*** try perspective el
*** Also try Emacs Application Framework on a new laptop
*** You like trying cool custom personalized Emacs el. This one is useful simpler bookmark, might help a lot in you html editing: [[https://github.com/joodland/bm][here]]
*** we are professional, so we need to make Python SUBMIT to us. [[https://emacs.stackexchange.com/questions/3372/coloring-indentation-levels][Color diff indentation levels]]
*** we need another Hydra to ehsily go to other-window using (other-window 1)
*** [[https://zck.org/define-keymap][keymap]] very cool stuff
*** web-mode-element-wrap must be hydra-ed. We also need to auto-select a whole delimiter. But first try the stackoverflow templating engine trick.
*** We need to learn this Emacs [[https://emacs.stackexchange.com/questions/23810/getting-proper-indentation-for-python-flask-templates][templating indent]] mode thingy
*** we are going to try to use enriched mode to color Emacs
** Store this cool [[https://www.andrewvillazon.com/move-data-to-db-with-sqlalchemy/][declarative_base]] link, coz we managed to make it work for bulk upload. Note how you dont need to remove your usual model in your class. The declarative_model simply maps your class with the existing table.
** override modus theme, a masterpiece theme according to 1 guy, into a [[https://github.com/idlip/haki/tree/haki][high contrast tasheme]]
** Store this [[https://yannesposito.com/posts/0020-cool-looking-org-mode/index.html][cool Emacs link]] somewhere
** Copy Hanifas key
** Post on LinkIn, you dontactually need a big project to practice using frameworks. Just start with a very simple selfish, even stupid idea. Many of the modern frameworks we have out there are quite progressive, meaning as long as you have some idea of good code organization, your stupid ( and big and creative) idea can be made gradually better. Dont be intimidated by all the naysayers out there. Or maybe that only happened to me. But frameworks can be applied gradually to your creative idea. So I tried it with the stupid idea of using Excel as a data base using this REPO as a base. It works, I carefully replace with little bits of Flask here and there.
#+begin_quote

You dont actually need to treat web frameworks with fear. I just only learnt this. Modern frameworks are quite progressive in their nature. This means as long as you have some idea of good code organization and abstraction. Your random, stupid, selfish, creative idea can progressively become better with time and patience. 

Thats what progressive means, when you read a few random articles that mentions the specific progressive of these frameworks.  

I experimented with the stupid and suspicious idea of using Excel as a database, and adding frameworks bit by bit, and borrowing code from this repo: 

https://github.com/AnthonyDjogan/Excel-Based-Employee-Management-System_Python-CRUD-Application/blob/main/Employee_Management_CRUD.py

And then progressively organizing and splitting code and CRUD in my own way. It works. Hahaha...

#+end_quote
** readng technical software/programming documentation for beginners requires a balance of conceptual and technical description.
** Read about Python docstring
** contact African guy again
** Social
*** Use ur existing fiverr clients to improve your stats in other platforms
*** Respond to the Daniel in Developer Kaki
*** Ask the chess guy for possible early fund, coz I kinda need it.
*** ISO for free theaded rod more than 2 feet at least and a few matching nuts
** Python project notes, jot down the folowing:
*** [[https://jinja.palletsprojects.com/en/stable/templates/][we should read more Jinja, just read documentation, spend 1 hour]]
*** [[https://stackoverflow.com/questions/5458048/how-can-i-make-a-python-script-standalone-executable-to-run-without-any-dependen][pythinstaller -f will create a proper .exe]]
*** [[https://stackoverflow.com/questions/16981805/how-does-templating-engine-work][templating engine pedagogy]]
*** [[https://stackoverflow.com/questions/7460938/how-to-run-a-python-script-in-a-web-page][ways to embed python script in website. But maybe we dont need this.]]
*** [[https://skulpt.org/using.html][skulpt is cheat for running python like its javascript]]
*** [[https://flask.palletsprojects.com/en/stable/][Im not sure why i was reading about Flask]]
** Writing about:
*** Write about how you read tech documentation different from stories. 
** First we need to create another class for event, then we need to create a cleanup script
** TODO 
*** we should read about pandas reading null from excel, and validating null from excel
** TODO 
*** your terminal should open with default last directory
** TODO 
*** Look for your reddit history agian, about ELPY + LSP
** TODO 
*** we need to store this as another [[https://www.youtube.com/watch?v=G59BG3VCfio][practical quick release vise]]
** TODO 
*** [[https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Server-side/Django/Models][we REALLY need to read about MODELS before proceeding with Django]]
** TODO 
*** post about why you write in Emacs. a constant in the software world, is bad documentation.
** I read about ketamine, psilocybin and alcohol, and also neurotransmitter GABA
*** https://adf.org.au/drug-facts/ketamine/
*** https://www.psychologytoday.com/intl/blog/culturally-speaking/202312/the-magic-behind-the-molecules-psilocybin-vs-alcohol
*** https://my.clevelandclinic.org/health/articles/22857-gamma-aminobutyric-acid-gaba
**** Researchers are still studying the effects of increased level of GABA, for High blood pressure, Insomnia, Diabetes.
*** GABA presence in food:
****  kimchi, miso and tempeh
**** green, black and oolong tea
**** brown rice, soy and adzuki beans, chestnuts, mushrooms, tomatoes, spinach, broccoli, cabbage, cauliflower, Brussels sprouts, sprouted grains and sweet potatoes
** TODO 
*** Study example uses of defmacro in Emacs
** TODO 
*** add details to linked for [[https://outlier.ai/][Outlier]]
** Write this one somewhere!!
#+begin_src

   RIP Dashboards: 5 Psychology Hacks to Stop Your Work from Dying

You spent weeks building it.
Stakeholders said, “Looks great!”

And then… silence.

❌ No one opens it.
❌ No decisions.
❌ No impact.

Your work deserves to be used.

Here’s how to make sure your insights don't die 👇

1. The Think-Aloud Protocol
🔹 Stop asking, “Is this useful?”—people don’t know. Instead:
🔹 Hand them the dashboard. Let them talk out loud as they explore. 
🔹 Watch where they click, pause, and get stuck — this reveals problems.

💡 Usability expert Jakob Nielsen: 
“Users will never tell you what’s wrong. But they’ll show you.”

2. The IKEA Effect
🔹 Ask early: “What do you think?”
🔹 Show them drafts, not just the final version.
🔹 Let them tweak a few things—it makes them feel ownership.

💡 The more they’re involved, the more they’ll use it.

3. Design Thinking: Build for How They Work (Not What They Ask For)
🔹 Watch how they work today—where’s the friction?
🔹 Prototype early. Refine fast. 
🔹 Don’t spend weeks working on the wrong thing.

💡 If they struggle to use it, it’s not them—it’s the design.

4. Hick’s Law: Simplify or Die
🔹 Cut 20% of elements right now.
🔹 Highlight one key insight they should act on.
🔹 Pre-set defaults instead of making them tweak everything.

💡 Less friction = faster decisions.

5. The “Last Mile” Problem: Put Insights Where They’ll Be Seen
🔹 Push critical insights where people already work (Slack, email, CRM).
🔹 Example: Sales gets an alert when revenue drops below target.
🔹 Meet them where they already work, so data doesn’t get ignored.

💡 Make insights part of their workflow, not an extra step.

In short:
- Make it simple.
- Make them part of the process.
- Make sure it drives action.

Ever built something that no one used? 

Make your insights unforgettable with Data Storytelling. 
Join 4,100+ Data professionals:

  
#+end_src
** [[https://ringgitplus.com/en/blog/income-tax/how-to-file-your-taxes-for-the-first-time.html][read on how to do e-filing for d first time]]
** SO COOL:
*** https://github.com/WingTillDie/adjust-volume/
** wrote a little n Scriabin nocturne
** Read about your Hugo
*** Understand layouts and everything inside (partials, shortcodes, _default)
*** When you replaced your /layouts folder, it fails, simple rename back /_layouts
** contact the fabric guys for your Myanmar project
* Piano (no social media progress)
** You need to buy a stand
* More org notes
** For your recipes
*** Balti
*** some YSAC u did before
*** your chocolate donut (combination of Jamie Olivers friend & Gordon Ramsay)
** For suit, call these numbers for material. (Mention that Sparkle, Lot L-D 1&2, Pudu Plaza, KL recommended these guys)
*** 011 70018033
*** 013 343 2049
*** 018 398 5048
* Address:
** G-12-30, BLOCK G MENTARI COURT Gate 1, Jalan PJS 8/9, Bandar Sunway, 46150 Petaling Jaya, Selangor, Malaysia
