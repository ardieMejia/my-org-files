#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="zoho_ticket.css" />
#+OPTIONS:  toc:nil num:nil ^:nil


* Reminder
** Remember what Chomsky said
*** societies ban certain discussions on purpose to  keep the illusion  of freedom of discussion going. 
*** Most reporters worth their salt, take their job as a mostly a joke. They know the illusion of freedom of speech
*** remember, you made the FUCKING d minor prelude??
* What to do today:
** buttons scientists, store this somewhere:
*** https://adrianroselli.com/2019/06/target-size-and-2-5-5.html
** we have to save this somewhere:
*** [[https://www.w3schools.com/css/css_display_visibility.asp][link]]: CSS display property commonly used by Javascript
** Terry:
*** UI idea: form_creator, dropdown will have leading question option, which enable subgroupname onselect()
*** when memebrs answer fhe same form again, it overwrites. we havent done that yet
*** questionString or questionstring??
*** file input in template and subgroup-template
*** we need more tooltips, for subgroup creator too
*** we need to rename model data member "type" to something else
*** withdraw event, clause to warn no refund. 50% refund. 0% refund.
*** rather than terminating event completely on closing date, we warn/info user on closing date
*** the type, eligibility, important, can be put at top of form or dropdown display
*** we sa.delete() all formQuestions and formQuestionAnswers, before member re-fills form. In effect, "overwriting" each time
*** create kill all form button that will kill altogether eventFormQuestions, eventFormQuestionAnaswers, and eventFormQuestionSubgroup
*** our admin doesnt session timeout
[[https://www.freekb.net/Article?id=4560][this link]]
*** for our form creator:
**** for our SubGroupId, we need a unique, non-primary, nullable ID. We use code below, but instead of using default=, we generate it from classmethod or model function. a_object.subGroupId = a_object.setSubGroupId():
#+begin_src python

    from flask_sqlalchemy import SQLAlchemy
  import uuid
  import time

  db = SQLAlchemy()

  class MyModel(db.Model):
      id = db.Column(db.Integer, primary_key=True)
      # unique_number_uuid = db.Column(db.String(36), unique=True, nullable=False, default=lambda: str(uuid.uuid4()))
      # we should try this instead
      unique_number_uuid = db.Column(db.String(36), unique=True, nullable=False, default=uuid.uuid4)
      unique_number_timestamp = db.Column(db.BigInteger, unique=True, nullable=False, default=lambda: int(time.time()*1000000))
      data = db.Column(db.String(255))

#+end_src
**** we need another field for our formStructure = questionString
**** 
**** for formSheetAnswer, we need something like this:
-----------------------------
| user | formId | question | answers |
|------+--------+----------+---------|
|  123 | abc    | gender   | M       |
|  123 | abc    | name     | ardie   |
|  123 | abc    | days     | 3       |
|      |        |          |         |

**** we need to insert "value" field from our FormStructure into our default value for HTML input elements
**** replace all membe-events operations (update, delete, save) with a database operation
**** our forms will have expire date, Terry will have to personally manage late expcetions if he wants.
*** for kill_event, we need to replace render_template with redirect
*** subgroupsof questions cannot be tied to each answer, the logic is now to be complicated. It can only be tied to a question
*** and it will only be limited to a single radio button (and values: selected or on-selectd)
*** UI: we need to limit the subgroup creation (leadingquestion) to radio only, UI level constraint     
** Tests:
*** Put some tests in case of wrongly named CSV files
*** Test form link when there is no matching event, or no event entirely
** Write somewhere:
*** Deleting data from DBS is [[https://softwareengineering.stackexchange.com/questions/159232/should-we-ever-delete-data-in-a-database][usually a good idea]]
** Prototype:
*** We have a subGroupId, unique, nullable, mostly useless except for subgroups.

FormStructure
| eventid | formid   | fieldname | type | values | questionString | subGroupId | 

FormSubGroup
| subGroupId | fieldname | type | values | questionString | 

*** [[https://www.silvaneves.org/deleting-old-items-in-sqlalchemy][removing old entries]]
*** Form creator:
**** We need to show content of database more apparently, instead of hiding behind interface. The admin must completely understand what is inside.
*** replace all request.args.get('mcfid') occurence with current_user.mcfId
*** for uploads
**** [[https://www.pullrequest.com/blog/secure-file-uploads-in-flask-filtering-and-validation-techniques/][secure file uplaods]]
**** [[https://www.geeksforgeeks.org/uploading-and-downloading-files-in-flask/][file upload basics]]
**** [[https://blog.miguelgrinberg.com/post/handling-file-uploads-with-flask][miguel file uploads]]
**** [[https://imagekit.io/blog/how-to-upload-files-in-html/][basic element]]
**** [[https://www.pullrequest.com/blog/secure-file-uploads-in-flask-filtering-and-validation-techniques/][in flask]]
**** [[https://stackoverflow.com/questions/7076042/what-mime-type-should-i-use-for-csv][the mimetypethat should be used]]
**** We need database tracking each uploads.
#+begin_src python

  class File(db.Model):
         id = db.Column(db.Integer, primary_key=True)
         filename = db.Column(db.String(200), nullable=False)
         filepath = db.Column(db.String(300), nullable=False)
         created_at = db.Column(db.DateTime, default=datetime.utcnow)

         def __repr__(self):
             return f"File('{self.filenname}', '{self.filepath}')"

  # and do the usual db.session.add() db.commit()

#+end_src
*** read about Render persistent disks. 
**** navigating and modifying the folders from inside Render Dashboard shell tab
**** [[https://community.render.com/t/files-in-render-disk-are-being-lost-with-starter-service/17440/4][use /data path]]. Being root is fine, it will persistent and be writable
**** [[https://render.com/docs/disks?_gl=1*1c3j8ip*_gcl_au*MTU0Nzc2NjkxOS4xNzQyNDUzMTcw*_ga*NDI4NTk4MDM0LjE3NDI0NTEyMTU.*_ga_QK9L9QJC5N*czE3NDY3MTU2NjEkbzExJGcxJHQxNzQ2NzE1ODkwJGo1JGwwJGgw#transferring-files][persistent disk]]
**** python write to disk
#+begin_src python

  import os

disk_path = "/mnt/data"  # Path to the persistent disk
folder_name = "my_folder"
folder_path = os.path.join(disk_path, folder_name)

try:
    os.makedirs(folder_path, exist_ok=True)
    print(f"Folder '{folder_name}' created successfully at '{folder_path}'.")
except Exception as e:
    print(f"An error occurred: {e}")

#+end_src
**** [[https://magic-wormhole.readthedocs.io/en/latest/welcome.html][magic wormhole to download files]]
**** [[https://www.youtube.com/watch?v=oFrTqQw0_3c][magic wormhole]]
**** [[https://render.com/docs/disks?_gl=1*18deote*_gcl_au*MTU0Nzc2NjkxOS4xNzQyNDUzMTcw*_ga*NDI4NTk4MDM0LjE3NDI0NTEyMTU.*_ga_QK9L9QJC5N*czE3NDY3MTI2NDQkbzEwJGcxJHQxNzQ2NzEzMzQ0JGoyMSRsMCRoMA..][monitoring Render persistent disk]]
**** And why people keep mentioning cron jobs.
*** to deploy our system, from scratch with Admin AND Users. We should have an entry point that searches an admin. If True, redirect to main_page, Else admin_register.html
**** this means we need to create our password reset email delivery system.
**** only then can we finally protect all our end points
*** We need to time our kill_events() query. 
**** https://flask-sqlalchemy.readthedocs.io/en/stable/record-queries/
*** Faster deletes SQL:
**** https://www.sqlservercentral.com/articles/how-to-delete-large-amounts-of-data
*** kill_events (thats with an S!!), we only did the kill_event/<int:id>
*** Flask session timeout:
**** [[https://mulgrew.me/posts/session-timeout-flask.html][this one has module g, dont know]]
**** [[https://stackoverflow.com/questions/11783025/is-there-an-easy-way-to-make-sessions-timeout-in-flask][more basic timeout]]
*** for null check, we need feedback for the users
*** REMEMBER to include requst_limit to prevent DDOS
*** Admin from AI, yuck:
#+begin_src python

    from flask import Flask, redirect, url_for
    from flask_login import LoginManager, UserMixin, login_required, current_user

  app = Flask(__name__)
  app.config['SECRET_KEY'] = 'your_secret_key'  # Replace with a strong, randomly generated key
  login_manager = LoginManager()
  login_manager.init_app(app)

  class User(UserMixin):
      def __init__(self, id, username, password, is_admin=False):
          self.id = id
          self.username = username
          self.password = password
          self.is_admin = is_admin

      def get_id(self):
          return str(self.id)

  # Example user data (replace with database interaction)
  users = {
      1: User(1, 'admin', 'adminpass', is_admin=True),
      2: User(2, 'user', 'userpass')
  }

  @login_manager.user_loader
  def load_user(user_id):
      return users.get(int(user_id))

  @app.route('/admin')
  @login_required
  def admin_page():
      if current_user.is_admin:
          return 'Welcome, Admin!'
      else:
          return redirect(url_for('home_page'))

  @app.route('/')
  def home_page():
      return 'Welcome, User!'

  if __name__ == '__main__':
      app.run(debug=True)

#+end_src
*** Password reset link from AI, yuck:
#+begin_src python

  from flask import Flask, render_template, request, url_for
  from itsdangerous import URLSafeTimedSerializer, SignatureExpired
  from flask_mail import Mail, Message

  app = Flask(__name__)
  app.config['SECRET_KEY'] = 'your_secret_key' # Replace with a strong, random key
  app.config['MAIL_SERVER'] = 'smtp.example.com'
  app.config['MAIL_PORT'] = 587
  app.config['MAIL_USE_TLS'] = True
  app.config['MAIL_USERNAME'] = 'your_email@example.com'
  app.config['MAIL_PASSWORD'] = 'your_email_password'

  mail = Mail(app)
  s = URLSafeTimedSerializer(app.config['SECRET_KEY'])

  @app.route('/forgot_password', methods=['GET', 'POST'])
  def forgot_password():
      if request.method == 'POST':
          email = request.form['email']
          token = s.dumps(email, salt='password-reset-salt')
          link = url_for('reset_password', token=token, _external=True)
          msg = Message('Password Reset Request', sender='noreply@example.com', recipients=[email])
          msg.body = f"Click this link to reset your password: {link}"
          mail.send(msg)
          return 'Password reset link sent to your email.'
      return render_template('forgot_password.html')

  @app.route('/reset_password/<token>', methods=['GET', 'POST'])
  def reset_password(token):
      try:
          email = s.loads(token, salt='password-reset-salt', max_age=3600) # Token valid for 1 hour
      except SignatureExpired:
          return 'The password reset link is expired.'
      except Exception as e:
           return f'Invalid password reset link. {e}'

      if request.method == 'POST':
          new_password = request.form['new_password']
          # Update password in database for the user with this email
          return 'Password updated successfully.'
      return render_template('reset_password_form.html', token=token)

  if __name__ == '__main__':
      app.run(debug=True)

#+end_src
*** to avoid confirm form resubmission, we add these (sugested by AI), to redirect to the same form (GET). So going back, simply resend a GET request.
#+begin_src python

  from flask import Flask, render_template, request, redirect, url_for

  app = Flask(__name__)

  @app.route('/form', methods=['GET', 'POST'])
  def my_form():
      if request.method == 'POST':
          # Process the form data
          # ...
          # Redirect to a success page or the same form page (GET)
          return redirect(url_for('my_form'))
      return render_template('form.html')

  if __name__ == '__main__':
      app.run(debug=True)

#+end_src
*** we should put all db.session.commit() or db.session.close(), even after every SELECT queries, before opening endpoint template
*** to split our app.py later on before it becomes more thn 5000 lines, from AI (yuck):
#+begin_src python

  # auth.py ==================================================
    from flask import Blueprint

    auth_bp = Blueprint('auth', __name__, url_prefix='/auth')

    @auth_bp.route('/login')
    def login():
        return 'Login Page'

    @auth_bp.route('/register')
    def register():
        return 'Register Page'

    # blog.py ==================================================
    from flask import Blueprint

    blog_bp = Blueprint('blog', __name__, url_prefix='/blog')

    @blog_bp.route('/')
    def index():
        return 'Blog Index'

    @blog_bp.route('/create')
    def create():
        return 'Create New Post'

    # app.py ==================================================
    from flask import Flask
    from auth import auth_bp
    from blog import blog_bp

    app = Flask(__name__)

    app.register_blueprint(auth_bp)
    app.register_blueprint(blog_bp)

    if __name__ == '__main__':
        app.run(debug=True)

#+end_src
*** remember to convince Terry, that publishing online and locally on laptop are 2 very different things. Online, you have to consider DDOS and everything. Becoz anything can happen when you decide to make something online. Sorry to sound technial but thats it. Of course, modern framework have ways of making it easier, but it still requires reading.
*** Stupid app, we should recheck all of our validations, should be FIDE
*** Security:
**** https://snyk.io/blog/secure-python-flask-applications/
** SQLAlchemy:
*** https://docs.sqlalchemy.org/en/20/orm/session_basics.html
*** https://docs.sqlalchemy.org/en/20/core/pooling.html
*** https://docs.sqlalchemy.org/en/20/core/connections.html#sqlalchemy.engine.Engine.dispose
*** https://docs.sqlalchemy.org/en/20/core/pooling.html#dealing-with-disconnects
*** https://docs.sqlalchemy.org/en/20/tutorial/index.html
*** https://docs.sqlalchemy.org/en/20/core/engines.html#engine-configuration
** Emacs
*** [[https://jackjamison.xyz/blog/emacs-garbage-collection/][garbage collection, basically to reduce stuttering]]
*** [[https://kitchingroup.cheme.cmu.edu/blog/2016/11/10/Persistent-highlighting-in-Emacs/][The Kitchin Research Group]]
*** [[https://github.com/rougier/svg-tag-mode][really cool, possible improvement to our html editing]]
*** [[https://github.com/io12/good-scroll.el][supersmooth scrolling]]
*** [[https://github.com/minad/org-modern][org-modern look]]
*** join multi into 1 without spaces
*** [[https://karthinks.com/software/fringe-matters-finding-the-right-difference/][another cool blog]]
*** try save-excursion and return in quit for select-hydra. Or the similar trick in your word-hydra
** We need to refactor error message of upload, what do we do with all the ID info?? Maybe theres no need for it.
*** create checks for duplicate events
*** we should add timestamp naming for CSV files
** Python web app security practices:
*** https://qwiet.ai/hacking-and-securing-python-applications/
** RUST:
*** Some recommended (please go through them, defo begging you...) resources:
**** Install Rust - Rust Programming Language (A must!)
****     Official Introduction to Bevy (Highly recommended!)
****     What is an ECS? feat. Bevy and Rust (Entity-Component-System, a core concept in Bevy, explained in a video by Chris Biscardi)
****     Game Engine Of The Future - YouTube (A very fun and nice introduction to the Bevy engine by TanTan! Definitely not trying to convince you to switch over to Bevy for your future projects hahaha)
****     Bevy Playground (Try Bevy on your browser now!!!! Highly recommended!)
**** Contact us organizers at
****  +60164410216 (Ivan Tham)
****     +60129851338 (Jeffrey Lean)
****     +60173389100 (Nixon)
**** [[https://t.me/+dF46Fly4A_BjOTJl][subscribe for more events]]
****  https://rust-malaysia.github.io/meetup/
**** [[https://www.youtube.com/playlist?list=PL85XCvVPmGQh3V0Pz-_xFm6VAUTR4aLUw][YouTube]]
**** [[https://nixon-voxell.itch.io/lumina][game1]]
**** [[https://github.com/nixon-voxell/lumina][game2]]
**** [[https://bevyengine.org/learn/quick-start/getting-started/setup/][install bevy]]
**** [[https://www.rust-lang.org/tools/install][install rust]]
**** [[https://bevyengine.org/learn/quick-start/introduction/][introduction to bevy]]
**** [[https://www.youtube.com/watch?v=AirfWcVOEHw][Entity Component System]]
**** [[https://www.youtube.com/watch?v=sfFQrhajs6o][YouTube introduction]]
**** [[https://learnbevy.com/playground][bevy playground]]
**** 
** Emacs, improve your web-mode, make it highlight matching tags
*** try Dirvish 
** Very good source of information for SQLALCHEMY models to dictionary!!
** Make sure you share-rate is above 3%
** Post in Pythons Group Malaysia, your willingness to work for Django, having experience in Flask and used Django for a side project.
** You managed to get the attention of Nick and Nardine
**** Time to post something REALLY clickbaity
**** Use a cartoon image of yourself, maybe Gimpify your face.
** Present your Emacs teaching class inside University of Malaya International students main discussion group. Gauge reaction
** Obsidian config, we should include obsidian image link generation, and auto-file deletion (Obsidian side)
#+begin_src lisp

  (defun refactor--process-files (dir-name policy)
  (setq dir-files (directory-files dir-name))
  (dolist (element dir-files)
    (unless (or (string= "." element)
		(string= ".." element)
		(file-directory-p element))
      (find-file element)
      (print element)
      (funcall policy (point-min) (point-max))
      (save-buffer))))

(defun untabify-dir ()
  "Untabify the contents of a folder"
  (interactive)
  (let ((dir-name
	 "~/storage/shared/Documents/my-org-and-obsidian/my-org-notes"
	 ))
    (refactor--process-files dir-name 'untabify))
  )




;; NOTE: since this is only a single execution everytimme,
;; and we only have a single project,
;; we dont need to play around putting "my-org" into a variable
(setq org-publish-project-alist
      '(("my-org"
	 :base-directory "~/storage/shared/Documents/my-org-and-obsidian/my-org-notes"
	 :recursive t
	 :publishing-function org-md-publish-to-md
	 :publishing-directory "~/storage/shared/Documents/my-org-and-obsidian/my-oob-notes"
	 :base_extension "org"
	 :with-sub-superscript nil
	 :section-numbers nil
	 :base-extension "org"
	 :with-toc nil)))

(setq rd-a-project (assoc "my-org" org-publish-project-alist))
(setq ardie/list-of-post-publish 'nil)
(setq ardie/list-of-previous-publish 'nil)

;; initilialize first, otherwise, org-publish-cache produces error
(org-publish-initialize-cache "my-org")



(dolist (rd-long-filename (directory-files-recursively "~/storage/shared/Documents/my-org-and-obsidian/my-oob-notes" "\\.md$"))
  (delete-file rd-long-filename)
  )


(org-publish-project "my-org" t)




(save-buffers-kill-terminal)


#+end_src
** Instagram, YouTube:
*** Join KLCC groups, Malaysian craft groups, Malaysian art group, Southeast Asian music groups to target more than 100 views by Saturday.
** https://www.interview.micro1.ai/intro/micro1/?candidate=698fa6e4-4849-4b2a-90cf-db3e7d8d3816&ping=ok
** Social media posting:
*** Think of a way to post again about you direcitonal keys (rare bigrams, rare key combination). Basically a cool way to use key-chords in Emacs
*** Im not sure if this might be userful to anyone, butI found a clever way to make Python more readable when lots of nesting is involved. I rely on themes that make comments color bolder. So I put #endstuff at the end of certain control flow, like important ifs and elses. I find that I can skip code better this way when reading. Yes OOP isnt exactly next-level, but this makes such a big difference. 
** Jobs:
*** [[https://app.outlier.ai/en/expert][Outlier tasks]]
*** micro1
*** Interesting companies
**** PostCo: really likes open minded developers, who learn rare stuff. says want developers open to learning Ruby on Rails 
**** Hero Plus Group: uses Ruby in Rails. Specifically mentions Flask.
*** https://my.hiredly.com
*** https://www.maukerja.my/
*** https://www.jorawork.com/
*** https://www.ricebowl.my
*** Read about orchestration and automation
*** about Google cloud platforms: Snowflake and Databricks (good to have)
*** maybe SQL and Azure diffs
** We need to test duplicates of everything, but for now only FIDE ID
** Social:
*** Post about how money management mindset is detrimental to development of skill that truly matters
** Python:
*** Learn Polars
*** A good Flask read on getting data back from DB, from another good site called [[https://python-adv-web-apps.readthedocs.io/en/latest/flask_db2.html][python-adv-web-apps]]
*** not a good bulk update tutorial, but its got exampe of [[https://github.com/sqlalchemy/sqlalchemy/discussions/10537][python tricks]] with lists
*** Spend time reading a Github example [[https://github.com/adityaShar24/Social-Media-Backend?tab=readme-ov-file][Flask social media]] app, for MORE examples
*** [[https://www.devdungeon.com/content/run-python-wsgi-web-app-waitress][READ WSGI]]
*** What is this [[https://austinpoor.com/blog/plots-with-jinja][SVG]] experiment. This one is [[https://www.react-graph-gallery.com/build-axis-with-react][from react]]
*** Good [[https://www.peterspython.com/en/blog/sqlalchemy-using-cascade-deletes-to-delete-related-objects][link]] on Python Flask SQLalchemy on cascade-deletes. Especially note the "Database object deletes using ForeignKey ON DELETE CASCADE"
** Its very important to be knowledgable on common practices of "deploying to production". So READ [[https://flask.palletsprojects.com/en/stable/tutorial/deploy/][THIS]]. Also, read on lots of [[https://flask.palletsprojects.com/en/stable/deploying/][CONCEPTS]]
** We are going to READ on FILE VALIDATION, COMMON skill:
*** https://imagekit.io/blog/how-to-upload-files-in-html/
** The best way to read CSS frameworks, while learning an actual project in your real work, while also spending time doing your personal project, is to read all the documentation of several. Im currently reading both Bootstrap and Tailwind CSS. The frameworks come from different perspectives and opinions. And trying to get into the mind fo the guys who created the "language", means trying to think "what is the creator trying to convey", when reading all their documentations. 
** Think of a project to use with typst
*** Also write something about typst
** We are going to publish our site, either in render or fly.io
** Remember to move image files from Hanifas laptop during the meeting later.
** Progress
*** write about how you successfully did flex properly (3 child divs). Also flex and grid-cols dont mix very well. Remember to note how you read repeatedly sources from Bootstrap and Tailwind docs to get a sense of  CSS logic. You also tried to memorize slightly tailwind CSS. 
*** Do you want to write about thinking in terms of context. 
** read about [[https://www.linkedin.com/pulse/power-css-organizing-data-rows-columns-shydra-murray-h8t9c/][Flexbox]] please and differences between [[https://pieces.app/blog/top-5-best-css-frameworks-for-responsive-web-design-in-2024][css frameworks]]
** from our phone link
** Watch:
*** https://www.youtube.com/watch?v=YRvBQdJlBeo
*** https://www.youtube.com/watch?v=421twOHytG0
*** https://www.youtube.com/watch?v=1MSy6epsU6Y
*** https://www.youtube.com/watch?v=9UIIMBqq1D4
*** https://www.youtube.com/watch?v=afA0b5ygTyA
** Emacs:
*** Also, finish this somewhere, about starting, and its not that simple, becoz things go wrong, Emacs tends to hide it, when use the usual shell-command, so instead, your UNIT OF ABSTRACTION must be the process:
**** http://xahlee.info/emacs/emacs/elisp_start_external_process.html
*** Convincing others:
**** Non-destructive ways to test Emacs packages:
***** use the try package. Then do the usual use-package, or any normal config for that package you found online.
*** create a emacs script that calls magick on any dired
*** try perspective el
*** Also try Emacs Application Framework on a new laptop
*** You like trying cool custom personalized Emacs el. This one is useful simpler bookmark, might help a lot in you html editing: [[https://github.com/joodland/bm][here]]
*** we are professional, so we need to make Python SUBMIT to us. [[https://emacs.stackexchange.com/questions/3372/coloring-indentation-levels][Color diff indentation levels]]
*** we need another Hydra to ehsily go to other-window using (other-window 1)
*** [[https://zck.org/define-keymap][keymap]] very cool stuff
*** web-mode-element-wrap must be hydra-ed. We also need to auto-select a whole delimiter. But first try the stackoverflow templating engine trick.
*** We need to learn this Emacs [[https://emacs.stackexchange.com/questions/23810/getting-proper-indentation-for-python-flask-templates][templating indent]] mode thingy
*** we are going to try to use enriched mode to color Emacs
** Store this cool [[https://www.andrewvillazon.com/move-data-to-db-with-sqlalchemy/][declarative_base]] link, coz we managed to make it work for bulk upload. Note how you dont need to remove your usual model in your class. The declarative_model simply maps your class with the existing table.
** override modus theme, a masterpiece theme according to 1 guy, into a [[https://github.com/idlip/haki/tree/haki][high contrast tasheme]]
** Store this [[https://yannesposito.com/posts/0020-cool-looking-org-mode/index.html][cool Emacs link]] somewhere
** Copy Hanifas key
** readng technical software/programming documentation for beginners requires a balance of conceptual and technical description.
** contact African guy again
** Social
*** Respond to the Daniel in Developer Kaki
*** ISO for free theaded rod more than 2 feet at least and a few matching nuts
** Python project notes, jot down the folowing:
*** [[https://jinja.palletsprojects.com/en/stable/templates/][we should read more Jinja, just read documentation, spend 1 hour]]
*** [[https://stackoverflow.com/questions/5458048/how-can-i-make-a-python-script-standalone-executable-to-run-without-any-dependen][pythinstaller -f will create a proper .exe]]
*** [[https://stackoverflow.com/questions/16981805/how-does-templating-engine-work][templating engine pedagogy]]
*** [[https://stackoverflow.com/questions/7460938/how-to-run-a-python-script-in-a-web-page][ways to embed python script in website. But maybe we dont need this.]]
*** [[https://skulpt.org/using.html][skulpt is cheat for running python like its javascript]]
*** [[https://flask.palletsprojects.com/en/stable/][Im not sure why i was reading about Flask]]
** TODO 
*** [[https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Server-side/Django/Models][we REALLY need to read about MODELS before proceeding with Django]]
** TODO 
*** post about why you write in Emacs. a constant in the software world, is bad documentation.
** I read about ketamine, psilocybin and alcohol, and also neurotransmitter GABA
*** https://adf.org.au/drug-facts/ketamine/
*** https://www.psychologytoday.com/intl/blog/culturally-speaking/202312/the-magic-behind-the-molecules-psilocybin-vs-alcohol
*** https://my.clevelandclinic.org/health/articles/22857-gamma-aminobutyric-acid-gaba
**** Researchers are still studying the effects of increased level of GABA, for High blood pressure, Insomnia, Diabetes.
*** GABA presence in food:
****  kimchi, miso and tempeh
**** green, black and oolong tea
**** brown rice, soy and adzuki beans, chestnuts, mushrooms, tomatoes, spinach, broccoli, cabbage, cauliflower, Brussels sprouts, sprouted grains and sweet potatoes
** TODO 
*** Study example uses of defmacro in Emacs
** [[https://ringgitplus.com/en/blog/income-tax/how-to-file-your-taxes-for-the-first-time.html][read on how to do e-filing for d first time]]
** wrote a little n Scriabin nocturne
** Read about your Hugo
*** Understand layouts and everything inside (partials, shortcodes, _default)
*** When you replaced your /layouts folder, it fails, simple rename back /_layouts
* Piano (no social media progress)
** You need to buy a stand
* More org notes
** For your recipes
*** Balti
*** some YSAC u did before
*** your chocolate donut (combination of Jamie Olivers friend & Gordon Ramsay)
** For suit, call these numbers for material. (Mention that Sparkle, Lot L-D 1&2, Pudu Plaza, KL recommended these guys)
*** 011 70018033
*** 013 343 2049
*** 018 398 5048
* Address:
** G-12-30, BLOCK G MENTARI COURT Gate 1, Jalan PJS 8/9, Bandar Sunway, 46150 Petaling Jaya, Selangor, Malaysia
