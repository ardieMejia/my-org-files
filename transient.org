#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="zoho_ticket.css" />
#+OPTIONS:  toc:nil num:nil ^:nil


* Reminder
** Remember what Chomsky said
*** societies ban certain discussions on purpose to  keep the illusion  of freedom of discussion going. 
*** Most reporters worth their salt, take their job as a mostly a joke. They know the illusion of freedom of speech
*** remember, you made the FUCKING d minor prelude??
* What to do today:
** write this somewhere:
*** a blocking custom dialog like [[https://stackoverflow.com/questions/56130393/jquery-custom-confirm-dialog][this]]. he native confirm function, like alert, is blocking, and prevents any further script execution or page interaction until the user responds to the prompt. This has no equivalence in anything you can write in the GUI.
** write this somewhere:
*** we can actually learn MORE about JS, fromh this javascript
#+begin_src javascript


  console.log($(this))

#+end_src
** we need to create a backup system, possible using rsync
** buttons scientists, store this somewhere:
*** https://adrianroselli.com/2019/06/target-size-and-2-5-5.html
** we have to save this somewhere:
*** [[https://www.w3schools.com/css/css_display_visibility.asp][link]]: CSS display property commonly used by Javascript
** Terry:
*** event names should be unique at DB level
*** our member-front page needs a reload check
*** CRSF error hndler, otherwise it becomes dull: [[https://www.google.com/search?client=ubuntu&channel=fs&q=flask+check+if+crsf+token+expired+and+redirect][link]]
*** when a member deletes an event, it should also appropriate descendents => FormQuestionAnswers, and also refill FormQuestionAnswersDeleted, think of recalling the same function
*** we need to do element ebhaviour for subgroups as well
*** a link beside form-creator, or tooltip that suggests ideas for fieldnames
*** we need to disable disable add buttons on subgroup leading question. Also need to disable values when subgroup button is selected (although it doesnt really matter)
*** rename #tournament_name as someting very unique, its too generic, OR remove all IDs from form-template elements, since that is not used
*** check that overwritten submissions gets carried into File model, and file sumission stores minutes and hours of day. And also, that 
*** IMPORTANT: check multiple file inputs and see the effect of log in form_submission()
*** we should put "storage", root path of uploads, into a global var
*** we should check ALL checkboxes input, including our downloader
*** we should write this somewhere. Jinja when looping through dict, has NO "awareness" of dict structure by default hence has to resort to jinja tricks like these:
#+begin_export web

{% for membersAnswer in membersAnswers.values() %}
    {% if loop.first %}

	{% for fieldname,answer in membersAnswer.items() %}
	    {% if answer.subgroupId is none %}
		<th class="w-20 p-4 bg-yellow-400">
		    {{ fieldname }}
		</th>
	    {% else %}
		<th class="w-20 p-4 border-x-2 border-yellow-600 bg-yellow-200 font-light">
		    {{ fieldname }}
		</th>
	    {% endif %}
	{% endfor %}



    {% endif %}
{% endfor %}



#+end_export
*** for "form creator" button, we can add deletion of FormQuestionAnswersDeleted
*** UI: we need to limit the subgroup creation (leadingquestion) to radio only, UI level constraint 
*** we need to put in element form creator, checks for "-" for empty text box default values
*** we need to stop at UI element levvel , all spaces in fieldname 
*** UI idea: form_creator, dropdown will have leading question option, which enable subgroupname onselect()
*** when memebrs answer fhe same form again, it overwrites. we havent done that yet
*** questionString or questionstring??
*** file input in template and subgroup-template
*** we need more tooltips, for subgroup creator too
*** we need to rename model data member "type" to something else
*** withdraw event, clause to warn no refund. 50% refund. 0% refund.
*** rather than terminating event completely on closing date, we warn/info user on closing date
*** the type, eligibility, important, can be put at top of form or dropdown display
*** create kill all form button that will kill altogether eventFormQuestions, eventFormQuestionAnaswers, and eventFormQuestionSubgroup
*** our admin doesnt session timeout
[[https://www.freekb.net/Article?id=4560][this link]]
*** for our form creator:
**** our forms will have expire date, Terry will have to personally manage late expcetions if he wants.
*** for kill_event, we need to replace render_template with redirect
** Tests:
*** Put some tests in case of wrongly named CSV files
*** Test form link when there is no matching event, or no event entirely
** Write somewhere:
*** Deleting data from DBS is [[https://softwareengineering.stackexchange.com/questions/159232/should-we-ever-delete-data-in-a-database][usually a good idea]]
** Prototype:
*** We have a subGroupId, unique, nullable, mostly useless except for subgroups.

FormStructure
| eventid | formid   | fieldname | type | values | questionString | subGroupId | 

FormSubGroup
| subGroupId | fieldname | type | values | questionString | 

*** [[https://www.silvaneves.org/deleting-old-items-in-sqlalchemy][removing old entries]]
*** Form creator:
**** We need to show content of database more apparently, instead of hiding behind interface. The admin must completely understand what is inside.
*** replace all request.args.get('mcfid') occurence with current_user.mcfId
*** for uploads
**** [[https://www.pullrequest.com/blog/secure-file-uploads-in-flask-filtering-and-validation-techniques/][secure file uplaods]]
**** [[https://www.geeksforgeeks.org/uploading-and-downloading-files-in-flask/][file upload basics]]
**** [[https://blog.miguelgrinberg.com/post/handling-file-uploads-with-flask][miguel file uploads]]
**** [[https://imagekit.io/blog/how-to-upload-files-in-html/][basic element]]
**** [[https://www.pullrequest.com/blog/secure-file-uploads-in-flask-filtering-and-validation-techniques/][in flask]]
**** [[https://stackoverflow.com/questions/7076042/what-mime-type-should-i-use-for-csv][the mimetypethat should be used]]
**** We need database tracking each uploads.
#+begin_src python

  class File(db.Model):
         id = db.Column(db.Integer, primary_key=True)
         filename = db.Column(db.String(200), nullable=False)
         filepath = db.Column(db.String(300), nullable=False)
         created_at = db.Column(db.DateTime, default=datetime.utcnow)

         def __repr__(self):
             return f"File('{self.filenname}', '{self.filepath}')"

  # and do the usual db.session.add() db.commit()

#+end_src
*** read about Render persistent disks. 
**** navigating and modifying the folders from inside Render Dashboard shell tab
**** [[https://community.render.com/t/files-in-render-disk-are-being-lost-with-starter-service/17440/4][use /data path]]. Being root is fine, it will persistent and be writable
**** [[https://render.com/docs/disks?_gl=1*1c3j8ip*_gcl_au*MTU0Nzc2NjkxOS4xNzQyNDUzMTcw*_ga*NDI4NTk4MDM0LjE3NDI0NTEyMTU.*_ga_QK9L9QJC5N*czE3NDY3MTU2NjEkbzExJGcxJHQxNzQ2NzE1ODkwJGo1JGwwJGgw#transferring-files][persistent disk]]
**** python write to disk
#+begin_src python

  import os

disk_path = "/mnt/data"  # Path to the persistent disk
folder_name = "my_folder"
folder_path = os.path.join(disk_path, folder_name)

try:
    os.makedirs(folder_path, exist_ok=True)
    print(f"Folder '{folder_name}' created successfully at '{folder_path}'.")
except Exception as e:
    print(f"An error occurred: {e}")

#+end_src
**** [[https://magic-wormhole.readthedocs.io/en/latest/welcome.html][magic wormhole to download files]]
**** [[https://www.youtube.com/watch?v=oFrTqQw0_3c][magic wormhole]]
**** [[https://render.com/docs/disks?_gl=1*18deote*_gcl_au*MTU0Nzc2NjkxOS4xNzQyNDUzMTcw*_ga*NDI4NTk4MDM0LjE3NDI0NTEyMTU.*_ga_QK9L9QJC5N*czE3NDY3MTI2NDQkbzEwJGcxJHQxNzQ2NzEzMzQ0JGoyMSRsMCRoMA..][monitoring Render persistent disk]]
**** And why people keep mentioning cron jobs.
*** to deploy our system, from scratch with Admin AND Users. We should have an entry point that searches an admin. If True, redirect to main_page, Else admin_register.html
**** this means we need to create our password reset email delivery system.
**** only then can we finally protect all our end points
*** We need to time our kill_events() query. 
**** https://flask-sqlalchemy.readthedocs.io/en/stable/record-queries/
*** Faster deletes SQL:
**** https://www.sqlservercentral.com/articles/how-to-delete-large-amounts-of-data
*** kill_events (thats with an S!!), we only did the kill_event/<int:id>
*** Flask session timeout:
**** [[https://mulgrew.me/posts/session-timeout-flask.html][this one has module g, dont know]]
**** [[https://stackoverflow.com/questions/11783025/is-there-an-easy-way-to-make-sessions-timeout-in-flask][more basic timeout]]
*** for null check, we need feedback for the users
*** REMEMBER to include requst_limit to prevent DDOS
*** Admin from AI, yuck:
#+begin_src python

    from flask import Flask, redirect, url_for
    from flask_login import LoginManager, UserMixin, login_required, current_user

  app = Flask(__name__)
  app.config['SECRET_KEY'] = 'your_secret_key'  # Replace with a strong, randomly generated key
  login_manager = LoginManager()
  login_manager.init_app(app)

  class User(UserMixin):
      def __init__(self, id, username, password, is_admin=False):
          self.id = id
          self.username = username
          self.password = password
          self.is_admin = is_admin

      def get_id(self):
          return str(self.id)

  # Example user data (replace with database interaction)
  users = {
      1: User(1, 'admin', 'adminpass', is_admin=True),
      2: User(2, 'user', 'userpass')
  }

  @login_manager.user_loader
  def load_user(user_id):
      return users.get(int(user_id))

  @app.route('/admin')
  @login_required
  def admin_page():
      if current_user.is_admin:
          return 'Welcome, Admin!'
      else:
          return redirect(url_for('home_page'))

  @app.route('/')
  def home_page():
      return 'Welcome, User!'

  if __name__ == '__main__':
      app.run(debug=True)

#+end_src
*** Password reset link from AI, yuck:
#+begin_src python

  from flask import Flask, render_template, request, url_for
  from itsdangerous import URLSafeTimedSerializer, SignatureExpired
  from flask_mail import Mail, Message

  app = Flask(__name__)
  app.config['SECRET_KEY'] = 'your_secret_key' # Replace with a strong, random key
  app.config['MAIL_SERVER'] = 'smtp.example.com'
  app.config['MAIL_PORT'] = 587
  app.config['MAIL_USE_TLS'] = True
  app.config['MAIL_USERNAME'] = 'your_email@example.com'
  app.config['MAIL_PASSWORD'] = 'your_email_password'

  mail = Mail(app)
  s = URLSafeTimedSerializer(app.config['SECRET_KEY'])

  @app.route('/forgot_password', methods=['GET', 'POST'])
  def forgot_password():
      if request.method == 'POST':
          email = request.form['email']
          token = s.dumps(email, salt='password-reset-salt')
          link = url_for('reset_password', token=token, _external=True)
          msg = Message('Password Reset Request', sender='noreply@example.com', recipients=[email])
          msg.body = f"Click this link to reset your password: {link}"
          mail.send(msg)
          return 'Password reset link sent to your email.'
      return render_template('forgot_password.html')

  @app.route('/reset_password/<token>', methods=['GET', 'POST'])
  def reset_password(token):
      try:
          email = s.loads(token, salt='password-reset-salt', max_age=3600) # Token valid for 1 hour
      except SignatureExpired:
          return 'The password reset link is expired.'
      except Exception as e:
           return f'Invalid password reset link. {e}'

      if request.method == 'POST':
          new_password = request.form['new_password']
          # Update password in database for the user with this email
          return 'Password updated successfully.'
      return render_template('reset_password_form.html', token=token)

  if __name__ == '__main__':
      app.run(debug=True)

#+end_src
*** to avoid confirm form resubmission, we add these (sugested by AI), to redirect to the same form (GET). So going back, simply resend a GET request.
#+begin_src python

  from flask import Flask, render_template, request, redirect, url_for

  app = Flask(__name__)

  @app.route('/form', methods=['GET', 'POST'])
  def my_form():
      if request.method == 'POST':
          # Process the form data
          # ...
          # Redirect to a success page or the same form page (GET)
          return redirect(url_for('my_form'))
      return render_template('form.html')

  if __name__ == '__main__':
      app.run(debug=True)

#+end_src
*** we should put all db.session.commit() or db.session.close(), even after every SELECT queries, before opening endpoint template
*** to split our app.py later on before it becomes more thn 5000 lines, from AI (yuck):
#+begin_src python

  # auth.py ==================================================
    from flask import Blueprint

    auth_bp = Blueprint('auth', __name__, url_prefix='/auth')

    @auth_bp.route('/login')
    def login():
        return 'Login Page'

    @auth_bp.route('/register')
    def register():
        return 'Register Page'

    # blog.py ==================================================
    from flask import Blueprint

    blog_bp = Blueprint('blog', __name__, url_prefix='/blog')

    @blog_bp.route('/')
    def index():
        return 'Blog Index'

    @blog_bp.route('/create')
    def create():
        return 'Create New Post'

    # app.py ==================================================
    from flask import Flask
    from auth import auth_bp
    from blog import blog_bp

    app = Flask(__name__)

    app.register_blueprint(auth_bp)
    app.register_blueprint(blog_bp)

    if __name__ == '__main__':
        app.run(debug=True)

#+end_src
*** remember to convince Terry, that publishing online and locally on laptop are 2 very different things. Online, you have to consider DDOS and everything. Becoz anything can happen when you decide to make something online. Sorry to sound technial but thats it. Of course, modern framework have ways of making it easier, but it still requires reading.
*** Stupid app, we should recheck all of our validations, should be FIDE
*** Security:
**** https://snyk.io/blog/secure-python-flask-applications/
** SQLAlchemy:
*** https://docs.sqlalchemy.org/en/20/orm/session_basics.html
*** https://docs.sqlalchemy.org/en/20/core/pooling.html
*** https://docs.sqlalchemy.org/en/20/core/connections.html#sqlalchemy.engine.Engine.dispose
*** https://docs.sqlalchemy.org/en/20/core/pooling.html#dealing-with-disconnects
*** https://docs.sqlalchemy.org/en/20/tutorial/index.html
*** https://docs.sqlalchemy.org/en/20/core/engines.html#engine-configuration
** Emacs:
*** we need a Emacs feature/mode that provides some cool jquery selector shortcut
*** we need to really try javascript console in Emacs, we forgot where th link was
*** we should really learn all the paredit tricks
*** there are several ways to exit hydras in fact, some more stable than others (becoz of nested hydras
**** [[https://emacs.stackexchange.com/questions/36597/returning-to-the-parent-hydra][link]]
**** [[https://emacspeak.blogspot.com/2020/09/emacs-paired-commands-efficient.html][repeatable hydra yank]]
*** warning level for Emacs config setup, not sure if we ever need it:
**** [[https://emacs.stackexchange.com/questions/78800/how-to-disable-automatic-appearance-of-warnings-buffer-in-emacs][warning levels]]
*** combobulate:
**** [[https://github.com/mickeynp/combobulate][main repo]]
**** 
*** Company mode readings:
**** [[https://www.reddit.com/r/emacs/comments/q8u2l4/unsetting_return_in_company_mode/][finally disabled company mode completion with better keybindings company-active-map]]
**** [[https://github.com/company-mode/company-mode/issues/640][variuos ideas of use-package for company-mode]]
**** [[https://company-mode.github.io/manual/Getting-Started.html#Usage-Basics][good verbose doc]]
*** Read about Bookmarks+ or some other way of preserving state between session
*** Read about elpy-rpc, and why do we have an elpy-rpc-buffer, it sounds cool but i dont know what its used for
*** building
**** https://www.masteringemacs.org/article/speed-up-emacs-libjansson-native-elisp-compilation
**** [[https://www.masteringemacs.org/article/how-to-get-started-tree-sitter][building emacs with tree sitter support]]
**** [[https://www.masteringemacs.org/article/whats-new-in-emacs-29-1][emacs 29 whats new]]
**** [[https://apple.stackexchange.com/questions/81930/compiling-ns-cocoa-emacs-on-osx-with-svg-support][emacs build on mac with svg support]]
**** [[https://gist.github.com/abidanBrito/2b5e447f191bb6bb70c9b6fe6f9e7956][emacs build on gist github]]
**** [[https://www.youtube.com/watch?v=MsP5QF2Ajdw][building emacs bit-mage]]
**** [[https://www.rahuljuliato.com/posts/compiling_emacs_30_1][compile emacs 30 rahul]]
**** [[https://batsov.com/articles/2021/12/19/building-emacs-from-source-with-pgtk/][build emacs with pgtk]]
**** [[https://github.com/jimeh/build-emacs-for-macos/issues/12][issue with emacs build on mac with SVG]]
**** [[https://www.adventuresinwhy.com/post/compiling-emacs-with-tree-sitter/][adventuresonwhy build emacs 29 with tree-sitter]]
**** [[https://famme.sk/blog/compilation-of-gnu-emacs-29-30-in-debian-12.html][famme.sk compile emacs 30 on Debian 12]]
**** [[https://ryanfleck.ca/2024/compiling-emacs-29/][on mac good minimal tips]]
**** [[https://www.reddit.com/r/emacs/comments/1e3nav3/emacs_29_wont_build_with_svg_even_with_withrsvg/][emacs with svg requires these apprently: sudo apt-get install librsvg2-2 librsvg2-dev]]
**** 
*** treesitter:
**** [[https://www.masteringemacs.org/article/lets-write-a-treesitter-major-mode][writing a major mode that uses tree-sitter]]
*** more efficient faster completions for our Python, using this code, for now. We just need to set company-mode properly, and then use configs below from this [[https://github.com/joaotavora/eglot/discussions/1436][link]]
#+begin_src lisp


(use-package company
  :config (setq company-idle-delay 0
		company-minimum-prefix-length 1
		company-tooltip-align-annotations t))
(add-hook 'after-init-hook 'global-company-mode)
  
#+end_src
*** Write somewhere why syntax trees (for parsers) are very difficult to get correct. Compilers are kinda "closed source"https://www.masteringemacs.org/article/combobulate-structured-movement-editing-treesitter. While compilers are the source of truth, we cant rely on its "closed sourceness
*** [[https://www.deusinmachina.net/p/tree-sitter-revolutionizing-parsing][parsing tree-sitter link]]
*** [[https://www.masteringemacs.org/article/combobulate-structured-movement-editing-treesitter][another one on tree-sitter]]
*** 
*** [[https://jackjamison.xyz/blog/emacs-garbage-collection/][garbage collection, basically to reduce stuttering]]
*** [[https://kitchingroup.cheme.cmu.edu/blog/2016/11/10/Persistent-highlighting-in-Emacs/][The Kitchin Research Group]]
*** [[https://github.com/rougier/svg-tag-mode][really cool, possible improvement to our html editing]]
*** [[https://github.com/io12/good-scroll.el][supersmooth scrolling]]
*** [[https://github.com/minad/org-modern][org-modern look]]
*** join multi into 1 without spaces
*** [[https://karthinks.com/software/fringe-matters-finding-the-right-difference/][another cool blog]]
*** try save-excursion and return in quit for select-hydra. Or the similar trick in your word-hydra
** We need to refactor error message of upload, what do we do with all the ID info?? Maybe theres no need for it.
*** create checks for duplicate events
*** we should add timestamp naming for CSV files
** Python web app security practices:
*** https://qwiet.ai/hacking-and-securing-python-applications/
** RUST:
*** Some recommended (please go through them, defo begging you...) resources:
**** Install Rust - Rust Programming Language (A must!)
****     Official Introduction to Bevy (Highly recommended!)
****     What is an ECS? feat. Bevy and Rust (Entity-Component-System, a core concept in Bevy, explained in a video by Chris Biscardi)
****     Game Engine Of The Future - YouTube (A very fun and nice introduction to the Bevy engine by TanTan! Definitely not trying to convince you to switch over to Bevy for your future projects hahaha)
****     Bevy Playground (Try Bevy on your browser now!!!! Highly recommended!)
**** Contact us organizers at
****  +60164410216 (Ivan Tham)
****     +60129851338 (Jeffrey Lean)
****     +60173389100 (Nixon)
**** [[https://t.me/+dF46Fly4A_BjOTJl][subscribe for more events]]
****  https://rust-malaysia.github.io/meetup/
**** [[https://www.youtube.com/playlist?list=PL85XCvVPmGQh3V0Pz-_xFm6VAUTR4aLUw][YouTube]]
**** [[https://nixon-voxell.itch.io/lumina][game1]]
**** [[https://github.com/nixon-voxell/lumina][game2]]
**** [[https://bevyengine.org/learn/quick-start/getting-started/setup/][install bevy]]
**** [[https://www.rust-lang.org/tools/install][install rust]]
**** [[https://bevyengine.org/learn/quick-start/introduction/][introduction to bevy]]
**** [[https://www.youtube.com/watch?v=AirfWcVOEHw][Entity Component System]]
**** [[https://www.youtube.com/watch?v=sfFQrhajs6o][YouTube introduction]]
**** [[https://learnbevy.com/playground][bevy playground]]
**** 
** Emacs, improve your web-mode, make it highlight matching tags
** Make sure you share-rate is above 3%
** Post in Pythons Group Malaysia, your willingness to work for Django, having experience in Flask and used Django for a side project.
** You managed to get the attention of Nick and Nardine
**** Time to post something REALLY clickbaity
**** Use a cartoon image of yourself, maybe Gimpify your face.
** Present your Emacs teaching class inside University of Malaya International students main discussion group. Gauge reaction
** Instagram, YouTube:
*** Join KLCC groups, Malaysian craft groups, Malaysian art group, Southeast Asian music groups to target more than 100 views by Saturday.
** https://www.interview.micro1.ai/intro/micro1/?candidate=698fa6e4-4849-4b2a-90cf-db3e7d8d3816&ping=ok
** Social media posting:
*** Post again your 
*** Managing 2 Emacs version (28 and 29 in my case) minimally, not much fancy hack.
*** My Noevim-killer setup. No, Ive got nothing againt Vim or Neovim, and I did not set out to create a Vim-binding alternative, but it feels so ergonomic, it might as well as be. However, I mostly combined this with some unique hacky modifications of my own keyboard, as well as my usage of both sides of Ctrl and Alt. So they might not work for your setup. One of the complaints I hear all the time from YouTubers who are pro Neovim are Emacs pinky's, which is the result of Emacs over-reliance on modifiers like Alt and Ctrl. Ive used Emacs for less than 10 years, so unlike others, I personally feel less attached if Emacs in the future decides to change some default keybindings. Theres always a workarond, by having a "classic bindings". Anyway, long story short, here are some of the clever tricks that I came up with in my journey to a more ergonomic Vim-binding alternative in Emacs:
**** Completely rewire how I use my my keyboard. This ones more like "hardwired" hack. Basically, I always use both hands, and as little pinky as possible. When I am pressing Ctrl-w, instead of using Left hand for both Ctrl and W, I use Right hand for Ctrl and Left hand for w.
**** I experimented with Hydra mode as much as possible. Using Hydra mode, I map shortcuts like ;;t to a Personal learning Diary, and ;;p to my Python Diary, and there are 24 more alphabets to go. If I were to ever code in C or C++, I could remap those modes to exclusively not use those.
**** I use a rather less-known package called Key Chord. Using key chords, I create a directional bigram, that is highly ergonomic. I will explain this in a later post, but simply, instead of Ctrl-_ for Undo, I use qw for Undo, since qw is a key combination rarely used in writing (aka bigram). Since qw is placed on the left (aka directional), left hints on "going back", since its our natural reading direction. These directional key presses are a theme I apply throughout (]\ for opening empty scratch buffer on the right, p[ is for moving to opened window on the right, and [] for moving to opened window on the left, zx for moving to previous buffer, and ,. for moving to next buffer). 
**** I paste small Velcro pieces on all my keyboard modifiers, such as Ctrl and Alt with braille-inspired variations, so I can literally just feel the Alt and Ctrl. Similarly applied to by directional bigram key chords. In my current workflow, I no longer look at the keys for Ctrl or Alt, and this braille addition makes my navigation many times more ergonomic.
**** Thats it, so far, my only complain is this Velcro addition makes my keyboard look ugly, my next move might be to epoxy necklace beads to my keyboards for those braille-inspired patterns. Yes its very hacky, but its better than carrying a very bulky mechnical keyboard everywhere with me.
**** References: [[https://github.com/emacsorphanage/key-chord][Key Chords]] and [[https://www.johndcook.com/blog/2015/02/01/rare-bigrams/][bigrams]]
**** Well, its either this or a very expensive split keyboard that is completely out of my reach.
*** Things I learnt from the book UNIX-haters.  So many, but the few things that were useful to me:
**** Commands like rm, cp, are badly designed due to cryptic naming (2-letter word), inconsistent documentation (beginning users learn are told to use "man <command>", but many commands dont have man, such as fg, jobs, set). 
**** UNIX does not respect many forms of boundaries such as files, even though everything is supposedly a file in UNIX philosophy, many UNIX commands (some are carried forward over to Linux) easily overwrites files, when used wrongly (and mistakes are very easy to make in UNIX, even for sys-admins). So I made tinkered my Emacs to force myself to chane my habit. Actually not "force", I ensured Emacs navigation was more comfortable thn navigating using cd commands or removing files using rm command. I dont want to use aliases for rm, so I dont forget just how dangerous the rm command is. 
**** In Emacs Dired (the file manager of Emacs), I replaced <enter> and ^ with Alt-<right> and Alt-<left>. more comfortable than a terminal. And I defined the variable trash-directory so that deleting a file gets moved to a trashcan first, like other operating system's. The usual delete commands in Emacs Dired are already comfortable
**** Some of the bad design elements were also due to "market constraint". There was millitary funding of UNIX development at University of Berkeley. And you had to please millitary general requirements or maybe just contraints. Which is proof that most of techs history is closely related "culture and art" than it is to something rational and logical. And UNIX has infested everywhere at our current time.
**** OSI model (of the network) sucks. Despite what people in tech make you think, tech is more art than science. Nothing wrong with that, but its a messy art. OSI are created by "standard makers", but just like the guys who libraries for programming, the guys who write the standards are usually not the same guys who use the standard. People who use UNIX's sendmail at the time (also a horrible tool) also complain about OSI
*** Diary in Emacs, perhaps the best way to learn Emacs selfishly:
**** So its me back, and im back with more "what I do with my Emacs". Some of the previous points last time, was integrating org-mode with Obsidian markdown files, so I can read everything I write in Emacs on my tablet, using the fancy Obsidian.
**** I also mentioned in passing my org note setup. However, I wanna try to focus on writing a diary in Emacs, as well as some features that might be attractive to some of you, but I dont use personally. My way of learning Emacs during my early years, is to steal a little of time everyday to write a diary in Emacs.
**** Why write a diary? Well for one, the human mind has a very abstract understanding of time. With regards to skil for example, im sure many of us have spent countless hours, even thousands of hours, learning a particular difficult skill, a football trick, a juggling trick, painting, a musical piece. This is not to mention solving a software skill, that is seemingly easy to understand but difficult to execute at as a junior. Writing a diary serves as a log of progress. If we spend so much time looking at computer code, why we cant we do the same with the most important software and hardware, our brain? Its not about optimizing for progress sake, but for mental health, so write in your diary your accomplishment in side projects or hobbies. You are more than just the value of what corporates give you. Make the technology you use serve you side passions too. Dont lose sight of the goal, technology is supposed to make your life easier not harder.
**** Using a diary, you can split further your learning experience into Emacs and non-Emacs stuff. Eventually, you will reach an Emacs level, where you create not just shortcuts, but overpowered shortcuts that map to everything else, your Python notes, your current project, your favourite shell script, a shortcut that triggers a simple backup script, anything (we are not talking about running a script from the IDE, but rather mapping Ctrl-c Ctrl-g or whatever). But reaching there, like every other skill takes time. Use Emacs to learn Emacs, TODO lists, reminders, notes. Cheat your boss by including 30 minutes of Emacs reading. 
**** there are many parts to explore. Actually the best thing to explore about Emacs which is org-mode. Its everything, a knowledge management system, a TODO organizer, a diary, a daily reminder, a timer, you name it, org-mode has it. Use Org-Mode as part of this "cheat" routine. Eventually, Org-Mode will make your life and work easier, but its one of those of things where you will never be able to convince your boss or colleague, it has so many advantages yet difficult to communicate to others. Forget an employer, even explaining to a friend is a struggle.
**** yes, in a sense, Im using this as an excuse to advertize Emacs as an alternative. However, this comes with a warning. In short, if you want a software that has "opinions" on the best way to do things, this is not for you. Emacs is dangerous in a sense it has 0 opinions on the best way things. On top of that, you are not going to learn things in a month or 2, it is a real invesment.
**** But Im gonna end this on a good note, eventually everything will turn out fine. The community is there r/emacs on Reddit, SachaChua, Xah Lee, SystemCrafters, Protesilaos. Some of these guys are not coders.
** Jobs:
*** [[https://app.outlier.ai/en/expert][Outlier tasks]]
*** micro1
*** Interesting companies
**** PostCo: really likes open minded developers, who learn rare stuff. says want developers open to learning Ruby on Rails 
**** Hero Plus Group: uses Ruby in Rails. Specifically mentions Flask.
*** https://my.hiredly.com
*** https://www.maukerja.my/
*** https://www.jorawork.com/
*** https://www.ricebowl.my
*** Read about orchestration and automation
*** about Google cloud platforms: Snowflake and Databricks (good to have)
*** maybe SQL and Azure diffs
** We need to test duplicates of everything, but for now only FIDE ID
** Python:
*** understanding [[https://www.geeksforgeeks.org/python-flask-immutablemultidict/][immutablemultidict]], kinda important
*** Jinja2 award winning [[https://ttl255.com/jinja2-tutorial-part-4-template-filters/][blog]]
*** Learn Polars
*** A good Flask read on getting data back from DB, from another good site called [[https://python-adv-web-apps.readthedocs.io/en/latest/flask_db2.html][python-adv-web-apps]]
*** not a good bulk update tutorial, but its got exampe of [[https://github.com/sqlalchemy/sqlalchemy/discussions/10537][python tricks]] with lists
*** Spend time reading a Github example [[https://github.com/adityaShar24/Social-Media-Backend?tab=readme-ov-file][Flask social media]] app, for MORE examples
*** [[https://www.devdungeon.com/content/run-python-wsgi-web-app-waitress][READ WSGI]]
*** What is this [[https://austinpoor.com/blog/plots-with-jinja][SVG]] experiment. This one is [[https://www.react-graph-gallery.com/build-axis-with-react][from react]]
*** Good [[https://www.peterspython.com/en/blog/sqlalchemy-using-cascade-deletes-to-delete-related-objects][link]] on Python Flask SQLalchemy on cascade-deletes. Especially note the "Database object deletes using ForeignKey ON DELETE CASCADE"
** Its very important to be knowledgable on common practices of "deploying to production". So READ [[https://flask.palletsprojects.com/en/stable/tutorial/deploy/][THIS]]. Also, read on lots of [[https://flask.palletsprojects.com/en/stable/deploying/][CONCEPTS]]
** We are going to READ on FILE VALIDATION, COMMON skill:
*** https://imagekit.io/blog/how-to-upload-files-in-html/
** The best way to read CSS frameworks, while learning an actual project in your real work, while also spending time doing your personal project, is to read all the documentation of several. Im currently reading both Bootstrap and Tailwind CSS. The frameworks come from different perspectives and opinions. And trying to get into the mind fo the guys who created the "language", means trying to think "what is the creator trying to convey", when reading all their documentations. 
** We are going to publish our site, either in render or fly.io
** Progress
*** write about how you successfully did flex properly (3 child divs). Also flex and grid-cols dont mix very well. Remember to note how you read repeatedly sources from Bootstrap and Tailwind docs to get a sense of  CSS logic. You also tried to memorize slightly tailwind CSS. 
*** Do you want to write about thinking in terms of context. 
** read about [[https://www.linkedin.com/pulse/power-css-organizing-data-rows-columns-shydra-murray-h8t9c/][Flexbox]] please and differences between [[https://pieces.app/blog/top-5-best-css-frameworks-for-responsive-web-design-in-2024][css frameworks]]
** Reading
*** [[https://www.jstor.org/stable/2053842][Japanese anti-monopoly law]]
** Watch:
*** https://www.youtube.com/watch?v=YRvBQdJlBeo
*** https://www.youtube.com/watch?v=421twOHytG0
*** https://www.youtube.com/watch?v=1MSy6epsU6Y
*** https://www.youtube.com/watch?v=9UIIMBqq1D4
*** https://www.youtube.com/watch?v=afA0b5ygTyA
** Emacs:
*** Also, finish this somewhere, about starting, and its not that simple, becoz things go wrong, Emacs tends to hide it, when use the usual shell-command, so instead, your UNIT OF ABSTRACTION must be the process:
**** http://xahlee.info/emacs/emacs/elisp_start_external_process.html
*** Convincing others:
**** Non-destructive ways to test Emacs packages:
***** use the try package. Then do the usual use-package, or any normal config for that package you found online.
*** create a emacs script that calls magick on any dired
*** try perspective el
*** Also try Emacs Application Framework on a new laptop
*** You like trying cool custom personalized Emacs el. This one is useful simpler bookmark, might help a lot in you html editing: [[https://github.com/joodland/bm][here]]
*** we are professional, so we need to make Python SUBMIT to us. [[https://emacs.stackexchange.com/questions/3372/coloring-indentation-levels][Color diff indentation levels]]
*** we need another Hydra to ehsily go to other-window using (other-window 1)
*** [[https://zck.org/define-keymap][keymap]] very cool stuff
*** web-mode-element-wrap must be hydra-ed. We also need to auto-select a whole delimiter. But first try the stackoverflow templating engine trick.
*** We need to learn this Emacs [[https://emacs.stackexchange.com/questions/23810/getting-proper-indentation-for-python-flask-templates][templating indent]] mode thingy
*** we are going to try to use enriched mode to color Emacs
** Store this cool [[https://www.andrewvillazon.com/move-data-to-db-with-sqlalchemy/][declarative_base]] link, coz we managed to make it work for bulk upload. Note how you dont need to remove your usual model in your class. The declarative_model simply maps your class with the existing table.
** override modus theme, a masterpiece theme according to 1 guy, into a [[https://github.com/idlip/haki/tree/haki][high contrast tasheme]]
** Store this [[https://yannesposito.com/posts/0020-cool-looking-org-mode/index.html][cool Emacs link]] somewhere
** readng technical software/programming documentation for beginners requires a balance of conceptual and technical description.
** contact African guy again
** Python project notes, jot down the folowing:
*** [[https://jinja.palletsprojects.com/en/stable/templates/][we should read more Jinja, just read documentation, spend 1 hour]]
*** [[https://stackoverflow.com/questions/5458048/how-can-i-make-a-python-script-standalone-executable-to-run-without-any-dependen][pythinstaller -f will create a proper .exe]]
*** [[https://stackoverflow.com/questions/16981805/how-does-templating-engine-work][templating engine pedagogy]]
*** [[https://stackoverflow.com/questions/7460938/how-to-run-a-python-script-in-a-web-page][ways to embed python script in website. But maybe we dont need this.]]
*** [[https://skulpt.org/using.html][skulpt is cheat for running python like its javascript]]
*** [[https://flask.palletsprojects.com/en/stable/][Im not sure why i was reading about Flask]]
** TODO 
*** [[https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Server-side/Django/Models][we REALLY need to read about MODELS before proceeding with Django]]
** TODO 
*** post about why you write in Emacs. a constant in the software world, is bad documentation.
** I read about ketamine, psilocybin and alcohol, and also neurotransmitter GABA
*** https://adf.org.au/drug-facts/ketamine/
*** https://www.psychologytoday.com/intl/blog/culturally-speaking/202312/the-magic-behind-the-molecules-psilocybin-vs-alcohol
*** https://my.clevelandclinic.org/health/articles/22857-gamma-aminobutyric-acid-gaba
**** Researchers are still studying the effects of increased level of GABA, for High blood pressure, Insomnia, Diabetes.
*** GABA presence in food:
****  kimchi, miso and tempeh
**** green, black and oolong tea
**** brown rice, soy and adzuki beans, chestnuts, mushrooms, tomatoes, spinach, broccoli, cabbage, cauliflower, Brussels sprouts, sprouted grains and sweet potatoes
** TODO 
*** Study example uses of defmacro in Emacs
** [[https://ringgitplus.com/en/blog/income-tax/how-to-file-your-taxes-for-the-first-time.html][read on how to do e-filing for d first time]]
** wrote a little n Scriabin nocturne
** Read about your Hugo
*** Understand layouts and everything inside (partials, shortcodes, _default)
*** When you replaced your /layouts folder, it fails, simple rename back /_layouts
* Piano (no social media progress)
** You need to buy a stand
* More org notes
** For your recipes
*** Balti
*** some YSAC u did before
*** your chocolate donut (combination of Jamie Olivers friend & Gordon Ramsay)
** For suit, call these numbers for material. (Mention that Sparkle, Lot L-D 1&2, Pudu Plaza, KL recommended these guys)
*** 011 70018033
*** 013 343 2049
*** 018 398 5048
* Address:
** G-12-30, BLOCK G MENTARI COURT Gate 1, Jalan PJS 8/9, Bandar Sunway, 46150 Petaling Jaya, Selangor, Malaysia
